
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'build/textytest.data';
    var REMOTE_PACKAGE_BASE = 'textytest.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
    var REMOTE_PACKAGE_SIZE = 2317570;
    var PACKAGE_UUID = 'ef52dd47-bbb4-4a5e-9a4c-346589682963';
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'assets', true, true);
Module['FS_createPath']('/assets', 'making', true, true);
Module['FS_createPath']('/assets', 'PNG', true, true);
Module['FS_createPath']('/assets/PNG', 'Tiles red', true, true);
Module['FS_createPath']('/assets/PNG', 'Tiles yellow', true, true);
Module['FS_createPath']('/assets/PNG', 'Balls', true, true);
Module['FS_createPath']('/assets/PNG/Balls', 'Black', true, true);
Module['FS_createPath']('/assets/PNG/Balls', 'Grey', true, true);
Module['FS_createPath']('/assets/PNG/Balls', 'Blue', true, true);
Module['FS_createPath']('/assets/PNG/Balls', 'Yellow', true, true);
Module['FS_createPath']('/assets/PNG', 'Pipes', true, true);
Module['FS_createPath']('/assets/PNG/Pipes', 'Green', true, true);
Module['FS_createPath']('/assets/PNG/Pipes', 'Grey', true, true);
Module['FS_createPath']('/assets/PNG', 'Paddles', true, true);
Module['FS_createPath']('/assets/PNG', 'Tiles grey', true, true);
Module['FS_createPath']('/assets/PNG', 'Tiles black', true, true);
Module['FS_createPath']('/assets/PNG', 'Particles yellow', true, true);
Module['FS_createPath']('/assets/PNG', 'Back tiles', true, true);
Module['FS_createPath']('/assets/PNG', 'Tiles green', true, true);
Module['FS_createPath']('/assets/PNG', 'Tiles blue', true, true);
Module['FS_createPath']('/assets/PNG', 'Coins', true, true);
Module['FS_createPath']('/assets/PNG', 'Tiles orange', true, true);
Module['FS_createPath']('/assets/PNG', 'Tiles pink', true, true);
Module['FS_createPath']('/assets/PNG', 'Particles blue', true, true);
Module['FS_createPath']('/assets/PNG', 'Particles white', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };
      new DataRequest(0, 3108, 0, 0).open('GET', '/assets/paddle_12.png');
    new DataRequest(3108, 6316, 0, 0).open('GET', '/assets/paddle_08.png');
    new DataRequest(6316, 11882, 0, 0).open('GET', '/assets/paddle.png');
    new DataRequest(11882, 427434, 0, 0).open('GET', '/assets/Ubuntu-Light.ttf');
    new DataRequest(427434, 443077, 0, 0).open('GET', '/assets/atlas.png');
    new DataRequest(443077, 449823, 0, 0).open('GET', '/assets/ball.png');
    new DataRequest(449823, 791147, 0, 0).open('GET', '/assets/Ubuntu-Medium.ttf');
    new DataRequest(791147, 825181, 0, 0).open('GET', '/assets/making/atlas.xcf');
    new DataRequest(825181, 826473, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_10.png');
    new DataRequest(826473, 829542, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_57.png');
    new DataRequest(829542, 831609, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_32.png');
    new DataRequest(831609, 834419, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_60.png');
    new DataRequest(834419, 837624, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_69.png');
    new DataRequest(837624, 838491, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_25.png');
    new DataRequest(838491, 839514, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_19.png');
    new DataRequest(839514, 840563, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_52.png');
    new DataRequest(840563, 843478, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_54.png');
    new DataRequest(843478, 845287, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_34.png');
    new DataRequest(845287, 847340, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_68.png');
    new DataRequest(847340, 850310, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_66.png');
    new DataRequest(850310, 850732, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_03.png');
    new DataRequest(850732, 851783, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_64.png');
    new DataRequest(851783, 852336, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_13.png');
    new DataRequest(852336, 855282, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_30.png');
    new DataRequest(855282, 856664, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_67.png');
    new DataRequest(856664, 858082, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_22.png');
    new DataRequest(858082, 858967, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_37.png');
    new DataRequest(858967, 859784, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_62.png');
    new DataRequest(859784, 862698, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_72.png');
    new DataRequest(862698, 864961, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_23.png');
    new DataRequest(864961, 865813, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_49.png');
    new DataRequest(865813, 866248, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_15.png');
    new DataRequest(866248, 868278, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_11.png');
    new DataRequest(868278, 869681, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_43.png');
    new DataRequest(869681, 870494, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_26.png');
    new DataRequest(870494, 873495, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_42.png');
    new DataRequest(873495, 874196, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_51.png');
    new DataRequest(874196, 875627, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_08.png');
    new DataRequest(875627, 878570, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_48.png');
    new DataRequest(878570, 879111, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_01.png');
    new DataRequest(879111, 881171, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_17.png');
    new DataRequest(881171, 882973, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_58.png');
    new DataRequest(882973, 885043, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_18.png');
    new DataRequest(885043, 888143, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_33.png');
    new DataRequest(888143, 890859, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_41.png');
    new DataRequest(890859, 891689, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_38.png');
    new DataRequest(891689, 894755, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_59.png');
    new DataRequest(894755, 898045, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_71.png');
    new DataRequest(898045, 899995, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_12.png');
    new DataRequest(899995, 902032, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_56.png');
    new DataRequest(902032, 904376, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_21.png');
    new DataRequest(904376, 907460, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_35.png');
    new DataRequest(907460, 910775, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_47.png');
    new DataRequest(910775, 912781, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_06.png');
    new DataRequest(912781, 913477, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_04.png');
    new DataRequest(913477, 915344, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_05.png');
    new DataRequest(915344, 916215, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_61.png');
    new DataRequest(916215, 916930, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_63.png');
    new DataRequest(916930, 919006, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_44.png');
    new DataRequest(919006, 920920, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_70.png');
    new DataRequest(920920, 921412, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_14.png');
    new DataRequest(921412, 924074, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_65.png');
    new DataRequest(924074, 924793, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_27.png');
    new DataRequest(924793, 927279, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_53.png');
    new DataRequest(927279, 930103, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_36.png');
    new DataRequest(930103, 932032, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_46.png');
    new DataRequest(932032, 934099, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_24.png');
    new DataRequest(934099, 937378, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_45.png');
    new DataRequest(937378, 938700, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_55.png');
    new DataRequest(938700, 939435, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_39.png');
    new DataRequest(939435, 940135, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_16.png');
    new DataRequest(940135, 941588, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_20.png');
    new DataRequest(941588, 944098, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_29.png');
    new DataRequest(944098, 945086, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_07.png');
    new DataRequest(945086, 946160, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_40.png');
    new DataRequest(946160, 946649, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_02.png');
    new DataRequest(946649, 947722, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_28.png');
    new DataRequest(947722, 949906, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_09.png');
    new DataRequest(949906, 951253, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_31.png');
    new DataRequest(951253, 952051, 0, 0).open('GET', '/assets/PNG/Tiles red/tileRed_50.png');
    new DataRequest(952051, 952598, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_13.png');
    new DataRequest(952598, 955543, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_42.png');
    new DataRequest(955543, 956266, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_39.png');
    new DataRequest(956266, 956964, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_16.png');
    new DataRequest(956964, 958804, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_70.png');
    new DataRequest(958804, 962085, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_47.png');
    new DataRequest(962085, 965006, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_48.png');
    new DataRequest(965006, 966888, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_46.png');
    new DataRequest(966888, 967317, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_15.png');
    new DataRequest(967317, 970399, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_33.png');
    new DataRequest(970399, 971383, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_07.png');
    new DataRequest(971383, 973365, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_56.png');
    new DataRequest(973365, 976151, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_60.png');
    new DataRequest(976151, 979214, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_35.png');
    new DataRequest(979214, 981491, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_23.png');
    new DataRequest(981491, 982507, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_19.png');
    new DataRequest(982507, 985594, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_69.png');
    new DataRequest(985594, 986468, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_37.png');
    new DataRequest(986468, 988238, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_34.png');
    new DataRequest(988238, 988928, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_04.png');
    new DataRequest(988928, 992159, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_71.png');
    new DataRequest(992159, 994214, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_18.png');
    new DataRequest(994214, 995552, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_31.png');
    new DataRequest(995552, 996942, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_43.png');
    new DataRequest(996942, 999819, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_54.png');
    new DataRequest(999819, 1002634, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_36.png');
    new DataRequest(1002634, 1005539, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_66.png');
    new DataRequest(1005539, 1006817, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_10.png');
    new DataRequest(1006817, 1009334, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_29.png');
    new DataRequest(1009334, 1011508, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_09.png');
    new DataRequest(1011508, 1013413, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_05.png');
    new DataRequest(1013413, 1014108, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_51.png');
    new DataRequest(1014108, 1014595, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_02.png');
    new DataRequest(1014595, 1016022, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_08.png');
    new DataRequest(1016022, 1016829, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_62.png');
    new DataRequest(1016829, 1018914, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_17.png');
    new DataRequest(1018914, 1021524, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_65.png');
    new DataRequest(1021524, 1021942, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_03.png');
    new DataRequest(1021942, 1024011, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_24.png');
    new DataRequest(1024011, 1026038, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_32.png');
    new DataRequest(1026038, 1028736, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_41.png');
    new DataRequest(1028736, 1030480, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_58.png');
    new DataRequest(1030480, 1030967, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_14.png');
    new DataRequest(1030967, 1032957, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_68.png');
    new DataRequest(1032957, 1033670, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_27.png');
    new DataRequest(1033670, 1034700, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_52.png');
    new DataRequest(1034700, 1036655, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_12.png');
    new DataRequest(1036655, 1037517, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_61.png');
    new DataRequest(1037517, 1038586, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_40.png');
    new DataRequest(1038586, 1039432, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_49.png');
    new DataRequest(1039432, 1042467, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_59.png');
    new DataRequest(1042467, 1043286, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_38.png');
    new DataRequest(1043286, 1044325, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_64.png');
    new DataRequest(1044325, 1045116, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_50.png');
    new DataRequest(1045116, 1047153, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_11.png');
    new DataRequest(1047153, 1047956, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_26.png');
    new DataRequest(1047956, 1050007, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_44.png');
    new DataRequest(1050007, 1053011, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_57.png');
    new DataRequest(1053011, 1055928, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_30.png');
    new DataRequest(1055928, 1056786, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_25.png');
    new DataRequest(1056786, 1058230, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_20.png');
    new DataRequest(1058230, 1060692, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_53.png');
    new DataRequest(1060692, 1061230, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_01.png');
    new DataRequest(1061230, 1063556, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_21.png');
    new DataRequest(1063556, 1064942, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_22.png');
    new DataRequest(1064942, 1066293, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_67.png');
    new DataRequest(1066293, 1069155, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_72.png');
    new DataRequest(1069155, 1070459, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_55.png');
    new DataRequest(1070459, 1071523, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_28.png');
    new DataRequest(1071523, 1074753, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_45.png');
    new DataRequest(1074753, 1075464, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_63.png');
    new DataRequest(1075464, 1077483, 0, 0).open('GET', '/assets/PNG/Tiles yellow/tileYellow_06.png');
    new DataRequest(1077483, 1080261, 0, 0).open('GET', '/assets/PNG/Balls/Black/ballBlack_10.png');
    new DataRequest(1080261, 1082888, 0, 0).open('GET', '/assets/PNG/Balls/Black/ballBlack_07.png');
    new DataRequest(1082888, 1085342, 0, 0).open('GET', '/assets/PNG/Balls/Black/ballBlack_08.png');
    new DataRequest(1085342, 1086804, 0, 0).open('GET', '/assets/PNG/Balls/Black/ballBlack_03.png');
    new DataRequest(1086804, 1087950, 0, 0).open('GET', '/assets/PNG/Balls/Black/ballBlack_01.png');
    new DataRequest(1087950, 1089723, 0, 0).open('GET', '/assets/PNG/Balls/Black/ballBlack_05.png');
    new DataRequest(1089723, 1092207, 0, 0).open('GET', '/assets/PNG/Balls/Black/ballBlack_09.png');
    new DataRequest(1092207, 1093825, 0, 0).open('GET', '/assets/PNG/Balls/Black/ballBlack_02.png');
    new DataRequest(1093825, 1095312, 0, 0).open('GET', '/assets/PNG/Balls/Black/ballBlack_04.png');
    new DataRequest(1095312, 1097442, 0, 0).open('GET', '/assets/PNG/Balls/Black/ballBlack_06.png');
    new DataRequest(1097442, 1098924, 0, 0).open('GET', '/assets/PNG/Balls/Grey/ballGrey_04.png');
    new DataRequest(1098924, 1101481, 0, 0).open('GET', '/assets/PNG/Balls/Grey/ballGrey_09.png');
    new DataRequest(1101481, 1102615, 0, 0).open('GET', '/assets/PNG/Balls/Grey/ballGrey_01.png');
    new DataRequest(1102615, 1105419, 0, 0).open('GET', '/assets/PNG/Balls/Grey/ballGrey_10.png');
    new DataRequest(1105419, 1107025, 0, 0).open('GET', '/assets/PNG/Balls/Grey/ballGrey_02.png');
    new DataRequest(1107025, 1109241, 0, 0).open('GET', '/assets/PNG/Balls/Grey/ballGrey_06.png');
    new DataRequest(1109241, 1111946, 0, 0).open('GET', '/assets/PNG/Balls/Grey/ballGrey_07.png');
    new DataRequest(1111946, 1113669, 0, 0).open('GET', '/assets/PNG/Balls/Grey/ballGrey_05.png');
    new DataRequest(1113669, 1115114, 0, 0).open('GET', '/assets/PNG/Balls/Grey/ballGrey_03.png');
    new DataRequest(1115114, 1117649, 0, 0).open('GET', '/assets/PNG/Balls/Grey/ballGrey_08.png');
    new DataRequest(1117649, 1119208, 0, 0).open('GET', '/assets/PNG/Balls/Blue/ballBlue_04.png');
    new DataRequest(1119208, 1121855, 0, 0).open('GET', '/assets/PNG/Balls/Blue/ballBlue_08.png');
    new DataRequest(1121855, 1124708, 0, 0).open('GET', '/assets/PNG/Balls/Blue/ballBlue_07.png');
    new DataRequest(1124708, 1125880, 0, 0).open('GET', '/assets/PNG/Balls/Blue/ballBlue_01.png');
    new DataRequest(1125880, 1128184, 0, 0).open('GET', '/assets/PNG/Balls/Blue/ballBlue_06.png');
    new DataRequest(1128184, 1129722, 0, 0).open('GET', '/assets/PNG/Balls/Blue/ballBlue_03.png');
    new DataRequest(1129722, 1132709, 0, 0).open('GET', '/assets/PNG/Balls/Blue/ballBlue_10.png');
    new DataRequest(1132709, 1135399, 0, 0).open('GET', '/assets/PNG/Balls/Blue/ballBlue_09.png');
    new DataRequest(1135399, 1137284, 0, 0).open('GET', '/assets/PNG/Balls/Blue/ballBlue_05.png');
    new DataRequest(1137284, 1138992, 0, 0).open('GET', '/assets/PNG/Balls/Blue/ballBlue_02.png');
    new DataRequest(1138992, 1140171, 0, 0).open('GET', '/assets/PNG/Balls/Yellow/ballYellow_01.png');
    new DataRequest(1140171, 1141902, 0, 0).open('GET', '/assets/PNG/Balls/Yellow/ballYellow_02.png');
    new DataRequest(1141902, 1143788, 0, 0).open('GET', '/assets/PNG/Balls/Yellow/ballYellow_05.png');
    new DataRequest(1143788, 1146768, 0, 0).open('GET', '/assets/PNG/Balls/Yellow/ballYellow_10.png');
    new DataRequest(1146768, 1148340, 0, 0).open('GET', '/assets/PNG/Balls/Yellow/ballYellow_04.png');
    new DataRequest(1148340, 1150650, 0, 0).open('GET', '/assets/PNG/Balls/Yellow/ballYellow_06.png');
    new DataRequest(1150650, 1152205, 0, 0).open('GET', '/assets/PNG/Balls/Yellow/ballYellow_03.png');
    new DataRequest(1152205, 1155066, 0, 0).open('GET', '/assets/PNG/Balls/Yellow/ballYellow_07.png');
    new DataRequest(1155066, 1157758, 0, 0).open('GET', '/assets/PNG/Balls/Yellow/ballYellow_09.png');
    new DataRequest(1157758, 1160403, 0, 0).open('GET', '/assets/PNG/Balls/Yellow/ballYellow_08.png');
    new DataRequest(1160403, 1163032, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_24.png');
    new DataRequest(1163032, 1165745, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_34.png');
    new DataRequest(1165745, 1167481, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_28.png');
    new DataRequest(1167481, 1169479, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_40.png');
    new DataRequest(1169479, 1170299, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_26.png');
    new DataRequest(1170299, 1170781, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_04.png');
    new DataRequest(1170781, 1172044, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_32.png');
    new DataRequest(1172044, 1173194, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_17.png');
    new DataRequest(1173194, 1176206, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_43.png');
    new DataRequest(1176206, 1179839, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_29.png');
    new DataRequest(1179839, 1182258, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_35.png');
    new DataRequest(1182258, 1184708, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_16.png');
    new DataRequest(1184708, 1188245, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_30.png');
    new DataRequest(1188245, 1190205, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_39.png');
    new DataRequest(1190205, 1191198, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_25.png');
    new DataRequest(1191198, 1193769, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_15.png');
    new DataRequest(1193769, 1197267, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_37.png');
    new DataRequest(1197267, 1199440, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_21.png');
    new DataRequest(1199440, 1202473, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_44.png');
    new DataRequest(1202473, 1204482, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_11.png');
    new DataRequest(1204482, 1207192, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_07.png');
    new DataRequest(1207192, 1209793, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_08.png');
    new DataRequest(1209793, 1211602, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_27.png');
    new DataRequest(1211602, 1213287, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_02.png');
    new DataRequest(1213287, 1214227, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_06.png');
    new DataRequest(1214227, 1215683, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_13.png');
    new DataRequest(1215683, 1216615, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_10.png');
    new DataRequest(1216615, 1218911, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_22.png');
    new DataRequest(1218911, 1222302, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_38.png');
    new DataRequest(1222302, 1223717, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_14.png');
    new DataRequest(1223717, 1225056, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_19.png');
    new DataRequest(1225056, 1226624, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_31.png');
    new DataRequest(1226624, 1229339, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_33.png');
    new DataRequest(1229339, 1231006, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_01.png');
    new DataRequest(1231006, 1231520, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_03.png');
    new DataRequest(1231520, 1233898, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_36.png');
    new DataRequest(1233898, 1234967, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_05.png');
    new DataRequest(1234967, 1236137, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_18.png');
    new DataRequest(1236137, 1238793, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_23.png');
    new DataRequest(1238793, 1240948, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_20.png');
    new DataRequest(1240948, 1243888, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_42.png');
    new DataRequest(1243888, 1245772, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_12.png');
    new DataRequest(1245772, 1246825, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_09.png');
    new DataRequest(1246825, 1248937, 0, 0).open('GET', '/assets/PNG/Pipes/Green/pipeGreen_41.png');
    new DataRequest(1248937, 1251238, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_35.png');
    new DataRequest(1251238, 1254096, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_42.png');
    new DataRequest(1254096, 1256719, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_33.png');
    new DataRequest(1256719, 1259993, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_38.png');
    new DataRequest(1259993, 1262201, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_22.png');
    new DataRequest(1262201, 1264697, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_24.png');
    new DataRequest(1264697, 1266266, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_01.png');
    new DataRequest(1266266, 1267281, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_05.png');
    new DataRequest(1267281, 1270661, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_37.png');
    new DataRequest(1270661, 1271991, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_14.png');
    new DataRequest(1271991, 1272495, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_03.png');
    new DataRequest(1272495, 1274341, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_12.png');
    new DataRequest(1274341, 1276829, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_08.png');
    new DataRequest(1276829, 1279301, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_15.png');
    new DataRequest(1279301, 1280102, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_26.png');
    new DataRequest(1280102, 1280572, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_04.png');
    new DataRequest(1280572, 1282479, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_40.png');
    new DataRequest(1282479, 1283844, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_13.png');
    new DataRequest(1283844, 1285772, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_11.png');
    new DataRequest(1285772, 1287877, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_21.png');
    new DataRequest(1287877, 1288994, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_18.png');
    new DataRequest(1288994, 1290870, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_39.png');
    new DataRequest(1290870, 1293229, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_16.png');
    new DataRequest(1293229, 1296712, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_29.png');
    new DataRequest(1296712, 1297676, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_25.png');
    new DataRequest(1297676, 1298596, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_06.png');
    new DataRequest(1298596, 1299633, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_09.png');
    new DataRequest(1299633, 1303025, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_30.png');
    new DataRequest(1303025, 1305303, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_36.png');
    new DataRequest(1305303, 1307916, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_34.png');
    new DataRequest(1307916, 1310835, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_43.png');
    new DataRequest(1310835, 1312921, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_20.png');
    new DataRequest(1312921, 1315839, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_44.png');
    new DataRequest(1315839, 1318430, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_07.png');
    new DataRequest(1318430, 1320097, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_28.png');
    new DataRequest(1320097, 1321809, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_27.png');
    new DataRequest(1321809, 1323055, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_32.png');
    new DataRequest(1323055, 1324589, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_31.png');
    new DataRequest(1324589, 1325845, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_19.png');
    new DataRequest(1325845, 1327428, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_02.png');
    new DataRequest(1327428, 1329947, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_23.png');
    new DataRequest(1329947, 1331039, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_17.png');
    new DataRequest(1331039, 1331953, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_10.png');
    new DataRequest(1331953, 1333957, 0, 0).open('GET', '/assets/PNG/Pipes/Grey/pipeGrey_41.png');
    new DataRequest(1333957, 1338611, 0, 0).open('GET', '/assets/PNG/Paddles/paddle_05.png');
    new DataRequest(1338611, 1341625, 0, 0).open('GET', '/assets/PNG/Paddles/paddle_07.png');
    new DataRequest(1341625, 1343979, 0, 0).open('GET', '/assets/PNG/Paddles/paddle_03.png');
    new DataRequest(1343979, 1347087, 0, 0).open('GET', '/assets/PNG/Paddles/paddle_12.png');
    new DataRequest(1347087, 1350295, 0, 0).open('GET', '/assets/PNG/Paddles/paddle_08.png');
    new DataRequest(1350295, 1354987, 0, 0).open('GET', '/assets/PNG/Paddles/paddle_10.png');
    new DataRequest(1354987, 1359503, 0, 0).open('GET', '/assets/PNG/Paddles/paddle_09.png');
    new DataRequest(1359503, 1363209, 0, 0).open('GET', '/assets/PNG/Paddles/paddle_01.png');
    new DataRequest(1363209, 1366982, 0, 0).open('GET', '/assets/PNG/Paddles/paddle_02.png');
    new DataRequest(1366982, 1369891, 0, 0).open('GET', '/assets/PNG/Paddles/paddle_11.png');
    new DataRequest(1369891, 1374696, 0, 0).open('GET', '/assets/PNG/Paddles/paddle_06.png');
    new DataRequest(1374696, 1377184, 0, 0).open('GET', '/assets/PNG/Paddles/paddle_04.png');
    new DataRequest(1377184, 1378190, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_52.png');
    new DataRequest(1378190, 1378870, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_16.png');
    new DataRequest(1378870, 1380769, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_11.png');
    new DataRequest(1380769, 1381301, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_01.png');
    new DataRequest(1381301, 1384122, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_42.png');
    new DataRequest(1384122, 1384798, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_04.png');
    new DataRequest(1384798, 1385833, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_28.png');
    new DataRequest(1385833, 1386622, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_26.png');
    new DataRequest(1386622, 1389136, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_41.png');
    new DataRequest(1389136, 1390489, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_20.png');
    new DataRequest(1390489, 1391346, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_37.png');
    new DataRequest(1391346, 1393015, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_70.png');
    new DataRequest(1393015, 1394884, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_24.png');
    new DataRequest(1394884, 1397160, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_65.png');
    new DataRequest(1397160, 1399126, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_44.png');
    new DataRequest(1399126, 1401827, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_72.png');
    new DataRequest(1401827, 1403559, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_05.png');
    new DataRequest(1403559, 1405769, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_53.png');
    new DataRequest(1405769, 1407649, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_18.png');
    new DataRequest(1407649, 1408607, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_19.png');
    new DataRequest(1408607, 1410400, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_56.png');
    new DataRequest(1410400, 1412969, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_66.png');
    new DataRequest(1412969, 1414235, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_67.png');
    new DataRequest(1414235, 1416913, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_60.png');
    new DataRequest(1416913, 1417755, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_49.png');
    new DataRequest(1417755, 1420558, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_30.png');
    new DataRequest(1420558, 1420979, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_15.png');
    new DataRequest(1420979, 1423554, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_54.png');
    new DataRequest(1423554, 1425610, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_23.png');
    new DataRequest(1425610, 1428642, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_71.png');
    new DataRequest(1428642, 1431444, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_48.png');
    new DataRequest(1431444, 1434412, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_35.png');
    new DataRequest(1434412, 1435120, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_39.png');
    new DataRequest(1435120, 1437868, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_36.png');
    new DataRequest(1437868, 1438569, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_63.png');
    new DataRequest(1438569, 1441252, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_69.png');
    new DataRequest(1441252, 1442292, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_40.png');
    new DataRequest(1442292, 1444262, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_32.png');
    new DataRequest(1444262, 1446386, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_21.png');
    new DataRequest(1446386, 1447331, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_07.png');
    new DataRequest(1447331, 1450470, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_47.png');
    new DataRequest(1450470, 1452069, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_58.png');
    new DataRequest(1452069, 1452765, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_27.png');
    new DataRequest(1452765, 1454001, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_55.png');
    new DataRequest(1454001, 1454841, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_25.png');
    new DataRequest(1454841, 1455384, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_13.png');
    new DataRequest(1455384, 1457367, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_09.png');
    new DataRequest(1457367, 1460307, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_33.png');
    new DataRequest(1460307, 1463214, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_59.png');
    new DataRequest(1463214, 1465851, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_57.png');
    new DataRequest(1465851, 1466259, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_03.png');
    new DataRequest(1466259, 1466739, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_02.png');
    new DataRequest(1466739, 1468526, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_68.png');
    new DataRequest(1468526, 1469331, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_62.png');
    new DataRequest(1469331, 1469823, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_14.png');
    new DataRequest(1469823, 1472876, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_45.png');
    new DataRequest(1472876, 1473666, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_50.png');
    new DataRequest(1473666, 1474678, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_64.png');
    new DataRequest(1474678, 1476474, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_46.png');
    new DataRequest(1476474, 1478284, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_12.png');
    new DataRequest(1478284, 1480133, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_06.png');
    new DataRequest(1480133, 1481402, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_22.png');
    new DataRequest(1481402, 1483249, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_17.png');
    new DataRequest(1483249, 1484576, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_43.png');
    new DataRequest(1484576, 1485266, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_51.png');
    new DataRequest(1485266, 1486071, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_38.png');
    new DataRequest(1486071, 1487246, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_10.png');
    new DataRequest(1487246, 1489626, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_29.png');
    new DataRequest(1489626, 1490915, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_31.png');
    new DataRequest(1490915, 1492270, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_08.png');
    new DataRequest(1492270, 1493988, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_34.png');
    new DataRequest(1493988, 1494846, 0, 0).open('GET', '/assets/PNG/Tiles grey/tileGrey_61.png');
    new DataRequest(1494846, 1495544, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_27.png');
    new DataRequest(1495544, 1497266, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_34.png');
    new DataRequest(1497266, 1497807, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_13.png');
    new DataRequest(1497807, 1498511, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_63.png');
    new DataRequest(1498511, 1501510, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_57.png');
    new DataRequest(1501510, 1502860, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_43.png');
    new DataRequest(1502860, 1503391, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_01.png');
    new DataRequest(1503391, 1504179, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_26.png');
    new DataRequest(1504179, 1505160, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_19.png');
    new DataRequest(1505160, 1506508, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_67.png');
    new DataRequest(1506508, 1507190, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_16.png');
    new DataRequest(1507190, 1507994, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_38.png');
    new DataRequest(1507994, 1508671, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_04.png');
    new DataRequest(1508671, 1511830, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_47.png');
    new DataRequest(1511830, 1514038, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_21.png');
    new DataRequest(1514038, 1514461, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_15.png');
    new DataRequest(1514461, 1516501, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_68.png');
    new DataRequest(1516501, 1517344, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_25.png');
    new DataRequest(1517344, 1520232, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_54.png');
    new DataRequest(1520232, 1523015, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_60.png');
    new DataRequest(1523015, 1523806, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_50.png');
    new DataRequest(1523806, 1525645, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_05.png');
    new DataRequest(1525645, 1527509, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_70.png');
    new DataRequest(1527509, 1529479, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_24.png');
    new DataRequest(1529479, 1532326, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_30.png');
    new DataRequest(1532326, 1534198, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_12.png');
    new DataRequest(1534198, 1535953, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_58.png');
    new DataRequest(1535953, 1537243, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_31.png');
    new DataRequest(1537243, 1540130, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_42.png');
    new DataRequest(1540130, 1542158, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_56.png');
    new DataRequest(1542158, 1544291, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_23.png');
    new DataRequest(1544291, 1546233, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_11.png');
    new DataRequest(1546233, 1548835, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_41.png');
    new DataRequest(1548835, 1551712, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_72.png');
    new DataRequest(1551712, 1552422, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_39.png');
    new DataRequest(1552422, 1554390, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_18.png');
    new DataRequest(1554390, 1555437, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_40.png');
    new DataRequest(1555437, 1558106, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_65.png');
    new DataRequest(1558106, 1561037, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_66.png');
    new DataRequest(1561037, 1561731, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_51.png');
    new DataRequest(1561731, 1564182, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_29.png');
    new DataRequest(1564182, 1565589, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_20.png');
    new DataRequest(1565589, 1566917, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_22.png');
    new DataRequest(1566917, 1567777, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_61.png');
    new DataRequest(1567777, 1570758, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_33.png');
    new DataRequest(1570758, 1571603, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_49.png');
    new DataRequest(1571603, 1574088, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_53.png');
    new DataRequest(1574088, 1577093, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_35.png');
    new DataRequest(1577093, 1579862, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_36.png');
    new DataRequest(1579862, 1583092, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_71.png');
    new DataRequest(1583092, 1585020, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_06.png');
    new DataRequest(1585020, 1588101, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_45.png');
    new DataRequest(1588101, 1588959, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_37.png');
    new DataRequest(1588959, 1589369, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_03.png');
    new DataRequest(1589369, 1589849, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_02.png');
    new DataRequest(1589849, 1591136, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_55.png');
    new DataRequest(1591136, 1592170, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_52.png');
    new DataRequest(1592170, 1593566, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_08.png');
    new DataRequest(1593566, 1596403, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_48.png');
    new DataRequest(1596403, 1596883, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_14.png');
    new DataRequest(1596883, 1597689, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_62.png');
    new DataRequest(1597689, 1599707, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_44.png');
    new DataRequest(1599707, 1602820, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_69.png');
    new DataRequest(1602820, 1604821, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_32.png');
    new DataRequest(1604821, 1605774, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_07.png');
    new DataRequest(1605774, 1607760, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_17.png');
    new DataRequest(1607760, 1609835, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_09.png');
    new DataRequest(1609835, 1610877, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_28.png');
    new DataRequest(1610877, 1612695, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_46.png');
    new DataRequest(1612695, 1613912, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_10.png');
    new DataRequest(1613912, 1614950, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_64.png');
    new DataRequest(1614950, 1617981, 0, 0).open('GET', '/assets/PNG/Tiles black/tileBlack_59.png');
    new DataRequest(1617981, 1620044, 0, 0).open('GET', '/assets/PNG/Particles yellow/particleYellow_4.png');
    new DataRequest(1620044, 1621918, 0, 0).open('GET', '/assets/PNG/Particles yellow/particleYellow_3.png');
    new DataRequest(1621918, 1624097, 0, 0).open('GET', '/assets/PNG/Particles yellow/particleYellow_5.png');
    new DataRequest(1624097, 1626223, 0, 0).open('GET', '/assets/PNG/Particles yellow/particleYellow_7.png');
    new DataRequest(1626223, 1628481, 0, 0).open('GET', '/assets/PNG/Particles yellow/particleYellow_1.png');
    new DataRequest(1628481, 1631366, 0, 0).open('GET', '/assets/PNG/Particles yellow/particleYellow_2.png');
    new DataRequest(1631366, 1634264, 0, 0).open('GET', '/assets/PNG/Particles yellow/particleYellow_6.png');
    new DataRequest(1634264, 1635688, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_15.png');
    new DataRequest(1635688, 1637262, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_09.png');
    new DataRequest(1637262, 1638513, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_05.png');
    new DataRequest(1638513, 1639983, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_11.png');
    new DataRequest(1639983, 1641542, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_03.png');
    new DataRequest(1641542, 1643770, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_12.png');
    new DataRequest(1643770, 1645314, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_17.png');
    new DataRequest(1645314, 1647014, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_06.png');
    new DataRequest(1647014, 1649241, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_08.png');
    new DataRequest(1649241, 1651583, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_10.png');
    new DataRequest(1651583, 1653843, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_18.png');
    new DataRequest(1653843, 1656057, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_02.png');
    new DataRequest(1656057, 1657507, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_07.png');
    new DataRequest(1657507, 1658946, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_01.png');
    new DataRequest(1658946, 1660519, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_13.png');
    new DataRequest(1660519, 1662847, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_04.png');
    new DataRequest(1662847, 1664995, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_16.png');
    new DataRequest(1664995, 1667325, 0, 0).open('GET', '/assets/PNG/Back tiles/BackTile_14.png');
    new DataRequest(1667325, 1669305, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_12.png');
    new DataRequest(1669305, 1670770, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_08.png');
    new DataRequest(1670770, 1673772, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_30.png');
    new DataRequest(1673772, 1677089, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_71.png');
    new DataRequest(1677089, 1680124, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_42.png');
    new DataRequest(1680124, 1680981, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_49.png');
    new DataRequest(1680981, 1681807, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_26.png');
    new DataRequest(1681807, 1682651, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_38.png');
    new DataRequest(1682651, 1685595, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_72.png');
    new DataRequest(1685595, 1686478, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_25.png');
    new DataRequest(1686478, 1686972, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_02.png');
    new DataRequest(1686972, 1689026, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_56.png');
    new DataRequest(1689026, 1691099, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_68.png');
    new DataRequest(1691099, 1694479, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_47.png');
    new DataRequest(1694479, 1697187, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_65.png');
    new DataRequest(1697187, 1698587, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_67.png');
    new DataRequest(1698587, 1700527, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_05.png');
    new DataRequest(1700527, 1703412, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_36.png');
    new DataRequest(1703412, 1704453, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_19.png');
    new DataRequest(1704453, 1706687, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_09.png');
    new DataRequest(1706687, 1707505, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_62.png');
    new DataRequest(1707505, 1709323, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_58.png');
    new DataRequest(1709323, 1710031, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_04.png');
    new DataRequest(1710031, 1711875, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_34.png');
    new DataRequest(1711875, 1712878, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_07.png');
    new DataRequest(1712878, 1716127, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_69.png');
    new DataRequest(1716127, 1718222, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_24.png');
    new DataRequest(1718222, 1719668, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_22.png');
    new DataRequest(1719668, 1720380, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_16.png');
    new DataRequest(1720380, 1722913, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_53.png');
    new DataRequest(1722913, 1724999, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_18.png');
    new DataRequest(1724999, 1726375, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_31.png');
    new DataRequest(1726375, 1727123, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_39.png');
    new DataRequest(1727123, 1730241, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_57.png');
    new DataRequest(1730241, 1732349, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_17.png');
    new DataRequest(1732349, 1735305, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_54.png');
    new DataRequest(1735305, 1737403, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_32.png');
    new DataRequest(1737403, 1738137, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_27.png');
    new DataRequest(1738137, 1739458, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_10.png');
    new DataRequest(1739458, 1742548, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_59.png');
    new DataRequest(1742548, 1743634, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_28.png');
    new DataRequest(1743634, 1744696, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_64.png');
    new DataRequest(1744696, 1747873, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_33.png');
    new DataRequest(1747873, 1749984, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_44.png');
    new DataRequest(1749984, 1752761, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_41.png');
    new DataRequest(1752761, 1755751, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_66.png');
    new DataRequest(1755751, 1759092, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_45.png');
    new DataRequest(1759092, 1760572, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_20.png');
    new DataRequest(1760572, 1762506, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_70.png');
    new DataRequest(1762506, 1764896, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_21.png');
    new DataRequest(1764896, 1768039, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_35.png');
    new DataRequest(1768039, 1771032, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_48.png');
    new DataRequest(1771032, 1771460, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_03.png');
    new DataRequest(1771460, 1772890, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_43.png');
    new DataRequest(1772890, 1773605, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_63.png');
    new DataRequest(1773605, 1776439, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_60.png');
    new DataRequest(1776439, 1777778, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_55.png');
    new DataRequest(1777778, 1778483, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_51.png');
    new DataRequest(1778483, 1779033, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_01.png');
    new DataRequest(1779033, 1779592, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_13.png');
    new DataRequest(1779592, 1780394, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_50.png');
    new DataRequest(1780394, 1781294, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_37.png');
    new DataRequest(1781294, 1783372, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_11.png');
    new DataRequest(1783372, 1785680, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_23.png');
    new DataRequest(1785680, 1787638, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_46.png');
    new DataRequest(1787638, 1788137, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_14.png');
    new DataRequest(1788137, 1789008, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_61.png');
    new DataRequest(1789008, 1791073, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_06.png');
    new DataRequest(1791073, 1792163, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_40.png');
    new DataRequest(1792163, 1794744, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_29.png');
    new DataRequest(1794744, 1795799, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_52.png');
    new DataRequest(1795799, 1796241, 0, 0).open('GET', '/assets/PNG/Tiles green/tileGreen_15.png');
    new DataRequest(1796241, 1798461, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_09.png');
    new DataRequest(1798461, 1798961, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_14.png');
    new DataRequest(1798961, 1800049, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_28.png');
    new DataRequest(1800049, 1802160, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_24.png');
    new DataRequest(1802160, 1803609, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_22.png');
    new DataRequest(1803609, 1804454, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_38.png');
    new DataRequest(1804454, 1806541, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_32.png');
    new DataRequest(1806541, 1809052, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_53.png');
    new DataRequest(1809052, 1810524, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_20.png');
    new DataRequest(1810524, 1811857, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_55.png');
    new DataRequest(1811857, 1812590, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_27.png');
    new DataRequest(1812590, 1814636, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_68.png');
    new DataRequest(1814636, 1815535, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_37.png');
    new DataRequest(1815535, 1818222, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_65.png');
    new DataRequest(1818222, 1821121, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_36.png');
    new DataRequest(1821121, 1821548, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_03.png');
    new DataRequest(1821548, 1822096, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_01.png');
    new DataRequest(1822096, 1823892, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_58.png');
    new DataRequest(1823892, 1825969, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_11.png');
    new DataRequest(1825969, 1828085, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_17.png');
    new DataRequest(1828085, 1828910, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_26.png');
    new DataRequest(1828910, 1831881, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_66.png');
    new DataRequest(1831881, 1832971, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_40.png');
    new DataRequest(1832971, 1834025, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_64.png');
    new DataRequest(1834025, 1836320, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_23.png');
    new DataRequest(1836320, 1838244, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_05.png');
    new DataRequest(1838244, 1838804, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_13.png');
    new DataRequest(1838804, 1839605, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_50.png');
    new DataRequest(1839605, 1842777, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_33.png');
    new DataRequest(1842777, 1845825, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_42.png');
    new DataRequest(1845825, 1848771, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_72.png');
    new DataRequest(1848771, 1850880, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_18.png');
    new DataRequest(1850880, 1852189, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_10.png');
    new DataRequest(1852189, 1854103, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_70.png');
    new DataRequest(1854103, 1856945, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_60.png');
    new DataRequest(1856945, 1857660, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_16.png');
    new DataRequest(1857660, 1859088, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_43.png');
    new DataRequest(1859088, 1861120, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_56.png');
    new DataRequest(1861120, 1863895, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_41.png');
    new DataRequest(1863895, 1864643, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_39.png');
    new DataRequest(1864643, 1866018, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_31.png');
    new DataRequest(1866018, 1866899, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_25.png');
    new DataRequest(1866899, 1869985, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_59.png');
    new DataRequest(1869985, 1871022, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_19.png');
    new DataRequest(1871022, 1874237, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_69.png');
    new DataRequest(1874237, 1877329, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_57.png');
    new DataRequest(1877329, 1880721, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_47.png');
    new DataRequest(1880721, 1883121, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_21.png');
    new DataRequest(1883121, 1885694, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_29.png');
    new DataRequest(1885694, 1889001, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_71.png');
    new DataRequest(1889001, 1890454, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_08.png');
    new DataRequest(1890454, 1893390, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_54.png');
    new DataRequest(1893390, 1896393, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_30.png');
    new DataRequest(1896393, 1897111, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_63.png');
    new DataRequest(1897111, 1899078, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_46.png');
    new DataRequest(1899078, 1899952, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_61.png');
    new DataRequest(1899952, 1901002, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_52.png');
    new DataRequest(1901002, 1904349, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_45.png');
    new DataRequest(1904349, 1906448, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_44.png');
    new DataRequest(1906448, 1907269, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_62.png');
    new DataRequest(1907269, 1909324, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_06.png');
    new DataRequest(1909324, 1910714, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_67.png');
    new DataRequest(1910714, 1912559, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_34.png');
    new DataRequest(1912559, 1913052, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_02.png');
    new DataRequest(1913052, 1914054, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_07.png');
    new DataRequest(1914054, 1916044, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_12.png');
    new DataRequest(1916044, 1919197, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_35.png');
    new DataRequest(1919197, 1919899, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_51.png');
    new DataRequest(1919899, 1922901, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_48.png');
    new DataRequest(1922901, 1923344, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_15.png');
    new DataRequest(1923344, 1924199, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_49.png');
    new DataRequest(1924199, 1924908, 0, 0).open('GET', '/assets/PNG/Tiles blue/tileBlue_04.png');
    new DataRequest(1924908, 1927846, 0, 0).open('GET', '/assets/PNG/Coins/coin_30.png');
    new DataRequest(1927846, 1931299, 0, 0).open('GET', '/assets/PNG/Coins/coin_19.png');
    new DataRequest(1931299, 1933660, 0, 0).open('GET', '/assets/PNG/Coins/coin_34.png');
    new DataRequest(1933660, 1936148, 0, 0).open('GET', '/assets/PNG/Coins/coin_15.png');
    new DataRequest(1936148, 1939040, 0, 0).open('GET', '/assets/PNG/Coins/coin_26.png');
    new DataRequest(1939040, 1941506, 0, 0).open('GET', '/assets/PNG/Coins/coin_35.png');
    new DataRequest(1941506, 1943493, 0, 0).open('GET', '/assets/PNG/Coins/coin_03.png');
    new DataRequest(1943493, 1945508, 0, 0).open('GET', '/assets/PNG/Coins/coin_01.png');
    new DataRequest(1945508, 1947353, 0, 0).open('GET', '/assets/PNG/Coins/coin_21.png');
    new DataRequest(1947353, 1949772, 0, 0).open('GET', '/assets/PNG/Coins/coin_32.png');
    new DataRequest(1949772, 1952959, 0, 0).open('GET', '/assets/PNG/Coins/coin_10.png');
    new DataRequest(1952959, 1956024, 0, 0).open('GET', '/assets/PNG/Coins/coin_06.png');
    new DataRequest(1956024, 1959395, 0, 0).open('GET', '/assets/PNG/Coins/coin_36.png');
    new DataRequest(1959395, 1961830, 0, 0).open('GET', '/assets/PNG/Coins/coin_12.png');
    new DataRequest(1961830, 1965238, 0, 0).open('GET', '/assets/PNG/Coins/coin_37.png');
    new DataRequest(1965238, 1968311, 0, 0).open('GET', '/assets/PNG/Coins/coin_07.png');
    new DataRequest(1968311, 1971724, 0, 0).open('GET', '/assets/PNG/Coins/coin_17.png');
    new DataRequest(1971724, 1975253, 0, 0).open('GET', '/assets/PNG/Coins/coin_20.png');
    new DataRequest(1975253, 1977372, 0, 0).open('GET', '/assets/PNG/Coins/coin_05.png');
    new DataRequest(1977372, 1980753, 0, 0).open('GET', '/assets/PNG/Coins/coin_16.png');
    new DataRequest(1980753, 1983721, 0, 0).open('GET', '/assets/PNG/Coins/coin_29.png');
    new DataRequest(1983721, 1987232, 0, 0).open('GET', '/assets/PNG/Coins/coin_40.png');
    new DataRequest(1987232, 1990223, 0, 0).open('GET', '/assets/PNG/Coins/coin_08.png');
    new DataRequest(1990223, 1992289, 0, 0).open('GET', '/assets/PNG/Coins/coin_02.png');
    new DataRequest(1992289, 1995129, 0, 0).open('GET', '/assets/PNG/Coins/coin_27.png');
    new DataRequest(1995129, 1997453, 0, 0).open('GET', '/assets/PNG/Coins/coin_13.png');
    new DataRequest(1997453, 2000762, 0, 0).open('GET', '/assets/PNG/Coins/coin_18.png');
    new DataRequest(2000762, 2003076, 0, 0).open('GET', '/assets/PNG/Coins/coin_33.png');
    new DataRequest(2003076, 2005445, 0, 0).open('GET', '/assets/PNG/Coins/coin_14.png');
    new DataRequest(2005445, 2007327, 0, 0).open('GET', '/assets/PNG/Coins/coin_25.png');
    new DataRequest(2007327, 2009161, 0, 0).open('GET', '/assets/PNG/Coins/coin_22.png');
    new DataRequest(2009161, 2012464, 0, 0).open('GET', '/assets/PNG/Coins/coin_38.png');
    new DataRequest(2012464, 2014493, 0, 0).open('GET', '/assets/PNG/Coins/coin_04.png');
    new DataRequest(2014493, 2016830, 0, 0).open('GET', '/assets/PNG/Coins/coin_31.png');
    new DataRequest(2016830, 2019959, 0, 0).open('GET', '/assets/PNG/Coins/coin_09.png');
    new DataRequest(2019959, 2021834, 0, 0).open('GET', '/assets/PNG/Coins/coin_24.png');
    new DataRequest(2021834, 2024172, 0, 0).open('GET', '/assets/PNG/Coins/coin_11.png');
    new DataRequest(2024172, 2025990, 0, 0).open('GET', '/assets/PNG/Coins/coin_23.png');
    new DataRequest(2025990, 2028808, 0, 0).open('GET', '/assets/PNG/Coins/coin_28.png');
    new DataRequest(2028808, 2032252, 0, 0).open('GET', '/assets/PNG/Coins/coin_39.png');
    new DataRequest(2032252, 2032957, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_50.png');
    new DataRequest(2032957, 2034864, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_04.png');
    new DataRequest(2034864, 2036185, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_09.png');
    new DataRequest(2036185, 2039163, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_41.png');
    new DataRequest(2039163, 2041217, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_10.png');
    new DataRequest(2041217, 2043742, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_28.png');
    new DataRequest(2043742, 2044737, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_06.png');
    new DataRequest(2044737, 2045237, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_13.png');
    new DataRequest(2045237, 2046120, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_36.png');
    new DataRequest(2046120, 2049075, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_65.png');
    new DataRequest(2049075, 2050150, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_39.png');
    new DataRequest(2050150, 2053455, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_46.png');
    new DataRequest(2053455, 2054284, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_37.png');
    new DataRequest(2054284, 2056486, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_08.png');
    new DataRequest(2056486, 2059207, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_40.png');
    new DataRequest(2059207, 2060083, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_60.png');
    new DataRequest(2060083, 2061435, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_30.png');
    new DataRequest(2061435, 2063494, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_31.png');
    new DataRequest(2063494, 2064053, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_12.png');
    new DataRequest(2064053, 2064761, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_03.png');
    new DataRequest(2064761, 2067702, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_47.png');
    new DataRequest(2067702, 2070524, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_59.png');
    new DataRequest(2070524, 2073595, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_58.png');
    new DataRequest(2073595, 2074418, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_61.png');
    new DataRequest(2074418, 2076446, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_55.png');
    new DataRequest(2076446, 2077166, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_62.png');
    new DataRequest(2077166, 2078965, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_57.png');
    new DataRequest(2078965, 2081048, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_16.png');
    new DataRequest(2081048, 2082101, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_51.png');
    new DataRequest(2082101, 2083176, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_27.png');
    new DataRequest(2083176, 2086370, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_68.png');
    new DataRequest(2086370, 2088744, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_20.png');
    new DataRequest(2088744, 2091409, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_64.png');
    new DataRequest(2091409, 2091851, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_14.png');
    new DataRequest(2091851, 2095151, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_70.png');
    new DataRequest(2095151, 2095882, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_38.png');
    new DataRequest(2095882, 2097959, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_43.png');
    new DataRequest(2097959, 2101024, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_34.png');
    new DataRequest(2101024, 2101835, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_25.png');
    new DataRequest(2101835, 2105115, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_44.png');
    new DataRequest(2105115, 2107193, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_17.png');
    new DataRequest(2107193, 2107686, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_01.png');
    new DataRequest(2107686, 2108489, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_49.png');
    new DataRequest(2108489, 2109037, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_72.png');
    new DataRequest(2109037, 2109903, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_24.png');
    new DataRequest(2109903, 2110760, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_48.png');
    new DataRequest(2110760, 2112670, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_69.png');
    new DataRequest(2112670, 2114708, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_67.png');
    new DataRequest(2114708, 2117522, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_35.png');
    new DataRequest(2117522, 2118996, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_19.png');
    new DataRequest(2118996, 2121491, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_52.png');
    new DataRequest(2121491, 2124583, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_32.png');
    new DataRequest(2124583, 2125969, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_66.png');
    new DataRequest(2125969, 2127376, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_42.png');
    new DataRequest(2127376, 2128409, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_18.png');
    new DataRequest(2128409, 2129862, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_07.png');
    new DataRequest(2129862, 2132789, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_71.png');
    new DataRequest(2132789, 2134119, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_54.png');
    new DataRequest(2134119, 2134546, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_02.png');
    new DataRequest(2134546, 2137463, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_53.png');
    new DataRequest(2137463, 2139559, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_23.png');
    new DataRequest(2139559, 2141373, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_33.png');
    new DataRequest(2141373, 2143349, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_11.png');
    new DataRequest(2143349, 2146420, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_56.png');
    new DataRequest(2146420, 2147864, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_21.png');
    new DataRequest(2147864, 2150158, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_22.png');
    new DataRequest(2150158, 2152192, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_05.png');
    new DataRequest(2152192, 2155130, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_29.png');
    new DataRequest(2155130, 2156187, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_63.png');
    new DataRequest(2156187, 2156896, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_15.png');
    new DataRequest(2156896, 2158835, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_45.png');
    new DataRequest(2158835, 2159552, 0, 0).open('GET', '/assets/PNG/Tiles orange/tileOrange_26.png');
    new DataRequest(2159552, 2161570, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_17.png');
    new DataRequest(2161570, 2163483, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_46.png');
    new DataRequest(2163483, 2163903, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_03.png');
    new DataRequest(2163903, 2165248, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_67.png');
    new DataRequest(2165248, 2167310, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_11.png');
    new DataRequest(2167310, 2170286, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_42.png');
    new DataRequest(2170286, 2171687, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_43.png');
    new DataRequest(2171687, 2172388, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_16.png');
    new DataRequest(2172388, 2174904, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_29.png');
    new DataRequest(2174904, 2177763, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_66.png');
    new DataRequest(2177763, 2179738, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_56.png');
    new DataRequest(2179738, 2181117, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_22.png');
    new DataRequest(2181117, 2183374, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_23.png');
    new DataRequest(2183374, 2184168, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_50.png');
    new DataRequest(2184168, 2185439, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_10.png');
    new DataRequest(2185439, 2187316, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_05.png');
    new DataRequest(2187316, 2190301, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_57.png');
    new DataRequest(2190301, 2190998, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_51.png');
    new DataRequest(2190998, 2192079, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_40.png');
    new DataRequest(2192079, 2193120, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_64.png');
    new DataRequest(2193120, 2195185, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_44.png');
    new DataRequest(2195185, 2195993, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_62.png');
    new DataRequest(2195993, 2199116, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_33.png');
    new DataRequest(2199116, 2201176, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_32.png');
    new DataRequest(2201176, 2203472, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_21.png');
    new DataRequest(2203472, 2206347, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_72.png');
    new DataRequest(2206347, 2207175, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_26.png');
    new DataRequest(2207175, 2208210, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_52.png');
    new DataRequest(2208210, 2211268, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_59.png');
    new DataRequest(2211268, 2214122, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_54.png');
    new DataRequest(2214122, 2215098, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_07.png');
    new DataRequest(2215098, 2216399, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_55.png');
    new DataRequest(2216399, 2219612, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_71.png');
    new DataRequest(2219612, 2221597, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_12.png');
    new DataRequest(2221597, 2222139, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_01.png');
    new DataRequest(2222139, 2224155, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_18.png');
    new DataRequest(2224155, 2224889, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_27.png');
    new DataRequest(2224889, 2227427, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_65.png');
    new DataRequest(2227427, 2229237, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_34.png');
    new DataRequest(2229237, 2232571, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_47.png');
    new DataRequest(2232571, 2233058, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_02.png');
    new DataRequest(2233058, 2233922, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_61.png');
    new DataRequest(2233922, 2235347, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_20.png');
    new DataRequest(2235347, 2236766, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_08.png');
    new DataRequest(2236766, 2237764, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_19.png');
    new DataRequest(2237764, 2240806, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_69.png');
    new DataRequest(2240806, 2241555, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_39.png');
    new DataRequest(2241555, 2244799, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_45.png');
    new DataRequest(2244799, 2247215, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_53.png');
    new DataRequest(2247215, 2248928, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_58.png');
    new DataRequest(2248928, 2250993, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_24.png');
    new DataRequest(2250993, 2253662, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_41.png');
    new DataRequest(2253662, 2254507, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_38.png');
    new DataRequest(2254507, 2255390, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_25.png');
    new DataRequest(2255390, 2258348, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_30.png');
    new DataRequest(2258348, 2261325, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_48.png');
    new DataRequest(2261325, 2262683, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_31.png');
    new DataRequest(2262683, 2263171, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_14.png');
    new DataRequest(2263171, 2264980, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_70.png');
    new DataRequest(2264980, 2265828, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_49.png');
    new DataRequest(2265828, 2267816, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_06.png');
    new DataRequest(2267816, 2268514, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_04.png');
    new DataRequest(2268514, 2269225, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_63.png');
    new DataRequest(2269225, 2272138, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_36.png');
    new DataRequest(2272138, 2273216, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_28.png');
    new DataRequest(2273216, 2273647, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_15.png');
    new DataRequest(2273647, 2276797, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_35.png');
    new DataRequest(2276797, 2278773, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_68.png');
    new DataRequest(2278773, 2280929, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_09.png');
    new DataRequest(2280929, 2283758, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_60.png');
    new DataRequest(2283758, 2284305, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_13.png');
    new DataRequest(2284305, 2285205, 0, 0).open('GET', '/assets/PNG/Tiles pink/tilePink_37.png');
    new DataRequest(2285205, 2287141, 0, 0).open('GET', '/assets/PNG/Particles blue/particleBlue_3.png');
    new DataRequest(2287141, 2289325, 0, 0).open('GET', '/assets/PNG/Particles blue/particleBlue_7.png');
    new DataRequest(2289325, 2291630, 0, 0).open('GET', '/assets/PNG/Particles blue/particleBlue_1.png');
    new DataRequest(2291630, 2293997, 0, 0).open('GET', '/assets/PNG/Particles blue/particleBlue_5.png');
    new DataRequest(2293997, 2296933, 0, 0).open('GET', '/assets/PNG/Particles blue/particleBlue_2.png');
    new DataRequest(2296933, 2299025, 0, 0).open('GET', '/assets/PNG/Particles blue/particleBlue_4.png');
    new DataRequest(2299025, 2302009, 0, 0).open('GET', '/assets/PNG/Particles blue/particleBlue_6.png');
    new DataRequest(2302009, 2304012, 0, 0).open('GET', '/assets/PNG/Particles white/particleWhite_7.png');
    new DataRequest(2304012, 2306807, 0, 0).open('GET', '/assets/PNG/Particles white/particleWhite_6.png');
    new DataRequest(2306807, 2308683, 0, 0).open('GET', '/assets/PNG/Particles white/particleWhite_3.png');
    new DataRequest(2308683, 2311514, 0, 0).open('GET', '/assets/PNG/Particles white/particleWhite_2.png');
    new DataRequest(2311514, 2313405, 0, 0).open('GET', '/assets/PNG/Particles white/particleWhite_5.png');
    new DataRequest(2313405, 2315417, 0, 0).open('GET', '/assets/PNG/Particles white/particleWhite_4.png');
    new DataRequest(2315417, 2317570, 0, 0).open('GET', '/assets/PNG/Particles white/particleWhite_1.png');

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
      var ptr = Module['_malloc'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/assets/paddle_12.png"].onload();
          DataRequest.prototype.requests["/assets/paddle_08.png"].onload();
          DataRequest.prototype.requests["/assets/paddle.png"].onload();
          DataRequest.prototype.requests["/assets/Ubuntu-Light.ttf"].onload();
          DataRequest.prototype.requests["/assets/atlas.png"].onload();
          DataRequest.prototype.requests["/assets/ball.png"].onload();
          DataRequest.prototype.requests["/assets/Ubuntu-Medium.ttf"].onload();
          DataRequest.prototype.requests["/assets/making/atlas.xcf"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_57.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_32.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_60.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_69.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_25.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_19.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_52.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_54.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_34.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_68.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_66.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_64.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_13.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_30.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_67.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_22.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_37.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_62.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_72.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_23.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_49.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_15.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_11.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_43.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_26.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_42.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_51.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_48.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_17.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_58.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_18.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_33.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_41.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_38.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_59.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_71.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_12.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_56.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_21.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_35.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_47.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_61.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_63.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_44.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_70.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_14.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_65.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_27.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_53.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_36.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_46.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_24.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_45.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_55.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_39.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_16.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_20.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_29.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_40.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_28.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_31.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles red/tileRed_50.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_13.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_42.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_39.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_16.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_70.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_47.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_48.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_46.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_15.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_33.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_56.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_60.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_35.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_23.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_19.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_69.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_37.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_34.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_71.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_18.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_31.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_43.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_54.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_36.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_66.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_29.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_51.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_62.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_17.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_65.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_24.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_32.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_41.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_58.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_14.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_68.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_27.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_52.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_12.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_61.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_40.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_49.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_59.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_38.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_64.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_50.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_11.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_26.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_44.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_57.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_30.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_25.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_20.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_53.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_21.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_22.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_67.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_72.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_55.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_28.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_45.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_63.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles yellow/tileYellow_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Black/ballBlack_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Black/ballBlack_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Black/ballBlack_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Black/ballBlack_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Black/ballBlack_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Black/ballBlack_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Black/ballBlack_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Black/ballBlack_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Black/ballBlack_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Black/ballBlack_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Grey/ballGrey_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Grey/ballGrey_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Grey/ballGrey_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Grey/ballGrey_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Grey/ballGrey_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Grey/ballGrey_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Grey/ballGrey_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Grey/ballGrey_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Grey/ballGrey_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Grey/ballGrey_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Blue/ballBlue_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Blue/ballBlue_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Blue/ballBlue_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Blue/ballBlue_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Blue/ballBlue_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Blue/ballBlue_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Blue/ballBlue_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Blue/ballBlue_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Blue/ballBlue_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Blue/ballBlue_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Yellow/ballYellow_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Yellow/ballYellow_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Yellow/ballYellow_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Yellow/ballYellow_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Yellow/ballYellow_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Yellow/ballYellow_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Yellow/ballYellow_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Yellow/ballYellow_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Yellow/ballYellow_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Balls/Yellow/ballYellow_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_24.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_34.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_28.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_40.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_26.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_32.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_17.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_43.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_29.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_35.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_16.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_30.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_39.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_25.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_15.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_37.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_21.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_44.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_11.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_27.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_13.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_22.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_38.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_14.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_19.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_31.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_33.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_36.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_18.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_23.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_20.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_42.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_12.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Green/pipeGreen_41.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_35.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_42.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_33.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_38.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_22.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_24.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_37.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_14.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_12.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_15.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_26.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_40.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_13.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_11.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_21.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_18.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_39.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_16.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_29.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_25.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_30.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_36.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_34.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_43.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_20.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_44.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_28.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_27.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_32.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_31.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_19.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_23.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_17.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Pipes/Grey/pipeGrey_41.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Paddles/paddle_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Paddles/paddle_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Paddles/paddle_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Paddles/paddle_12.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Paddles/paddle_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Paddles/paddle_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Paddles/paddle_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Paddles/paddle_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Paddles/paddle_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Paddles/paddle_11.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Paddles/paddle_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Paddles/paddle_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_52.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_16.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_11.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_42.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_28.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_26.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_41.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_20.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_37.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_70.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_24.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_65.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_44.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_72.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_53.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_18.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_19.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_56.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_66.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_67.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_60.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_49.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_30.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_15.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_54.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_23.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_71.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_48.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_35.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_39.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_36.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_63.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_69.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_40.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_32.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_21.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_47.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_58.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_27.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_55.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_25.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_13.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_33.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_59.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_57.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_68.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_62.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_14.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_45.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_50.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_64.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_46.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_12.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_22.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_17.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_43.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_51.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_38.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_29.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_31.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_34.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles grey/tileGrey_61.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_27.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_34.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_13.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_63.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_57.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_43.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_26.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_19.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_67.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_16.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_38.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_47.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_21.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_15.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_68.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_25.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_54.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_60.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_50.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_70.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_24.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_30.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_12.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_58.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_31.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_42.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_56.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_23.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_11.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_41.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_72.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_39.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_18.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_40.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_65.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_66.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_51.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_29.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_20.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_22.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_61.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_33.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_49.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_53.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_35.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_36.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_71.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_45.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_37.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_55.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_52.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_48.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_14.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_62.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_44.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_69.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_32.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_17.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_28.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_46.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_64.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles black/tileBlack_59.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles yellow/particleYellow_4.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles yellow/particleYellow_3.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles yellow/particleYellow_5.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles yellow/particleYellow_7.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles yellow/particleYellow_1.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles yellow/particleYellow_2.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles yellow/particleYellow_6.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_15.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_11.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_12.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_17.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_18.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_13.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_16.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Back tiles/BackTile_14.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_12.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_30.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_71.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_42.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_49.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_26.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_38.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_72.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_25.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_56.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_68.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_47.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_65.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_67.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_36.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_19.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_62.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_58.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_34.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_69.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_24.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_22.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_16.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_53.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_18.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_31.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_39.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_57.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_17.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_54.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_32.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_27.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_59.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_28.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_64.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_33.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_44.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_41.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_66.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_45.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_20.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_70.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_21.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_35.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_48.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_43.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_63.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_60.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_55.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_51.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_13.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_50.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_37.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_11.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_23.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_46.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_14.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_61.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_40.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_29.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_52.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles green/tileGreen_15.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_14.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_28.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_24.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_22.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_38.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_32.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_53.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_20.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_55.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_27.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_68.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_37.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_65.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_36.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_58.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_11.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_17.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_26.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_66.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_40.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_64.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_23.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_13.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_50.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_33.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_42.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_72.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_18.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_70.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_60.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_16.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_43.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_56.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_41.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_39.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_31.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_25.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_59.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_19.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_69.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_57.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_47.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_21.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_29.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_71.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_54.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_30.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_63.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_46.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_61.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_52.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_45.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_44.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_62.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_67.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_34.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_12.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_35.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_51.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_48.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_15.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_49.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles blue/tileBlue_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_30.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_19.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_34.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_15.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_26.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_35.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_21.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_32.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_36.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_12.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_37.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_17.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_20.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_16.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_29.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_40.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_27.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_13.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_18.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_33.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_14.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_25.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_22.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_38.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_31.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_24.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_11.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_23.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_28.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Coins/coin_39.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_50.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_41.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_28.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_13.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_36.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_65.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_39.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_46.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_37.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_40.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_60.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_30.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_31.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_12.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_47.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_59.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_58.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_61.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_55.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_62.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_57.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_16.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_51.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_27.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_68.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_20.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_64.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_14.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_70.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_38.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_43.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_34.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_25.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_44.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_17.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_49.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_72.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_24.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_48.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_69.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_67.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_35.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_19.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_52.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_32.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_66.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_42.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_18.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_71.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_54.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_53.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_23.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_33.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_11.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_56.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_21.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_22.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_29.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_63.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_15.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_45.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles orange/tileOrange_26.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_17.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_46.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_03.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_67.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_11.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_42.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_43.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_16.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_29.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_66.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_56.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_22.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_23.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_50.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_10.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_05.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_57.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_51.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_40.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_64.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_44.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_62.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_33.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_32.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_21.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_72.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_26.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_52.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_59.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_54.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_07.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_55.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_71.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_12.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_01.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_18.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_27.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_65.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_34.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_47.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_02.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_61.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_20.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_08.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_19.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_69.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_39.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_45.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_53.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_58.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_24.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_41.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_38.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_25.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_30.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_48.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_31.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_14.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_70.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_49.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_06.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_04.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_63.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_36.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_28.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_15.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_35.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_68.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_09.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_60.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_13.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Tiles pink/tilePink_37.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles blue/particleBlue_3.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles blue/particleBlue_7.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles blue/particleBlue_1.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles blue/particleBlue_5.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles blue/particleBlue_2.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles blue/particleBlue_4.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles blue/particleBlue_6.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles white/particleWhite_7.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles white/particleWhite_6.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles white/particleWhite_3.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles white/particleWhite_2.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles white/particleWhite_5.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles white/particleWhite_4.png"].onload();
          DataRequest.prototype.requests["/assets/PNG/Particles white/particleWhite_1.png"].onload();
          Module['removeRunDependency']('datafile_build/textytest.data');

    };
    Module['addRunDependency']('datafile_build/textytest.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  asmConsts: [],
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) return 0; }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;








//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;


var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}



// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===

Runtime.asmConsts = [];





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 10192;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([84,101,120,116,121,32,116,101,115,116,0,0,0,0,0,0,79,112,101,110,71,76,32,118,101,114,115,105,111,110,32,105,115,32,40,37,115,41,10,0,115,114,99,47,116,101,120,116,116,101,115,116,47,46,46,47,111,116,104,101,114,47,115,116,98,95,105,109,97,103,101,95,119,114,105,116,101,46,104,0,119,98,0,0,0,0,0,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,13,0,15,0,17,0,19,0,23,0,27,0,31,0,35,0,43,0,51,0,59,0,67,0,83,0,99,0,115,0,131,0,163,0,195,0,227,0,2,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0,1,0,2,0,3,0,4,0,5,0,7,0,9,0,13,0,17,0,25,0,33,0,49,0,65,0,97,0,129,0,193,0,1,1,129,1,1,2,1,3,1,4,1,6,1,8,1,12,1,16,1,24,1,32,1,48,1,64,1,96,0,128,0,0,0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0,100,32,60,61,32,51,50,55,54,55,32,38,38,32,98,101,115,116,32,60,61,32,50,53,56,0,0,0,0,0,0,0,115,116,98,105,95,122,108,105,98,95,99,111,109,112,114,101,115,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,2,0,0,0,6,0,0,0,0,0,0,0,137,80,78,71,13,10,26,10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,73,72,68,82,0,0,0,0,73,68,65,84,0,0,0,0,73,69,78,68,0,0,0,0,111,32,61,61,32,111,117,116,32,43,32,42,111,117,116,95,108,101,110,0,0,0,0,0,115,116,98,105,95,119,114,105,116,101,95,112,110,103,95,116,111,95,109,101,109,0,0,0,70,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,118,101,114,116,101,120,32,115,104,97,100,101,114,10,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,102,114,97,103,109,101,110,116,32,115,104,97,100,101,114,10,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,108,105,110,107,32,115,104,97,100,101,114,32,112,114,111,103,114,97,109,10,0,0,112,111,115,105,116,105,111,110,0,0,0,0,0,0,0,0,117,118,0,0,0,0,0,0,115,99,97,108,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,109,97,112,0,0,0,0,108,111,99,97,0,0,0,0,104,101,97,100,0,0,0,0,103,108,121,102,0,0,0,0,104,104,101,97,0,0,0,0,104,109,116,120,0,0,0,0,107,101,114,110,0,0,0,0,109,97,120,112,0,0,0,0,48,0,0,0,0,0,0,0,115,114,99,47,116,101,120,116,116,101,115,116,47,46,46,47,112,117,117,110,47,103,102,47,46,46,47,46,46,47,111,116,104,101,114,47,115,116,98,95,116,114,117,101,116,121,112,101,46,104,0,0,0,0,0,0,115,116,98,116,116,95,70,105,110,100,71,108,121,112,104,73,110,100,101,120,0,0,0,0,117,110,105,99,111,100,101,95,99,111,100,101,112,111,105,110,116,32,60,61,32,116,116,85,83,72,79,82,84,40,100,97,116,97,32,43,32,101,110,100,67,111,117,110,116,32,43,32,50,42,105,116,101,109,41,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,115,116,98,116,116,95,71,101,116,71,108,121,112,104,83,104,97,112,101,0,0,0,0,0,120,43,103,119,32,60,32,112,119,0,0,0,0,0,0,0,115,116,98,116,116,95,66,97,107,101,70,111,110,116,66,105,116,109,97,112,0,0,0,0,121,43,103,104,32,60,32,112,104,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,112,111,115,105,116,105,111,110,59,32,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,117,118,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,118,97,114,121,105,110,103,32,118,101,99,50,32,116,101,120,99,111,111,114,100,59,32,118,111,105,100,32,109,97,105,110,40,41,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,103,108,95,80,111,115,105,116,105,111,110,61,118,101,99,52,40,112,111,115,105,116,105,111,110,47,50,53,54,46,44,32,48,44,32,49,41,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,101,120,99,111,111,114,100,61,117,118,59,125,0,0,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,32,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,59,32,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,118,97,114,121,105,110,103,32,118,101,99,50,32,116,101,120,99,111,111,114,100,59,32,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,108,111,97,116,32,99,32,61,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,44,32,116,101,120,99,111,111,114,100,41,46,97,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,32,61,32,49,46,32,45,99,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,118,101,99,52,40,99,44,32,99,44,32,99,44,32,49,46,45,99,41,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,112,111,115,105,116,105,111,110,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,117,118,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,115,99,97,108,101,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,118,97,114,121,105,110,103,32,118,101,99,50,32,116,101,120,99,111,111,114,100,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,118,101,99,52,40,112,111,115,105,116,105,111,110,44,32,49,46,48,41,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,101,120,99,111,111,114,100,32,61,32,117,118,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,0,0,0,0,0,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,32,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,59,32,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,118,97,114,121,105,110,103,32,118,101,99,50,32,116,101,120,99,111,111,114,100,59,32,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,108,111,97,116,32,99,32,61,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,44,32,116,101,120,99,111,111,114,100,41,46,97,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,32,61,32,49,46,32,45,99,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,118,101,99,52,40,99,44,32,99,44,32,99,44,32,48,41,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,0,97,115,115,101,116,115,47,85,98,117,110,116,117,45,76,105,103,104,116,46,116,116,102,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,69,76,76,79,32,87,79,82,76,68,32,32,32,32,32,32,106,117,109,112,32,108,105,110,101,0,0,0,0,0,0,102,105,116,58,32,37,100,10,0,0,0,0,0,0,0,0,112,114,117,101,98,97,0,0,37,102,32,37,100,32,37,100,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,45,62,118,97,108,105,100,0,0,0,0,0,0,0,0,115,116,98,116,116,95,95,114,97,115,116,101,114,105,122,101,95,115,111,114,116,101,100,95,101,100,103,101,115,0,0,0,101,45,62,121,48,32,60,61,32,115,116,97,114,116,95,112,111,105,110,116,0,0,0,0,110,101,119,95,97,99,116,105,118,101,0,0,0,0,0,0,101,114,114,111,114,58,10,32,37,115,10,0,0,0,0,0,112,0,0,0,0,0,0,0,115,116,98,105,119,95,95,115,98,103,114,111,119,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  
  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        var numChannels;
        switch(format) {
          case 0x1906 /* GL_ALPHA */:
          case 0x1909 /* GL_LUMINANCE */:
          case 0x1902 /* GL_DEPTH_COMPONENT */:
          case 0x1903 /* GL_RED */:
            numChannels = 1;
            break;
          case 0x190A /* GL_LUMINANCE_ALPHA */:
          case 0x8227 /* GL_RG */:
            numChannels = 2;
            break;
          case 0x1907 /* GL_RGB */:
            numChannels = 3;
            break;
          case 0x1908 /* GL_RGBA */:
            numChannels = 4;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            sizePerPixel = numChannels*1;
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
          case 0x8D61 /* GL_HALF_FLOAT_OES */:
            sizePerPixel = numChannels*2;
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
          case 0x1406 /* GL_FLOAT */:
            sizePerPixel = numChannels*4;
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        };
      },validateBufferTarget:function (target) {
        switch (target) {
          case 0x8892: // GL_ARRAY_BUFFER
          case 0x8893: // GL_ELEMENT_ARRAY_BUFFER
          case 0x8F36: // GL_COPY_READ_BUFFER
          case 0x8F37: // GL_COPY_WRITE_BUFFER
          case 0x88EB: // GL_PIXEL_PACK_BUFFER
          case 0x88EC: // GL_PIXEL_UNPACK_BUFFER
          case 0x8C2A: // GL_TEXTURE_BUFFER
          case 0x8C8E: // GL_TRANSFORM_FEEDBACK_BUFFER
          case 0x8A11: // GL_UNIFORM_BUFFER
            return true;
          default:
            return false;
        }
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
  
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        context.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc');
        context.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic');
        context.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        context.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        context.vaoExt = GLctx.getExtension('OES_vertex_array_object');
  
        if (context.version === 2) {
          // drawBuffers is available in WebGL2 by default.
          context.drawBuffersExt = function(n, bufs) {
            GLctx.drawBuffers(n, bufs);
          };
        } else {
          var ext = GLctx.getExtension('WEBGL_draw_buffers');
          if (ext) {
            context.drawBuffersExt = function(n, bufs) {
              ext.drawBuffersWEBGL(n, bufs);
            };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }var GLEW={isLinaroFork:1,extensions:null,error:{0:null,1:null,2:null,3:null,4:null,5:null,6:null,7:null,8:null},version:{1:null,2:null,3:null,4:null},errorStringConstantFromCode:function (error) {
        if (GLEW.isLinaroFork) {
          switch (error) {
            case 4:return "OpenGL ES lib expected, found OpenGL lib"; // GLEW_ERROR_NOT_GLES_VERSION
            case 5:return "OpenGL lib expected, found OpenGL ES lib"; // GLEW_ERROR_GLES_VERSION
            case 6:return "Missing EGL version"; // GLEW_ERROR_NO_EGL_VERSION
            case 7:return "EGL 1.1 and up are supported"; // GLEW_ERROR_EGL_VERSION_10_ONLY
            default:break;
          }
        }
  
        switch (error) {
          case 0:return "No error"; // GLEW_OK || GLEW_NO_ERROR
          case 1:return "Missing GL version"; // GLEW_ERROR_NO_GL_VERSION
          case 2:return "GL 1.1 and up are supported"; // GLEW_ERROR_GL_VERSION_10_ONLY
          case 3:return "GLX 1.2 and up are supported"; // GLEW_ERROR_GLX_VERSION_11_ONLY
          default:return null;
        }
      },errorString:function (error) {
        if (!GLEW.error[error]) {
          var string = GLEW.errorStringConstantFromCode(error);
          if (!string) {
            string = "Unknown error";
            error = 8; // prevent array from growing more than this
          }
          GLEW.error[error] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.error[error];
      },versionStringConstantFromCode:function (name) {
        switch (name) {
          case 1:return "1.10.0"; // GLEW_VERSION
          case 2:return "1"; // GLEW_VERSION_MAJOR
          case 3:return "10"; // GLEW_VERSION_MINOR
          case 4:return "0"; // GLEW_VERSION_MICRO
          default:return null;
        }
      },versionString:function (name) {
        if (!GLEW.version[name]) {
          var string = GLEW.versionStringConstantFromCode(name);
          if (!string)
            return 0;
          GLEW.version[name] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.version[name];
      },extensionIsSupported:function (name) {
        if (!GLEW.extensions) {
          GLEW.extensions = Pointer_stringify(_glGetString(0x1F03)).split(' ');
        }
  
        if (GLEW.extensions.indexOf(name) != -1)
          return 1;
  
        // extensions from GLEmulations do not come unprefixed
        // so, try with prefix
        return (GLEW.extensions.indexOf("GL_" + name) != -1);
      }};function _glewInit() { return 0; }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

   
  Module["_memset"] = _memset;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _glGetProgramiv(program, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        HEAP32[((p)>>2)]=GLctx.getProgramInfoLog(GL.programs[program]).length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      // Work around a bug in Chromium which causes getShaderInfoLog to return null
      if (!log) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _abort() {
      Module['abort']();
    }

  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 7) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};
  
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function _free() {
  }
  Module["_free"] = _free;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  
  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  
  function _SDL_RWFromConstMem(mem, size) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      SDL.rwops.push({ bytes: mem, count: size });
      return id;
    }function _TTF_FontHeight(font) {
      var fontData = SDL.fonts[font];
      return fontData.size;
    }function _TTF_SizeText(font, text, w, h) {
      var fontData = SDL.fonts[font];
      if (w) {
        HEAP32[((w)>>2)]=SDL.estimateTextWidth(fontData, Pointer_stringify(text));
      }
      if (h) {
        HEAP32[((h)>>2)]=fontData.size;
      }
      return 0;
    }function _TTF_RenderText_Solid(font, text, color) {
      // XXX the font and color are ignored
      text = Pointer_stringify(text) || ' '; // if given an empty string, still return a valid surface
      var fontData = SDL.fonts[font];
      var w = SDL.estimateTextWidth(fontData, text);
      var h = fontData.size;
      var color = SDL.loadColorToCSSRGB(color); // XXX alpha breaks fonts?
      var fontString = h + 'px ' + fontData.name;
      var surf = SDL.makeSurface(w, h, 0, false, 'text:' + text); // bogus numbers..
      var surfData = SDL.surfaces[surf];
      surfData.ctx.save();
      surfData.ctx.fillStyle = color;
      surfData.ctx.font = fontString;
      surfData.ctx.textBaseline = 'top';
      surfData.ctx.fillText(text, 0, 0);
      surfData.ctx.restore();
      return surf;
    }function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (audio) {
        audio.src = audio.src; // rewind <media> element
        audio.currentPosition = 0; // rewind Web Audio graph playback.
        audio.pause();
      }
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Runtime.dynCall('v', SDL.hookMusicFinished);
      }
      return 0;
    }function _Mix_PlayMusic(id, loops) {
      // Pause old music if it exists.
      if (SDL.music.audio) {
        if (!SDL.music.audio.paused) Module.printErr('Music is already playing. ' + SDL.music.source);
        SDL.music.audio.pause();
      }
      var info = SDL.audios[id];
      var audio;
      if (info.webAudio) { // Play via Web Audio API
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new webAudio object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else if (info.audio) { // Play via the <audio> element
        audio = info.audio;
      }
      audio['onended'] = function() { if (SDL.music.audio == this) _Mix_HaltMusic(); } // will send callback
      audio.loop = loops != 0; // TODO: handle N loops for finite N
      audio.volume = SDL.music.volume;
      SDL.music.audio = audio;
      audio.play();
      return 0;
    }function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }function _Mix_LoadWAV_RW(rwopsID, freesrc) {
      var rwops = SDL.rwops[rwopsID];
  
      if (rwops === undefined)
        return 0;
  
      var filename = '';
      var audio;
      var webAudio;
      var bytes;
  
      if (rwops.filename !== undefined) {
        filename = PATH.resolve(rwops.filename);
        var raw = Module["preloadedAudios"][filename];
        if (!raw) {
          if (raw === null) Module.printErr('Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!');
          if (!Module.noAudioDecoding) Runtime.warnOnce('Cannot find preloaded audio ' + filename);
  
          // see if we can read the file-contents from the in-memory FS
          try {
            bytes = FS.readFile(filename);
          } catch (e) {
            Module.printErr('Couldn\'t find file for: ' + filename);
            return 0;
          }
        }
        if (Module['freePreloadedMediaOnUse']) {
          Module["preloadedAudios"][filename] = null;
        }
        audio = raw;
      }
      else if (rwops.bytes !== undefined) {
        // For Web Audio context buffer decoding, we must make a clone of the audio data, but for <media> element,
        // a view to existing data is sufficient.
        if (SDL.webAudioAvailable()) bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
        else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
      }
      else {
        return 0;
      }
  
      var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  
      // To allow user code to work around browser bugs with audio playback on <audio> elements an Web Audio, enable
      // the user code to hook in a callback to decide on a file basis whether each file should use Web Audio or <audio> for decoding and playback.
      // In particular, see https://bugzilla.mozilla.org/show_bug.cgi?id=654787 and ?id=1012801 for tradeoffs.
      var canPlayWithWebAudio = Module['SDL_canPlayWithWebAudio'] === undefined || Module['SDL_canPlayWithWebAudio'](filename, arrayBuffer);
  
      if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
        audio = undefined;
        webAudio = {};
        // The audio decoding process is asynchronous, which gives trouble if user code plays the audio data back immediately
        // after loading. Therefore prepare an array of callback handlers to run when this audio decoding is complete, which
        // will then start the playback (with some delay).
        webAudio.onDecodeComplete = []; // While this member array exists, decoding hasn't finished yet.
        function onDecodeComplete(data) {
          webAudio.decodedBuffer = data;
          // Call all handlers that were waiting for this decode to finish, and clear the handler list.
          webAudio.onDecodeComplete.forEach(function(e) { e(); });
          webAudio.onDecodeComplete = undefined; // Don't allow more callback handlers since audio has finished decoding.
        }
  
        SDL.audioContext['decodeAudioData'](arrayBuffer, onDecodeComplete);
      } else if (audio === undefined && bytes) {
        // Here, we didn't find a preloaded audio but we either were passed a filepath for
        // which we loaded bytes, or we were passed some bytes
        var blob = new Blob([bytes], {type: rwops.mimetype});
        var url = URL.createObjectURL(blob);
        audio = new Audio();
        audio.src = url;
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
      }
  
      var id = SDL.audios.length;
      // Keep the loaded audio in the audio arrays, ready for playback
      SDL.audios.push({
        source: filename,
        audio: audio, // Points to the <audio> element, if loaded
        webAudio: webAudio // Points to a Web Audio -specific resource object, if loaded
      });
      return id;
    }function _Mix_PlayChannel(channel, id, loops) {
      // TODO: handle fixed amount of N loops. Currently loops either 0 or infinite times.
  
      // Get the audio element associated with the ID
      var info = SDL.audios[id];
      if (!info) return -1;
      if (!info.audio && !info.webAudio) return -1;
  
      // If the user asks us to allocate a channel automatically, get the first
      // free one.
      if (channel == -1) {
        for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
          if (!SDL.channels[i].audio) {
            channel = i;
            break;
          }
        }
        if (channel == -1) {
          Module.printErr('All ' + SDL.numChannels + ' channels in use!');
          return -1;
        }
      }
      var channelInfo = SDL.channels[channel];
      var audio;
      if (info.webAudio) {
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        // Make our instance look similar to the instance of a <media> to make api simple.
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else {
        // We clone the audio node to utilize the preloaded audio buffer, since
        // the browser has already preloaded the audio file.
        audio = info.audio.cloneNode(true);
        audio.numChannels = info.audio.numChannels;
        audio.frequency = info.audio.frequency;
      }
      audio['onended'] = function SDL_audio_onended() { // TODO: cache these
        if (channelInfo.audio == this) { channelInfo.audio.paused = true; channelInfo.audio = null; }
        if (SDL.channelFinished) Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
      }
      channelInfo.audio = audio;
      // TODO: handle N loops. Behavior matches Mix_PlayMusic
      audio.loop = loops != 0;
      audio.volume = channelInfo.volume;
      audio.play();
      return channel;
    }function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
      } else if (!SDL.audio.timer) {
        // Start the audio playback timer callback loop.
        SDL.audio.numAudioTimersPending = 1;
        SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
      }
      SDL.audio.paused = pauseOn;
    }function _SDL_CloseAudio() {
      if (SDL.audio) {
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      if (SDL.defaults.discardOnLock) {
        if (!surfData.image) {
          surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height);
        }
        if (!SDL.defaults.opaqueFrontBuffer) return;
      } else {
        surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      }
  
      // Emulate desktop behavior and kill alpha values on the locked surface. (very costly!) Set SDL.defaults.opaqueFrontBuffer = false
      // if you don't want this.
      if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))>>0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
          HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }
  
  function _SDL_FreeRW(rwopsID) {
      SDL.rwops[rwopsID] = null;
      while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length-1] === null) {
        SDL.rwops.pop();
      }
    }function _IMG_Load_RW(rwopsID, freeSrc) {
      try {
        // stb_image integration support
        function cleanup() {
          if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
        };
        function addCleanup(func) {
          var old = cleanup;
          cleanup = function added_cleanup() {
            old();
            func();
          }
        }
        function callStbImage(func, params) {
          var x = Module['_malloc'](4);
          var y = Module['_malloc'](4);
          var comp = Module['_malloc'](4);
          addCleanup(function() {
            Module['_free'](x);
            Module['_free'](y);
            Module['_free'](comp);
            if (data) Module['_stbi_image_free'](data);
          });
          var data = Module['_' + func].apply(null, params.concat([x, y, comp, 0]));
          if (!data) return null;
          return {
            rawData: true,
            data: data,
            width: HEAP32[((x)>>2)],
            height: HEAP32[((y)>>2)],
            size: HEAP32[((x)>>2)] * HEAP32[((y)>>2)] * HEAP32[((comp)>>2)],
            bpp: HEAP32[((comp)>>2)]
          };
        }
  
        var rwops = SDL.rwops[rwopsID];
        if (rwops === undefined) {
          return 0;
        }
  
        var filename = rwops.filename;
        if (filename === undefined) {
          Runtime.warnOnce('Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
          return 0;
        }
  
        if (!raw) {
          filename = PATH.resolve(filename);
          var raw = Module["preloadedImages"][filename];
          if (!raw) {
            if (raw === null) Module.printErr('Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!');
            Runtime.warnOnce('Cannot find preloaded image ' + filename);
            Runtime.warnOnce('Cannot find preloaded image ' + filename + '. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
            return 0;
          } else if (Module['freePreloadedMediaOnUse']) {
            Module["preloadedImages"][filename] = null;
          }
        }
  
        var surf = SDL.makeSurface(raw.width, raw.height, 0, false, 'load:' + filename);
        var surfData = SDL.surfaces[surf];
        surfData.ctx.globalCompositeOperation = "copy";
        if (!raw.rawData) {
          surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
        } else {
          var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          if (raw.bpp == 4) {
            // rgba
            imageData.data.set(HEAPU8.subarray((raw.data),(raw.data+raw.size)));
          } else if (raw.bpp == 3) {
            // rgb
            var pixels = raw.size/3;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = 255;
            }
          } else if (raw.bpp == 1) {
            // grayscale
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var value = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = 255;
            }
          } else {
            Module.printErr('cannot handle bpp ' + raw.bpp);
            return 0;
          }
          surfData.ctx.putImageData(imageData, 0, 0);
        }
        surfData.ctx.globalCompositeOperation = "source-over";
        // XXX SDL does not specify that loaded images must have available pixel data, in fact
        //     there are cases where you just want to blit them, so you just need the hardware
        //     accelerated version. However, code everywhere seems to assume that the pixels
        //     are in fact available, so we retrieve it here. This does add overhead though.
        _SDL_LockSurface(surf);
        surfData.locked--; // The surface is not actually locked in this hack
        if (SDL.GL) {
          // After getting the pixel data, we can free the canvas and context if we do not need to do 2D canvas blitting
          surfData.canvas = surfData.ctx = null;
        }
        return surf;
      } finally {
        cleanup();
      }
    }
  
  function _SDL_RWFromFile(_name, mode) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      var name = Pointer_stringify(_name)
      SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
      return id;
    }function _IMG_Load(filename){
      var rwops = _SDL_RWFromFile(filename);
      var result = _IMG_Load_RW(rwops, 1);
      return result;
    }function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, true);
    }function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, false);
    }function _SDL_GetTicks() {
      return (Date.now() - SDL.startTime)|0;
    }var SDL={defaults:{width:320,height:200,copyOnLock:true,discardOnLock:false,opaqueFrontBuffer:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,eventHandler:null,eventHandlerContext:null,eventHandlerTemp:0,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39,224:1251},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },updateRect:function (rect, r) {
        HEAP32[((rect)>>2)]=r.x;
        HEAP32[(((rect)+(4))>>2)]=r.y;
        HEAP32[(((rect)+(8))>>2)]=r.w;
        HEAP32[(((rect)+(12))>>2)]=r.h;
      },intersectionOfRects:function (first, second) {
        var leftX = Math.max(first.x, second.x);
        var leftY = Math.max(first.y, second.y);
        var rightX = Math.min(first.x + first.w, second.x + second.w);
        var rightY = Math.min(first.y + first.h, second.y + second.h);
  
        return {
          x: leftX,
          y: leftY,
          w: Math.max(leftX, rightX) - leftX,
          h: Math.max(leftY, rightY) - leftY
        }
      },checkPixelFormat:function (fmt) {
        // Canvas screens are always RGBA.
        var format = HEAP32[((fmt)>>2)];
        if (format != -2042224636) {
          Runtime.warnOnce('Unsupported pixel format!');
        }
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
  
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(40))>>2)]=0;
        HEAP32[(((surf)+(44))>>2)]=Module["canvas"].width;
        HEAP32[(((surf)+(48))>>2)]=Module["canvas"].height;
  
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=-2042224636;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))>>0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))>>0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
  
        if (!surfData.image.data32) {
          surfData.image.data32 = new Uint32Array(surfData.image.data.buffer);
        }
        var data32   = surfData.image.data32;
  
        var colors32 = surfData.colors32;
  
        for (var y = startY; y < endY; ++y) {
          var base = y * fullWidth;
          for (var x = startX; x < endX; ++x) {
            data32[base + x] = colors32[HEAPU8[((buffer + base + x)>>0)]];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },blitSurface__deps:["SDL_LockSurface"],blitSurface:function (src, srcrect, dst, dstrect, scale) {
        var srcData = SDL.surfaces[src];
        var dstData = SDL.surfaces[dst];
        var sr, dr;
        if (srcrect) {
          sr = SDL.loadRect(srcrect);
        } else {
          sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstrect) {
          dr = SDL.loadRect(dstrect);
        } else {
          dr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstData.clipRect) {
          var widthScale = (!scale || sr.w === 0) ? 1 : sr.w / dr.w;
          var heightScale = (!scale || sr.h === 0) ? 1 : sr.h / dr.h;
          
          dr = SDL.intersectionOfRects(dstData.clipRect, dr);
          
          sr.w = dr.w * widthScale;
          sr.h = dr.h * heightScale;
          
          if (dstrect) {
            SDL.updateRect(dstrect, dr);
          }
        }
        var blitw, blith;
        if (scale) {
          blitw = dr.w; blith = dr.h;
        } else {
          blitw = sr.w; blith = sr.h;
        }
        if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
          return 0;
        }
        var oldAlpha = dstData.ctx.globalAlpha;
        dstData.ctx.globalAlpha = srcData.alpha/255;
        dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
        dstData.ctx.globalAlpha = oldAlpha;
        if (dst != SDL.screen) {
          // XXX As in IMG_Load, for compatibility we write out |pixels|
          Runtime.warnOnce('WARNING: copying canvas data to memory for compatibility');
          _SDL_LockSurface(dst);
          dstData.locked--; // The surface is not actually locked in this hack
        }
        return 0;
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        function unpressAllPressedKeys() {
          // Un-press all pressed keys: TODO
          for (var code in SDL.keyboardMap) {
            SDL.events.push({
              type: 'keyup',
              keyCode: SDL.keyboardMap[code]
            });
          }
        };
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
            
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
            
            var firstTouch = touches[0];
            if (event.type == 'touchstart') {
              SDL.DOMButtons[0] = 1;
            }
            var mouseEventType;
            switch(event.type) {
              case 'touchstart': mouseEventType = 'mousedown'; break;
              case 'touchmove': mouseEventType = 'mousemove'; break;
            }
            var mouseEvent = {
              type: mouseEventType,
              button: 0,
              pageX: firstTouch.clientX,
              pageY: firstTouch.clientY
            };
            SDL.events.push(mouseEvent);
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
            
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
            
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'DOMMouseScroll': case 'mousewheel': case 'wheel':
            var delta = -Browser.getMouseWheelDelta(event); // Flip the wheel direction to translate from browser wheel direction (+:down) to SDL direction (+:up)
            delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
            // Simulate old-style SDL events representing mouse wheel input as buttons
            var button = delta > 0 ? 3 /*SDL_BUTTON_WHEELUP-1*/ : 4 /*SDL_BUTTON_WHEELDOWN-1*/; // Subtract one since JS->C marshalling is defined to add one back.
            SDL.events.push({ type: 'mousedown', button: button, pageX: event.pageX, pageY: event.pageY });
            SDL.events.push({ type: 'mouseup', button: button, pageX: event.pageX, pageY: event.pageY });
  
            // Pass a delta motion event.
            SDL.events.push({ type: 'wheel', deltaX: 0, deltaY: delta });
            event.preventDefault(); // If we don't prevent this, then 'wheel' event will be sent again by the browser as 'DOMMouseScroll' and we will receive this same event the second time.
            break;
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullScreen'](true, true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'focus':
            SDL.events.push(event);
            event.preventDefault();
            break;
          case 'blur':
            SDL.events.push(event);
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'visibilitychange':
            SDL.events.push({
              type: 'visibilitychange',
              visible: !document.hidden
            });
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        // If we have a handler installed, this will push the events to the app
        // instead of the app polling for them.
        SDL.flushEventsToHandler();
        return;
      },lookupKeyCodeForEvent:function (event) {
          var code = event.keyCode;
          if (code >= 65 && code <= 90) {
            code += 32; // make lowercase for SDL
          } else {
            code = SDL.keyCodes[event.keyCode] || event.keyCode;
            // If this is one of the modifier keys (224 | 1<<10 - 227 | 1<<10), and the event specifies that it is
            // a right key, add 4 to get the right key SDL key code.
            if (event.location === KeyboardEvent.DOM_KEY_LOCATION_RIGHT && code >= (224 | 1<<10) && code <= (227 | 1<<10)) {
              code += 4;
            }
          }
          return code;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = SDL.lookupKeyCodeForEvent(event);
            HEAP8[(((SDL.keyboardState)+(code))>>0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))>>0)] ? 0x0040 : 0) | // KMOD_LCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))>>0)] ? 0x0001 : 0) | // KMOD_LSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))>>0)] ? 0x0100 : 0) | // KMOD_LALT
              (HEAP8[(((SDL.keyboardState)+(1252))>>0)] ? 0x0080 : 0) | // KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1253))>>0)] ? 0x0002 : 0) | // KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1254))>>0)] ? 0x0200 : 0); //  KMOD_RALT
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },flushEventsToHandler:function () {
        if (!SDL.eventHandler) return;
  
        while (SDL.pollEvent(SDL.eventHandlerTemp)) {
          Runtime.dynCall('iii', SDL.eventHandler, [SDL.eventHandlerContext, SDL.eventHandlerTemp]);
        }
      },pollEvent:function (ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (ptr) {
          while (SDL.events.length > 0) {
            if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
          }
          return 0;
        } else {
          // XXX: somewhat risky in that we do not check if the event is real or not (makeCEvent returns false) if no pointer supplied
          return SDL.events.length > 0;
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a copy of a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28);
          _free(event); // the copy is no longer needed
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = SDL.lookupKeyCodeForEvent(event);
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))>>0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))>>0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))>>0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))>>0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))>>0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'wheel': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(16))>>2)]=event.deltaX;
            HEAP32[(((ptr)+(20))>>2)]=event.deltaY; 
            break;       
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            if (!Browser.touches[touch.identifier]) break;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return false; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.button;
            HEAP8[(((ptr)+(6))>>0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          case 'focus': {
            var SDL_WINDOWEVENT_FOCUS_GAINED = 12 /* SDL_WINDOWEVENT_FOCUS_GAINED */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_GAINED;
            break;
          }
          case 'blur': {
            var SDL_WINDOWEVENT_FOCUS_LOST = 13 /* SDL_WINDOWEVENT_FOCUS_LOST */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_LOST;
            break;
          }
          case 'visibilitychange': {
            var SDL_WINDOWEVENT_SHOWN  = 1 /* SDL_WINDOWEVENT_SHOWN */;
            var SDL_WINDOWEVENT_HIDDEN = 2 /* SDL_WINDOWEVENT_HIDDEN */;
            var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=visibilityEventID;
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = h + 'px ' + fontData.name;
        var tempCtx = SDL.ttfContext;
        assert(tempCtx, 'TTF_Init must have been called');
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = Math.min(Math.max(volume, 0), 128) / 128;
          if (info.audio) {
            try {
              info.audio.volume = info.volume; // For <audio> element
              if (info.audio.webAudioGainNode) info.audio.webAudioGainNode['gain']['value'] = info.volume; // For WebAudio playback
            } catch(e) {
              Module.printErr('setGetVolume failed to set audio volume: ' + e);
            }
          }
        }
        return ret;
      },setPannerPosition:function (info, x, y, z) {
        if (!info) return;
        if (info.audio) {
          if (info.audio.webAudioPannerNode) {
            info.audio.webAudioPannerNode['setPosition'](x, y, z);
          }
        }
      },playWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) return; // This instance is already playing, don't start again.
        if (!SDL.webAudioAvailable()) return;
        try {
          var webAudio = audio.resource.webAudio;
          audio.paused = false;
          if (!webAudio.decodedBuffer) {
            if (webAudio.onDecodeComplete === undefined) abort("Cannot play back audio object that was not loaded");
            webAudio.onDecodeComplete.push(function() { if (!audio.paused) SDL.playWebAudio(audio); });
            return;
          }
          audio.webAudioNode = SDL.audioContext['createBufferSource']();
          audio.webAudioNode['buffer'] = webAudio.decodedBuffer;
          audio.webAudioNode['loop'] = audio.loop;
          audio.webAudioNode['onended'] = function() { audio['onended'](); } // For <media> element compatibility, route the onended signal to the instance.
  
          audio.webAudioPannerNode = SDL.audioContext['createPanner']();
          audio.webAudioPannerNode['panningModel'] = 'equalpower';
  
          // Add an intermediate gain node to control volume.
          audio.webAudioGainNode = SDL.audioContext['createGain']();
          audio.webAudioGainNode['gain']['value'] = audio.volume;
  
          audio.webAudioNode['connect'](audio.webAudioPannerNode);
          audio.webAudioPannerNode['connect'](audio.webAudioGainNode);
          audio.webAudioGainNode['connect'](SDL.audioContext['destination']);
  
          audio.webAudioNode['start'](0, audio.currentPosition);
          audio.startTime = SDL.audioContext['currentTime'] - audio.currentPosition;
        } catch(e) {
          Module.printErr('playWebAudio failed: ' + e);
        }
      },pauseWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) {
          try {
            // Remember where we left off, so that if/when we resume, we can restart the playback at a proper place.
            audio.currentPosition = (SDL.audioContext['currentTime'] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
            // Important: When we reach here, the audio playback is stopped by the user. But when calling .stop() below, the Web Audio
            // graph will send the onended signal, but we don't want to process that, since pausing should not clear/destroy the audio
            // channel.
            audio.webAudioNode['onended'] = undefined;
            audio.webAudioNode.stop();
            audio.webAudioNode = undefined;
          } catch(e) {
            Module.printErr('pauseWebAudio failed: ' + e);
          }
        }
        audio.paused = true;
      },openAudioContext:function () {
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        if (!SDL.audioContext) {
          if (typeof(AudioContext) !== 'undefined') SDL.audioContext = new AudioContext();
          else if (typeof(webkitAudioContext) !== 'undefined') SDL.audioContext = new webkitAudioContext();
        }
      },webAudioAvailable:function () { return !!SDL.audioContext; },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))>>0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button.pressed;
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _SDL_SetVideoMode(width, height, depth, flags) {
      ['touchstart', 'touchend', 'touchmove', 'mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'wheel', 'mouseout'].forEach(function(event) {
        Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
      });
  
      var canvas = Module['canvas'];
  
      // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
      if (width == 0 && height == 0) {
        width = canvas.width;
        height = canvas.height;
      }
  
      if (!SDL.addedResizeListener) {
        SDL.addedResizeListener = true;
        Browser.resizeListeners.push(function(w, h) {
          if (!SDL.settingVideoMode) {
            SDL.receiveEvent({
              type: 'resize',
              w: w,
              h: h
            });
          }
        });
      }
  
      if (width !== canvas.width || height !== canvas.height) {
        SDL.settingVideoMode = true; // SetVideoMode itself should not trigger resize events
        Browser.setCanvasSize(width, height);
        SDL.settingVideoMode = false;
      }
  
      // Free the old surface first if there is one
      if (SDL.screen) {
        SDL.freeSurface(SDL.screen);
        assert(!SDL.screen);
      }
  
      if (SDL.GL) flags = flags | 0x04000000; // SDL_OPENGL - if we are using GL, then later calls to SetVideoMode may not mention GL, but we do need it. Once in GL mode, we never leave it.
  
      SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
  
      return SDL.screen;
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }


  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }


  function _glEnable(x0) { GLctx.enable(x0) }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      // Work around a bug in Chromium which causes getProgramInfoLog to return null: https://code.google.com/p/chromium/issues/detail?id=111337
      // Note that this makes glGetProgramInfoLog behavior to be inconsistent. If an error occurs, GL functions should not write anything
      // to the output parameters, however with this workaround in place, we will always write an empty string out to 'infoLog', even if an
      // error did occur.
      if (!log) log = "";
  
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _SDL_PollEvent(ptr) {
      return SDL.pollEvent(ptr);
    }

  var _floor=Math_floor;


  function _glClear(x0) { GLctx.clear(x0) }

  var _sqrt=Math_sqrt;

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  var _abs=Math_abs;


  function _glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }


  var _cos=Math_cos;

  var _ceil=Math_ceil;

  function _SDL_WM_SetCaption(title, icon) {
      if (title && typeof Module['setWindowTitle'] !== 'undefined') {
        Module['setWindowTitle'](Pointer_stringify(title));
      }
      icon = icon && Pointer_stringify(icon);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _SDL_GL_SwapBuffers() {
      if (Browser.doSwapBuffers) Browser.doSwapBuffers(); // in workers, this is used to send out a buffered frame
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function _SDL_Init(initFlags) {
      SDL.startTime = Date.now();
      SDL.initFlags = initFlags;
  
      // capture all key events. we just keep down and up, but also capture press to prevent default actions
      if (!Module['doNotCaptureKeyboard']) {
        var keyboardListeningElement = Module['keyboardListeningElement'] || document;
        keyboardListeningElement.addEventListener("keydown", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keyup", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keypress", SDL.receiveEvent);
        window.addEventListener("focus", SDL.receiveEvent);
        window.addEventListener("blur", SDL.receiveEvent);
        document.addEventListener("visibilitychange", SDL.receiveEvent);
      }
  
      if (initFlags & 0x200) {
        // SDL_INIT_JOYSTICK
        // Firefox will not give us Joystick data unless we register this NOP
        // callback.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
        addEventListener("gamepadconnected", function() {});
      }
  
      window.addEventListener("unload", SDL.receiveEvent);
      SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
      _memset(SDL.keyboardState, 0, 0x10000);
      // Initialize this structure carefully for closure
      SDL.DOMEventToSDLEvent['keydown']    = 0x300  /* SDL_KEYDOWN */;
      SDL.DOMEventToSDLEvent['keyup']      = 0x301  /* SDL_KEYUP */;
      SDL.DOMEventToSDLEvent['keypress']   = 0x303  /* SDL_TEXTINPUT */;
      SDL.DOMEventToSDLEvent['mousedown']  = 0x401  /* SDL_MOUSEBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['mouseup']    = 0x402  /* SDL_MOUSEBUTTONUP */;
      SDL.DOMEventToSDLEvent['mousemove']  = 0x400  /* SDL_MOUSEMOTION */;
      SDL.DOMEventToSDLEvent['wheel']      = 0x403  /* SDL_MOUSEWHEEL */; 
      SDL.DOMEventToSDLEvent['touchstart'] = 0x700  /* SDL_FINGERDOWN */;
      SDL.DOMEventToSDLEvent['touchend']   = 0x701  /* SDL_FINGERUP */;
      SDL.DOMEventToSDLEvent['touchmove']  = 0x702  /* SDL_FINGERMOTION */;
      SDL.DOMEventToSDLEvent['unload']     = 0x100  /* SDL_QUIT */;
      SDL.DOMEventToSDLEvent['resize']     = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
      SDL.DOMEventToSDLEvent['visibilitychange'] = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['focus']      = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['blur']       = 0x200 /* SDL_WINDOWEVENT */;
  
      // These are not technically DOM events; the HTML gamepad API is poll-based.
      // However, we define them here, as the rest of the SDL code assumes that
      // all SDL events originate as DOM events.
      SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
      SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
      return 0; // success
    }

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function ___errno_location() {
      return ___errno_state;
    }

  var _sin=Math_sin;

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _glGenerateMipmap(x0) { GLctx.generateMipmap(x0) }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _glGetShaderiv(shader, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        // Work around a bug in Chromium which causes getShaderInfoLog to return null: https://code.google.com/p/chromium/issues/detail?id=111337
        if (!log) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

var GLctx; GL.init()
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_viiii": nullFunc_viiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "invoke_viiii": invoke_viiii, "invoke_iii": invoke_iii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "_glUseProgram": _glUseProgram, "_fread": _fread, "_SDL_PauseAudio": _SDL_PauseAudio, "_abs": _abs, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "_glBindBuffer": _glBindBuffer, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_glGetAttribLocation": _glGetAttribLocation, "_Mix_PlayChannel": _Mix_PlayChannel, "_TTF_RenderText_Solid": _TTF_RenderText_Solid, "_sysconf": _sysconf, "_close": _close, "_Mix_PlayMusic": _Mix_PlayMusic, "_cos": _cos, "_Mix_FreeChunk": _Mix_FreeChunk, "_write": _write, "_fsync": _fsync, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "_Mix_HaltMusic": _Mix_HaltMusic, "_SDL_RWFromFile": _SDL_RWFromFile, "_glGenerateMipmap": _glGenerateMipmap, "_glVertexAttribPointer": _glVertexAttribPointer, "_send": _send, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_SDL_GetTicks": _SDL_GetTicks, "_glDeleteShader": _glDeleteShader, "_SDL_LockSurface": _SDL_LockSurface, "___setErrNo": ___setErrNo, "_glBufferData": _glBufferData, "___buildEnvironment": ___buildEnvironment, "_glEnable": _glEnable, "_printf": _printf, "_glGenTextures": _glGenTextures, "_glGetString": _glGetString, "_glewInit": _glewInit, "_glAttachShader": _glAttachShader, "_glCreateProgram": _glCreateProgram, "_mkport": _mkport, "_read": _read, "_SDL_SetVideoMode": _SDL_SetVideoMode, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_SDL_UpperBlitScaled": _SDL_UpperBlitScaled, "_putenv": _putenv, "_IMG_Load": _IMG_Load, "_TTF_FontHeight": _TTF_FontHeight, "_floor": _floor, "_pwrite": _pwrite, "_glBindTexture": _glBindTexture, "_open": _open, "_glClearColor": _glClearColor, "_SDL_Init": _SDL_Init, "_glDrawArrays": _glDrawArrays, "_glCreateShader": _glCreateShader, "_getenv": _getenv, "_fclose": _fclose, "_recv": _recv, "_glCompileShader": _glCompileShader, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_abort": _abort, "_ceil": _ceil, "_glTexImage2D": _glTexImage2D, "_fopen": _fopen, "_sin": _sin, "_glGetProgramiv": _glGetProgramiv, "_SDL_CloseAudio": _SDL_CloseAudio, "_fflush": _fflush, "_SDL_FreeRW": _SDL_FreeRW, "__reallyNegative": __reallyNegative, "_SDL_PollEvent": _SDL_PollEvent, "_glClear": _glClear, "_fileno": _fileno, "_Mix_LoadWAV_RW": _Mix_LoadWAV_RW, "_SDL_WM_SetCaption": _SDL_WM_SetCaption, "_IMG_Load_RW": _IMG_Load_RW, "_glGetShaderiv": _glGetShaderiv, "_pread": _pread, "_TTF_SizeText": _TTF_SizeText, "_glLinkProgram": _glLinkProgram, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_sqrt": _sqrt, "_SDL_GL_SwapBuffers": _SDL_GL_SwapBuffers, "_glTexParameteri": _glTexParameteri, "__formatString": __formatString, "_SDL_UpperBlit": _SDL_UpperBlit, "_SDL_RWFromConstMem": _SDL_RWFromConstMem, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var invoke_viiii=env.invoke_viiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var _glUseProgram=env._glUseProgram;
  var _fread=env._fread;
  var _SDL_PauseAudio=env._SDL_PauseAudio;
  var _abs=env._abs;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var _glBindBuffer=env._glBindBuffer;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _Mix_PlayChannel=env._Mix_PlayChannel;
  var _TTF_RenderText_Solid=env._TTF_RenderText_Solid;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _Mix_PlayMusic=env._Mix_PlayMusic;
  var _cos=env._cos;
  var _Mix_FreeChunk=env._Mix_FreeChunk;
  var _write=env._write;
  var _fsync=env._fsync;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var _Mix_HaltMusic=env._Mix_HaltMusic;
  var _SDL_RWFromFile=env._SDL_RWFromFile;
  var _glGenerateMipmap=env._glGenerateMipmap;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _send=env._send;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _SDL_GetTicks=env._SDL_GetTicks;
  var _glDeleteShader=env._glDeleteShader;
  var _SDL_LockSurface=env._SDL_LockSurface;
  var ___setErrNo=env.___setErrNo;
  var _glBufferData=env._glBufferData;
  var ___buildEnvironment=env.___buildEnvironment;
  var _glEnable=env._glEnable;
  var _printf=env._printf;
  var _glGenTextures=env._glGenTextures;
  var _glGetString=env._glGetString;
  var _glewInit=env._glewInit;
  var _glAttachShader=env._glAttachShader;
  var _glCreateProgram=env._glCreateProgram;
  var _mkport=env._mkport;
  var _read=env._read;
  var _SDL_SetVideoMode=env._SDL_SetVideoMode;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _SDL_UpperBlitScaled=env._SDL_UpperBlitScaled;
  var _putenv=env._putenv;
  var _IMG_Load=env._IMG_Load;
  var _TTF_FontHeight=env._TTF_FontHeight;
  var _floor=env._floor;
  var _pwrite=env._pwrite;
  var _glBindTexture=env._glBindTexture;
  var _open=env._open;
  var _glClearColor=env._glClearColor;
  var _SDL_Init=env._SDL_Init;
  var _glDrawArrays=env._glDrawArrays;
  var _glCreateShader=env._glCreateShader;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var _recv=env._recv;
  var _glCompileShader=env._glCompileShader;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _abort=env._abort;
  var _ceil=env._ceil;
  var _glTexImage2D=env._glTexImage2D;
  var _fopen=env._fopen;
  var _sin=env._sin;
  var _glGetProgramiv=env._glGetProgramiv;
  var _SDL_CloseAudio=env._SDL_CloseAudio;
  var _fflush=env._fflush;
  var _SDL_FreeRW=env._SDL_FreeRW;
  var __reallyNegative=env.__reallyNegative;
  var _SDL_PollEvent=env._SDL_PollEvent;
  var _glClear=env._glClear;
  var _fileno=env._fileno;
  var _Mix_LoadWAV_RW=env._Mix_LoadWAV_RW;
  var _SDL_WM_SetCaption=env._SDL_WM_SetCaption;
  var _IMG_Load_RW=env._IMG_Load_RW;
  var _glGetShaderiv=env._glGetShaderiv;
  var _pread=env._pread;
  var _TTF_SizeText=env._TTF_SizeText;
  var _glLinkProgram=env._glLinkProgram;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _sqrt=env._sqrt;
  var _SDL_GL_SwapBuffers=env._SDL_GL_SwapBuffers;
  var _glTexParameteri=env._glTexParameteri;
  var __formatString=env.__formatString;
  var _SDL_UpperBlit=env._SDL_UpperBlit;
  var _SDL_RWFromConstMem=env._SDL_RWFromConstMem;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _sdl_update() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $event = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $event = sp;
 dest=$event+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0)); //@line 17 "src/texttest/sdl_tt.c"
 while(1) {
  $0 = (_SDL_PollEvent(($event|0))|0); //@line 18 "src/texttest/sdl_tt.c"
  $1 = ($0|0)!=(0); //@line 18 "src/texttest/sdl_tt.c"
  if (!($1)) {
   break;
  }
  $2 = HEAP32[$event>>2]|0; //@line 19 "src/texttest/sdl_tt.c"
  $3 = ($2|0)==(256); //@line 19 "src/texttest/sdl_tt.c"
  if ($3) {
   _die(); //@line 19 "src/texttest/sdl_tt.c"
  }
  $4 = HEAP32[$event>>2]|0; //@line 20 "src/texttest/sdl_tt.c"
  $5 = ($4|0)==(1024); //@line 20 "src/texttest/sdl_tt.c"
  if ($5) {
   $6 = (($event) + 20|0); //@line 21 "src/texttest/sdl_tt.c"
   $7 = HEAP32[$6>>2]|0; //@line 21 "src/texttest/sdl_tt.c"
   $8 = (($event) + 24|0); //@line 21 "src/texttest/sdl_tt.c"
   $9 = HEAP32[$8>>2]|0; //@line 21 "src/texttest/sdl_tt.c"
   _updateMouse($7,$9); //@line 21 "src/texttest/sdl_tt.c"
  }
 }
 _update(); //@line 24 "src/texttest/sdl_tt.c"
 _render(); //@line 25 "src/texttest/sdl_tt.c"
 STACKTOP = sp;return; //@line 26 "src/texttest/sdl_tt.c"
}
function _updateMouse($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 STACKTOP = sp;return; //@line 94 "src/texttest/tt.c"
}
function _main() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = 0;
 (_SDL_Init(65535)|0); //@line 34 "src/texttest/sdl_tt.c"
 _SDL_WM_SetCaption((8|0),(0|0)); //@line 35 "src/texttest/sdl_tt.c"
 (_SDL_SetVideoMode(800,800,32,67108864)|0); //@line 36 "src/texttest/sdl_tt.c"
 (_glewInit()|0); //@line 37 "src/texttest/sdl_tt.c"
 $1 = (_glGetString(7938)|0); //@line 38 "src/texttest/sdl_tt.c"
 HEAP32[$vararg_buffer>>2] = $1; //@line 38 "src/texttest/sdl_tt.c"
 (_printf((24|0),($vararg_buffer|0))|0); //@line 38 "src/texttest/sdl_tt.c"
 _init(); //@line 39 "src/texttest/sdl_tt.c"
 _emscripten_set_main_loop((1|0),0,0); //@line 41 "src/texttest/sdl_tt.c"
 STACKTOP = sp;return 0; //@line 46 "src/texttest/sdl_tt.c"
}
function _stbi_zlib_compress($data,$data_len,$out_len,$quality) {
 $data = $data|0;
 $data_len = $data_len|0;
 $out_len = $out_len|0;
 $quality = $quality|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $best = 0, $bestloc = 0, $bitbuf = 0, $bitcount = 0, $blocklen = 0;
 var $d = 0, $d1 = 0, $e = 0, $h = 0, $hash_table = 0, $hlist = 0, $i = 0, $i2 = 0, $j = 0, $j3 = 0, $n = 0, $out = 0, $s1 = 0, $s2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 65632|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bitbuf = sp + 65608|0;
 $bitcount = sp + 65596|0;
 $out = sp + 65592|0;
 $hash_table = sp + 56|0;
 $0 = $data;
 $1 = $data_len;
 $2 = $out_len;
 $3 = $quality;
 HEAP32[$bitbuf>>2] = 0; //@line 475 "src/texttest/../other/stb_image_write.h"
 HEAP32[$bitcount>>2] = 0; //@line 476 "src/texttest/../other/stb_image_write.h"
 HEAP32[$out>>2] = 0; //@line 477 "src/texttest/../other/stb_image_write.h"
 $4 = $3; //@line 479 "src/texttest/../other/stb_image_write.h"
 $5 = ($4|0)<(5); //@line 479 "src/texttest/../other/stb_image_write.h"
 if ($5) {
  $3 = 5; //@line 479 "src/texttest/../other/stb_image_write.h"
 }
 $6 = HEAP32[$out>>2]|0; //@line 481 "src/texttest/../other/stb_image_write.h"
 $7 = ($6|0)==(0|0); //@line 481 "src/texttest/../other/stb_image_write.h"
 if ($7) {
  label = 5;
 } else {
  $8 = HEAP32[$out>>2]|0; //@line 481 "src/texttest/../other/stb_image_write.h"
  $9 = (($8) + -8|0); //@line 481 "src/texttest/../other/stb_image_write.h"
  $10 = (($9) + 4|0); //@line 481 "src/texttest/../other/stb_image_write.h"
  $11 = HEAP32[$10>>2]|0; //@line 481 "src/texttest/../other/stb_image_write.h"
  $12 = (($11) + 1)|0; //@line 481 "src/texttest/../other/stb_image_write.h"
  $13 = HEAP32[$out>>2]|0; //@line 481 "src/texttest/../other/stb_image_write.h"
  $14 = (($13) + -8|0); //@line 481 "src/texttest/../other/stb_image_write.h"
  $15 = HEAP32[$14>>2]|0; //@line 481 "src/texttest/../other/stb_image_write.h"
  $16 = ($12|0)>=($15|0); //@line 481 "src/texttest/../other/stb_image_write.h"
  if ($16) {
   label = 5;
  } else {
  }
 }
 if ((label|0) == 5) {
  (_stbiw__sbgrowf($out,1,1)|0); //@line 481 "src/texttest/../other/stb_image_write.h"
 }
 $17 = HEAP32[$out>>2]|0; //@line 481 "src/texttest/../other/stb_image_write.h"
 $18 = (($17) + -8|0); //@line 481 "src/texttest/../other/stb_image_write.h"
 $19 = (($18) + 4|0); //@line 481 "src/texttest/../other/stb_image_write.h"
 $20 = HEAP32[$19>>2]|0; //@line 481 "src/texttest/../other/stb_image_write.h"
 $21 = (($20) + 1)|0; //@line 481 "src/texttest/../other/stb_image_write.h"
 HEAP32[$19>>2] = $21; //@line 481 "src/texttest/../other/stb_image_write.h"
 $22 = HEAP32[$out>>2]|0; //@line 481 "src/texttest/../other/stb_image_write.h"
 $23 = (($22) + ($20)|0); //@line 481 "src/texttest/../other/stb_image_write.h"
 HEAP8[$23>>0] = 120; //@line 481 "src/texttest/../other/stb_image_write.h"
 $24 = HEAP32[$out>>2]|0; //@line 482 "src/texttest/../other/stb_image_write.h"
 $25 = ($24|0)==(0|0); //@line 482 "src/texttest/../other/stb_image_write.h"
 if ($25) {
  label = 9;
 } else {
  $26 = HEAP32[$out>>2]|0; //@line 482 "src/texttest/../other/stb_image_write.h"
  $27 = (($26) + -8|0); //@line 482 "src/texttest/../other/stb_image_write.h"
  $28 = (($27) + 4|0); //@line 482 "src/texttest/../other/stb_image_write.h"
  $29 = HEAP32[$28>>2]|0; //@line 482 "src/texttest/../other/stb_image_write.h"
  $30 = (($29) + 1)|0; //@line 482 "src/texttest/../other/stb_image_write.h"
  $31 = HEAP32[$out>>2]|0; //@line 482 "src/texttest/../other/stb_image_write.h"
  $32 = (($31) + -8|0); //@line 482 "src/texttest/../other/stb_image_write.h"
  $33 = HEAP32[$32>>2]|0; //@line 482 "src/texttest/../other/stb_image_write.h"
  $34 = ($30|0)>=($33|0); //@line 482 "src/texttest/../other/stb_image_write.h"
  if ($34) {
   label = 9;
  } else {
  }
 }
 if ((label|0) == 9) {
  (_stbiw__sbgrowf($out,1,1)|0); //@line 482 "src/texttest/../other/stb_image_write.h"
 }
 $35 = HEAP32[$out>>2]|0; //@line 482 "src/texttest/../other/stb_image_write.h"
 $36 = (($35) + -8|0); //@line 482 "src/texttest/../other/stb_image_write.h"
 $37 = (($36) + 4|0); //@line 482 "src/texttest/../other/stb_image_write.h"
 $38 = HEAP32[$37>>2]|0; //@line 482 "src/texttest/../other/stb_image_write.h"
 $39 = (($38) + 1)|0; //@line 482 "src/texttest/../other/stb_image_write.h"
 HEAP32[$37>>2] = $39; //@line 482 "src/texttest/../other/stb_image_write.h"
 $40 = HEAP32[$out>>2]|0; //@line 482 "src/texttest/../other/stb_image_write.h"
 $41 = (($40) + ($38)|0); //@line 482 "src/texttest/../other/stb_image_write.h"
 HEAP8[$41>>0] = 94; //@line 482 "src/texttest/../other/stb_image_write.h"
 $42 = HEAP32[$bitcount>>2]|0; //@line 483 "src/texttest/../other/stb_image_write.h"
 $43 = 1 << $42; //@line 483 "src/texttest/../other/stb_image_write.h"
 $44 = HEAP32[$bitbuf>>2]|0; //@line 483 "src/texttest/../other/stb_image_write.h"
 $45 = $44 | $43; //@line 483 "src/texttest/../other/stb_image_write.h"
 HEAP32[$bitbuf>>2] = $45; //@line 483 "src/texttest/../other/stb_image_write.h"
 $46 = HEAP32[$bitcount>>2]|0; //@line 483 "src/texttest/../other/stb_image_write.h"
 $47 = (($46) + 1)|0; //@line 483 "src/texttest/../other/stb_image_write.h"
 HEAP32[$bitcount>>2] = $47; //@line 483 "src/texttest/../other/stb_image_write.h"
 $48 = HEAP32[$out>>2]|0; //@line 483 "src/texttest/../other/stb_image_write.h"
 $49 = (_stbiw__zlib_flushf($48,$bitbuf,$bitcount)|0); //@line 483 "src/texttest/../other/stb_image_write.h"
 HEAP32[$out>>2] = $49; //@line 483 "src/texttest/../other/stb_image_write.h"
 $50 = HEAP32[$bitcount>>2]|0; //@line 484 "src/texttest/../other/stb_image_write.h"
 $51 = 1 << $50; //@line 484 "src/texttest/../other/stb_image_write.h"
 $52 = HEAP32[$bitbuf>>2]|0; //@line 484 "src/texttest/../other/stb_image_write.h"
 $53 = $52 | $51; //@line 484 "src/texttest/../other/stb_image_write.h"
 HEAP32[$bitbuf>>2] = $53; //@line 484 "src/texttest/../other/stb_image_write.h"
 $54 = HEAP32[$bitcount>>2]|0; //@line 484 "src/texttest/../other/stb_image_write.h"
 $55 = (($54) + 2)|0; //@line 484 "src/texttest/../other/stb_image_write.h"
 HEAP32[$bitcount>>2] = $55; //@line 484 "src/texttest/../other/stb_image_write.h"
 $56 = HEAP32[$out>>2]|0; //@line 484 "src/texttest/../other/stb_image_write.h"
 $57 = (_stbiw__zlib_flushf($56,$bitbuf,$bitcount)|0); //@line 484 "src/texttest/../other/stb_image_write.h"
 HEAP32[$out>>2] = $57; //@line 484 "src/texttest/../other/stb_image_write.h"
 $i = 0; //@line 486 "src/texttest/../other/stb_image_write.h"
 while(1) {
  $58 = $i; //@line 486 "src/texttest/../other/stb_image_write.h"
  $59 = ($58|0)<(16384); //@line 486 "src/texttest/../other/stb_image_write.h"
  if (!($59)) {
   break;
  }
  $60 = $i; //@line 487 "src/texttest/../other/stb_image_write.h"
  $61 = (($hash_table) + ($60<<2)|0); //@line 487 "src/texttest/../other/stb_image_write.h"
  HEAP32[$61>>2] = 0; //@line 487 "src/texttest/../other/stb_image_write.h"
  $62 = $i; //@line 486 "src/texttest/../other/stb_image_write.h"
  $63 = (($62) + 1)|0; //@line 486 "src/texttest/../other/stb_image_write.h"
  $i = $63; //@line 486 "src/texttest/../other/stb_image_write.h"
 }
 $i = 0; //@line 489 "src/texttest/../other/stb_image_write.h"
 while(1) {
  $64 = $i; //@line 490 "src/texttest/../other/stb_image_write.h"
  $65 = $1; //@line 490 "src/texttest/../other/stb_image_write.h"
  $66 = (($65) - 3)|0; //@line 490 "src/texttest/../other/stb_image_write.h"
  $67 = ($64|0)<($66|0); //@line 490 "src/texttest/../other/stb_image_write.h"
  if (!($67)) {
   label = 79;
   break;
  }
  $68 = $0; //@line 492 "src/texttest/../other/stb_image_write.h"
  $69 = $i; //@line 492 "src/texttest/../other/stb_image_write.h"
  $70 = (($68) + ($69)|0); //@line 492 "src/texttest/../other/stb_image_write.h"
  $71 = (_stbiw__zhash($70)|0); //@line 492 "src/texttest/../other/stb_image_write.h"
  $72 = $71 & 16383; //@line 492 "src/texttest/../other/stb_image_write.h"
  $h = $72; //@line 492 "src/texttest/../other/stb_image_write.h"
  $best = 3; //@line 492 "src/texttest/../other/stb_image_write.h"
  $bestloc = 0; //@line 493 "src/texttest/../other/stb_image_write.h"
  $73 = $h; //@line 494 "src/texttest/../other/stb_image_write.h"
  $74 = (($hash_table) + ($73<<2)|0); //@line 494 "src/texttest/../other/stb_image_write.h"
  $75 = HEAP32[$74>>2]|0; //@line 494 "src/texttest/../other/stb_image_write.h"
  $hlist = $75; //@line 494 "src/texttest/../other/stb_image_write.h"
  $76 = $hlist; //@line 495 "src/texttest/../other/stb_image_write.h"
  $77 = ($76|0)!=(0|0); //@line 495 "src/texttest/../other/stb_image_write.h"
  if ($77) {
   $78 = $hlist; //@line 495 "src/texttest/../other/stb_image_write.h"
   $79 = (($78) + -8|0); //@line 495 "src/texttest/../other/stb_image_write.h"
   $80 = (($79) + 4|0); //@line 495 "src/texttest/../other/stb_image_write.h"
   $81 = HEAP32[$80>>2]|0; //@line 495 "src/texttest/../other/stb_image_write.h"
   $82 = $81;
  } else {
   $82 = 0;
  }
  $n = $82; //@line 495 "src/texttest/../other/stb_image_write.h"
  $j = 0; //@line 496 "src/texttest/../other/stb_image_write.h"
  while(1) {
   $83 = $j; //@line 496 "src/texttest/../other/stb_image_write.h"
   $84 = $n; //@line 496 "src/texttest/../other/stb_image_write.h"
   $85 = ($83|0)<($84|0); //@line 496 "src/texttest/../other/stb_image_write.h"
   if (!($85)) {
    break;
   }
   $86 = $j; //@line 497 "src/texttest/../other/stb_image_write.h"
   $87 = $hlist; //@line 497 "src/texttest/../other/stb_image_write.h"
   $88 = (($87) + ($86<<2)|0); //@line 497 "src/texttest/../other/stb_image_write.h"
   $89 = HEAP32[$88>>2]|0; //@line 497 "src/texttest/../other/stb_image_write.h"
   $90 = $0; //@line 497 "src/texttest/../other/stb_image_write.h"
   $91 = $89; //@line 497 "src/texttest/../other/stb_image_write.h"
   $92 = $90; //@line 497 "src/texttest/../other/stb_image_write.h"
   $93 = (($91) - ($92))|0; //@line 497 "src/texttest/../other/stb_image_write.h"
   $94 = $i; //@line 497 "src/texttest/../other/stb_image_write.h"
   $95 = (($94) - 32768)|0; //@line 497 "src/texttest/../other/stb_image_write.h"
   $96 = ($93|0)>($95|0); //@line 497 "src/texttest/../other/stb_image_write.h"
   if ($96) {
    $97 = $j; //@line 498 "src/texttest/../other/stb_image_write.h"
    $98 = $hlist; //@line 498 "src/texttest/../other/stb_image_write.h"
    $99 = (($98) + ($97<<2)|0); //@line 498 "src/texttest/../other/stb_image_write.h"
    $100 = HEAP32[$99>>2]|0; //@line 498 "src/texttest/../other/stb_image_write.h"
    $101 = $0; //@line 498 "src/texttest/../other/stb_image_write.h"
    $102 = $i; //@line 498 "src/texttest/../other/stb_image_write.h"
    $103 = (($101) + ($102)|0); //@line 498 "src/texttest/../other/stb_image_write.h"
    $104 = $1; //@line 498 "src/texttest/../other/stb_image_write.h"
    $105 = $i; //@line 498 "src/texttest/../other/stb_image_write.h"
    $106 = (($104) - ($105))|0; //@line 498 "src/texttest/../other/stb_image_write.h"
    $107 = (_stbiw__zlib_countm($100,$103,$106)|0); //@line 498 "src/texttest/../other/stb_image_write.h"
    $d = $107; //@line 498 "src/texttest/../other/stb_image_write.h"
    $108 = $d; //@line 499 "src/texttest/../other/stb_image_write.h"
    $109 = $best; //@line 499 "src/texttest/../other/stb_image_write.h"
    $110 = ($108|0)>=($109|0); //@line 499 "src/texttest/../other/stb_image_write.h"
    if ($110) {
     $111 = $d; //@line 499 "src/texttest/../other/stb_image_write.h"
     $best = $111; //@line 499 "src/texttest/../other/stb_image_write.h"
     $112 = $j; //@line 499 "src/texttest/../other/stb_image_write.h"
     $113 = $hlist; //@line 499 "src/texttest/../other/stb_image_write.h"
     $114 = (($113) + ($112<<2)|0); //@line 499 "src/texttest/../other/stb_image_write.h"
     $115 = HEAP32[$114>>2]|0; //@line 499 "src/texttest/../other/stb_image_write.h"
     $bestloc = $115; //@line 499 "src/texttest/../other/stb_image_write.h"
    }
   }
   $116 = $j; //@line 496 "src/texttest/../other/stb_image_write.h"
   $117 = (($116) + 1)|0; //@line 496 "src/texttest/../other/stb_image_write.h"
   $j = $117; //@line 496 "src/texttest/../other/stb_image_write.h"
  }
  $118 = $h; //@line 503 "src/texttest/../other/stb_image_write.h"
  $119 = (($hash_table) + ($118<<2)|0); //@line 503 "src/texttest/../other/stb_image_write.h"
  $120 = HEAP32[$119>>2]|0; //@line 503 "src/texttest/../other/stb_image_write.h"
  $121 = ($120|0)!=(0|0); //@line 503 "src/texttest/../other/stb_image_write.h"
  if ($121) {
   $122 = $h; //@line 503 "src/texttest/../other/stb_image_write.h"
   $123 = (($hash_table) + ($122<<2)|0); //@line 503 "src/texttest/../other/stb_image_write.h"
   $124 = HEAP32[$123>>2]|0; //@line 503 "src/texttest/../other/stb_image_write.h"
   $125 = (($124) + -8|0); //@line 503 "src/texttest/../other/stb_image_write.h"
   $126 = (($125) + 4|0); //@line 503 "src/texttest/../other/stb_image_write.h"
   $127 = HEAP32[$126>>2]|0; //@line 503 "src/texttest/../other/stb_image_write.h"
   $128 = $3; //@line 503 "src/texttest/../other/stb_image_write.h"
   $129 = $128<<1; //@line 503 "src/texttest/../other/stb_image_write.h"
   $130 = ($127|0)==($129|0); //@line 503 "src/texttest/../other/stb_image_write.h"
   if ($130) {
    $131 = $h; //@line 504 "src/texttest/../other/stb_image_write.h"
    $132 = (($hash_table) + ($131<<2)|0); //@line 504 "src/texttest/../other/stb_image_write.h"
    $133 = HEAP32[$132>>2]|0; //@line 504 "src/texttest/../other/stb_image_write.h"
    $134 = $h; //@line 504 "src/texttest/../other/stb_image_write.h"
    $135 = (($hash_table) + ($134<<2)|0); //@line 504 "src/texttest/../other/stb_image_write.h"
    $136 = HEAP32[$135>>2]|0; //@line 504 "src/texttest/../other/stb_image_write.h"
    $137 = $3; //@line 504 "src/texttest/../other/stb_image_write.h"
    $138 = (($136) + ($137<<2)|0); //@line 504 "src/texttest/../other/stb_image_write.h"
    $139 = $3; //@line 504 "src/texttest/../other/stb_image_write.h"
    $140 = $139<<2; //@line 504 "src/texttest/../other/stb_image_write.h"
    _memmove(($133|0),($138|0),($140|0))|0; //@line 504 "src/texttest/../other/stb_image_write.h"
    $141 = $3; //@line 505 "src/texttest/../other/stb_image_write.h"
    $142 = $h; //@line 505 "src/texttest/../other/stb_image_write.h"
    $143 = (($hash_table) + ($142<<2)|0); //@line 505 "src/texttest/../other/stb_image_write.h"
    $144 = HEAP32[$143>>2]|0; //@line 505 "src/texttest/../other/stb_image_write.h"
    $145 = (($144) + -8|0); //@line 505 "src/texttest/../other/stb_image_write.h"
    $146 = (($145) + 4|0); //@line 505 "src/texttest/../other/stb_image_write.h"
    HEAP32[$146>>2] = $141; //@line 505 "src/texttest/../other/stb_image_write.h"
   }
  }
  $147 = $h; //@line 507 "src/texttest/../other/stb_image_write.h"
  $148 = (($hash_table) + ($147<<2)|0); //@line 507 "src/texttest/../other/stb_image_write.h"
  $149 = HEAP32[$148>>2]|0; //@line 507 "src/texttest/../other/stb_image_write.h"
  $150 = ($149|0)==(0|0); //@line 507 "src/texttest/../other/stb_image_write.h"
  if ($150) {
   label = 33;
  } else {
   $151 = $h; //@line 507 "src/texttest/../other/stb_image_write.h"
   $152 = (($hash_table) + ($151<<2)|0); //@line 507 "src/texttest/../other/stb_image_write.h"
   $153 = HEAP32[$152>>2]|0; //@line 507 "src/texttest/../other/stb_image_write.h"
   $154 = (($153) + -8|0); //@line 507 "src/texttest/../other/stb_image_write.h"
   $155 = (($154) + 4|0); //@line 507 "src/texttest/../other/stb_image_write.h"
   $156 = HEAP32[$155>>2]|0; //@line 507 "src/texttest/../other/stb_image_write.h"
   $157 = (($156) + 1)|0; //@line 507 "src/texttest/../other/stb_image_write.h"
   $158 = $h; //@line 507 "src/texttest/../other/stb_image_write.h"
   $159 = (($hash_table) + ($158<<2)|0); //@line 507 "src/texttest/../other/stb_image_write.h"
   $160 = HEAP32[$159>>2]|0; //@line 507 "src/texttest/../other/stb_image_write.h"
   $161 = (($160) + -8|0); //@line 507 "src/texttest/../other/stb_image_write.h"
   $162 = HEAP32[$161>>2]|0; //@line 507 "src/texttest/../other/stb_image_write.h"
   $163 = ($157|0)>=($162|0); //@line 507 "src/texttest/../other/stb_image_write.h"
   if ($163) {
    label = 33;
   } else {
   }
  }
  if ((label|0) == 33) {
   label = 0;
   $164 = $h; //@line 507 "src/texttest/../other/stb_image_write.h"
   $165 = (($hash_table) + ($164<<2)|0); //@line 507 "src/texttest/../other/stb_image_write.h"
   (_stbiw__sbgrowf($165,1,4)|0); //@line 507 "src/texttest/../other/stb_image_write.h"
  }
  $166 = $0; //@line 507 "src/texttest/../other/stb_image_write.h"
  $167 = $i; //@line 507 "src/texttest/../other/stb_image_write.h"
  $168 = (($166) + ($167)|0); //@line 507 "src/texttest/../other/stb_image_write.h"
  $169 = $h; //@line 507 "src/texttest/../other/stb_image_write.h"
  $170 = (($hash_table) + ($169<<2)|0); //@line 507 "src/texttest/../other/stb_image_write.h"
  $171 = HEAP32[$170>>2]|0; //@line 507 "src/texttest/../other/stb_image_write.h"
  $172 = (($171) + -8|0); //@line 507 "src/texttest/../other/stb_image_write.h"
  $173 = (($172) + 4|0); //@line 507 "src/texttest/../other/stb_image_write.h"
  $174 = HEAP32[$173>>2]|0; //@line 507 "src/texttest/../other/stb_image_write.h"
  $175 = (($174) + 1)|0; //@line 507 "src/texttest/../other/stb_image_write.h"
  HEAP32[$173>>2] = $175; //@line 507 "src/texttest/../other/stb_image_write.h"
  $176 = $h; //@line 507 "src/texttest/../other/stb_image_write.h"
  $177 = (($hash_table) + ($176<<2)|0); //@line 507 "src/texttest/../other/stb_image_write.h"
  $178 = HEAP32[$177>>2]|0; //@line 507 "src/texttest/../other/stb_image_write.h"
  $179 = (($178) + ($174<<2)|0); //@line 507 "src/texttest/../other/stb_image_write.h"
  HEAP32[$179>>2] = $168; //@line 507 "src/texttest/../other/stb_image_write.h"
  $180 = $bestloc; //@line 509 "src/texttest/../other/stb_image_write.h"
  $181 = ($180|0)!=(0|0); //@line 509 "src/texttest/../other/stb_image_write.h"
  if ($181) {
   $182 = $0; //@line 511 "src/texttest/../other/stb_image_write.h"
   $183 = $i; //@line 511 "src/texttest/../other/stb_image_write.h"
   $184 = (($182) + ($183)|0); //@line 511 "src/texttest/../other/stb_image_write.h"
   $185 = (($184) + 1|0); //@line 511 "src/texttest/../other/stb_image_write.h"
   $186 = (_stbiw__zhash($185)|0); //@line 511 "src/texttest/../other/stb_image_write.h"
   $187 = $186 & 16383; //@line 511 "src/texttest/../other/stb_image_write.h"
   $h = $187; //@line 511 "src/texttest/../other/stb_image_write.h"
   $188 = $h; //@line 512 "src/texttest/../other/stb_image_write.h"
   $189 = (($hash_table) + ($188<<2)|0); //@line 512 "src/texttest/../other/stb_image_write.h"
   $190 = HEAP32[$189>>2]|0; //@line 512 "src/texttest/../other/stb_image_write.h"
   $hlist = $190; //@line 512 "src/texttest/../other/stb_image_write.h"
   $191 = $hlist; //@line 513 "src/texttest/../other/stb_image_write.h"
   $192 = ($191|0)!=(0|0); //@line 513 "src/texttest/../other/stb_image_write.h"
   if ($192) {
    $193 = $hlist; //@line 513 "src/texttest/../other/stb_image_write.h"
    $194 = (($193) + -8|0); //@line 513 "src/texttest/../other/stb_image_write.h"
    $195 = (($194) + 4|0); //@line 513 "src/texttest/../other/stb_image_write.h"
    $196 = HEAP32[$195>>2]|0; //@line 513 "src/texttest/../other/stb_image_write.h"
    $197 = $196;
   } else {
    $197 = 0;
   }
   $n = $197; //@line 513 "src/texttest/../other/stb_image_write.h"
   $j = 0; //@line 514 "src/texttest/../other/stb_image_write.h"
   while(1) {
    $198 = $j; //@line 514 "src/texttest/../other/stb_image_write.h"
    $199 = $n; //@line 514 "src/texttest/../other/stb_image_write.h"
    $200 = ($198|0)<($199|0); //@line 514 "src/texttest/../other/stb_image_write.h"
    if (!($200)) {
     break;
    }
    $201 = $j; //@line 515 "src/texttest/../other/stb_image_write.h"
    $202 = $hlist; //@line 515 "src/texttest/../other/stb_image_write.h"
    $203 = (($202) + ($201<<2)|0); //@line 515 "src/texttest/../other/stb_image_write.h"
    $204 = HEAP32[$203>>2]|0; //@line 515 "src/texttest/../other/stb_image_write.h"
    $205 = $0; //@line 515 "src/texttest/../other/stb_image_write.h"
    $206 = $204; //@line 515 "src/texttest/../other/stb_image_write.h"
    $207 = $205; //@line 515 "src/texttest/../other/stb_image_write.h"
    $208 = (($206) - ($207))|0; //@line 515 "src/texttest/../other/stb_image_write.h"
    $209 = $i; //@line 515 "src/texttest/../other/stb_image_write.h"
    $210 = (($209) - 32767)|0; //@line 515 "src/texttest/../other/stb_image_write.h"
    $211 = ($208|0)>($210|0); //@line 515 "src/texttest/../other/stb_image_write.h"
    if ($211) {
     $212 = $j; //@line 516 "src/texttest/../other/stb_image_write.h"
     $213 = $hlist; //@line 516 "src/texttest/../other/stb_image_write.h"
     $214 = (($213) + ($212<<2)|0); //@line 516 "src/texttest/../other/stb_image_write.h"
     $215 = HEAP32[$214>>2]|0; //@line 516 "src/texttest/../other/stb_image_write.h"
     $216 = $0; //@line 516 "src/texttest/../other/stb_image_write.h"
     $217 = $i; //@line 516 "src/texttest/../other/stb_image_write.h"
     $218 = (($216) + ($217)|0); //@line 516 "src/texttest/../other/stb_image_write.h"
     $219 = (($218) + 1|0); //@line 516 "src/texttest/../other/stb_image_write.h"
     $220 = $1; //@line 516 "src/texttest/../other/stb_image_write.h"
     $221 = $i; //@line 516 "src/texttest/../other/stb_image_write.h"
     $222 = (($220) - ($221))|0; //@line 516 "src/texttest/../other/stb_image_write.h"
     $223 = (($222) - 1)|0; //@line 516 "src/texttest/../other/stb_image_write.h"
     $224 = (_stbiw__zlib_countm($215,$219,$223)|0); //@line 516 "src/texttest/../other/stb_image_write.h"
     $e = $224; //@line 516 "src/texttest/../other/stb_image_write.h"
     $225 = $e; //@line 517 "src/texttest/../other/stb_image_write.h"
     $226 = $best; //@line 517 "src/texttest/../other/stb_image_write.h"
     $227 = ($225|0)>($226|0); //@line 517 "src/texttest/../other/stb_image_write.h"
     if ($227) {
      label = 43;
      break;
     }
    }
    $228 = $j; //@line 514 "src/texttest/../other/stb_image_write.h"
    $229 = (($228) + 1)|0; //@line 514 "src/texttest/../other/stb_image_write.h"
    $j = $229; //@line 514 "src/texttest/../other/stb_image_write.h"
   }
   if ((label|0) == 43) {
    label = 0;
    $bestloc = 0; //@line 518 "src/texttest/../other/stb_image_write.h"
   }
  }
  $230 = $bestloc; //@line 525 "src/texttest/../other/stb_image_write.h"
  $231 = ($230|0)!=(0|0); //@line 525 "src/texttest/../other/stb_image_write.h"
  if ($231) {
   $232 = $0; //@line 526 "src/texttest/../other/stb_image_write.h"
   $233 = $i; //@line 526 "src/texttest/../other/stb_image_write.h"
   $234 = (($232) + ($233)|0); //@line 526 "src/texttest/../other/stb_image_write.h"
   $235 = $bestloc; //@line 526 "src/texttest/../other/stb_image_write.h"
   $236 = $234; //@line 526 "src/texttest/../other/stb_image_write.h"
   $237 = $235; //@line 526 "src/texttest/../other/stb_image_write.h"
   $238 = (($236) - ($237))|0; //@line 526 "src/texttest/../other/stb_image_write.h"
   $d1 = $238; //@line 526 "src/texttest/../other/stb_image_write.h"
   $239 = $d1; //@line 527 "src/texttest/../other/stb_image_write.h"
   $240 = ($239|0)<=(32767); //@line 527 "src/texttest/../other/stb_image_write.h"
   if (!($240)) {
    label = 51;
    break;
   }
   $241 = $best; //@line 527 "src/texttest/../other/stb_image_write.h"
   $242 = ($241|0)<=(258); //@line 527 "src/texttest/../other/stb_image_write.h"
   if (!($242)) {
    label = 51;
    break;
   }
   $j = 0; //@line 528 "src/texttest/../other/stb_image_write.h"
   while(1) {
    $243 = $best; //@line 528 "src/texttest/../other/stb_image_write.h"
    $244 = $j; //@line 528 "src/texttest/../other/stb_image_write.h"
    $245 = (($244) + 1)|0; //@line 528 "src/texttest/../other/stb_image_write.h"
    $246 = (96 + ($245<<1)|0); //@line 528 "src/texttest/../other/stb_image_write.h"
    $247 = HEAP16[$246>>1]|0; //@line 528 "src/texttest/../other/stb_image_write.h"
    $248 = $247&65535; //@line 528 "src/texttest/../other/stb_image_write.h"
    $249 = (($248) - 1)|0; //@line 528 "src/texttest/../other/stb_image_write.h"
    $250 = ($243|0)>($249|0); //@line 528 "src/texttest/../other/stb_image_write.h"
    if (!($250)) {
     break;
    }
    $251 = $j; //@line 528 "src/texttest/../other/stb_image_write.h"
    $252 = (($251) + 1)|0; //@line 528 "src/texttest/../other/stb_image_write.h"
    $j = $252; //@line 528 "src/texttest/../other/stb_image_write.h"
   }
   $253 = $j; //@line 529 "src/texttest/../other/stb_image_write.h"
   $254 = (($253) + 257)|0; //@line 529 "src/texttest/../other/stb_image_write.h"
   $255 = ($254|0)<=(143); //@line 529 "src/texttest/../other/stb_image_write.h"
   if ($255) {
    $256 = $j; //@line 529 "src/texttest/../other/stb_image_write.h"
    $257 = (($256) + 257)|0; //@line 529 "src/texttest/../other/stb_image_write.h"
    $258 = (48 + ($257))|0; //@line 529 "src/texttest/../other/stb_image_write.h"
    $259 = (_stbiw__zlib_bitrev($258,8)|0); //@line 529 "src/texttest/../other/stb_image_write.h"
    $260 = HEAP32[$bitcount>>2]|0; //@line 529 "src/texttest/../other/stb_image_write.h"
    $261 = $259 << $260; //@line 529 "src/texttest/../other/stb_image_write.h"
    $262 = HEAP32[$bitbuf>>2]|0; //@line 529 "src/texttest/../other/stb_image_write.h"
    $263 = $262 | $261; //@line 529 "src/texttest/../other/stb_image_write.h"
    HEAP32[$bitbuf>>2] = $263; //@line 529 "src/texttest/../other/stb_image_write.h"
    $264 = HEAP32[$bitcount>>2]|0; //@line 529 "src/texttest/../other/stb_image_write.h"
    $265 = (($264) + 8)|0; //@line 529 "src/texttest/../other/stb_image_write.h"
    HEAP32[$bitcount>>2] = $265; //@line 529 "src/texttest/../other/stb_image_write.h"
    $266 = HEAP32[$out>>2]|0; //@line 529 "src/texttest/../other/stb_image_write.h"
    $267 = (_stbiw__zlib_flushf($266,$bitbuf,$bitcount)|0); //@line 529 "src/texttest/../other/stb_image_write.h"
    HEAP32[$out>>2] = $267; //@line 529 "src/texttest/../other/stb_image_write.h"
   } else {
    $268 = $j; //@line 529 "src/texttest/../other/stb_image_write.h"
    $269 = (($268) + 257)|0; //@line 529 "src/texttest/../other/stb_image_write.h"
    $270 = ($269|0)<=(255); //@line 529 "src/texttest/../other/stb_image_write.h"
    if ($270) {
     $271 = $j; //@line 529 "src/texttest/../other/stb_image_write.h"
     $272 = (($271) + 257)|0; //@line 529 "src/texttest/../other/stb_image_write.h"
     $273 = (400 + ($272))|0; //@line 529 "src/texttest/../other/stb_image_write.h"
     $274 = (($273) - 144)|0; //@line 529 "src/texttest/../other/stb_image_write.h"
     $275 = (_stbiw__zlib_bitrev($274,9)|0); //@line 529 "src/texttest/../other/stb_image_write.h"
     $276 = HEAP32[$bitcount>>2]|0; //@line 529 "src/texttest/../other/stb_image_write.h"
     $277 = $275 << $276; //@line 529 "src/texttest/../other/stb_image_write.h"
     $278 = HEAP32[$bitbuf>>2]|0; //@line 529 "src/texttest/../other/stb_image_write.h"
     $279 = $278 | $277; //@line 529 "src/texttest/../other/stb_image_write.h"
     HEAP32[$bitbuf>>2] = $279; //@line 529 "src/texttest/../other/stb_image_write.h"
     $280 = HEAP32[$bitcount>>2]|0; //@line 529 "src/texttest/../other/stb_image_write.h"
     $281 = (($280) + 9)|0; //@line 529 "src/texttest/../other/stb_image_write.h"
     HEAP32[$bitcount>>2] = $281; //@line 529 "src/texttest/../other/stb_image_write.h"
     $282 = HEAP32[$out>>2]|0; //@line 529 "src/texttest/../other/stb_image_write.h"
     $283 = (_stbiw__zlib_flushf($282,$bitbuf,$bitcount)|0); //@line 529 "src/texttest/../other/stb_image_write.h"
     HEAP32[$out>>2] = $283; //@line 529 "src/texttest/../other/stb_image_write.h"
    } else {
     $284 = $j; //@line 529 "src/texttest/../other/stb_image_write.h"
     $285 = (($284) + 257)|0; //@line 529 "src/texttest/../other/stb_image_write.h"
     $286 = ($285|0)<=(279); //@line 529 "src/texttest/../other/stb_image_write.h"
     if ($286) {
      $287 = $j; //@line 529 "src/texttest/../other/stb_image_write.h"
      $288 = (($287) + 257)|0; //@line 529 "src/texttest/../other/stb_image_write.h"
      $289 = (0 + ($288))|0; //@line 529 "src/texttest/../other/stb_image_write.h"
      $290 = (($289) - 256)|0; //@line 529 "src/texttest/../other/stb_image_write.h"
      $291 = (_stbiw__zlib_bitrev($290,7)|0); //@line 529 "src/texttest/../other/stb_image_write.h"
      $292 = HEAP32[$bitcount>>2]|0; //@line 529 "src/texttest/../other/stb_image_write.h"
      $293 = $291 << $292; //@line 529 "src/texttest/../other/stb_image_write.h"
      $294 = HEAP32[$bitbuf>>2]|0; //@line 529 "src/texttest/../other/stb_image_write.h"
      $295 = $294 | $293; //@line 529 "src/texttest/../other/stb_image_write.h"
      HEAP32[$bitbuf>>2] = $295; //@line 529 "src/texttest/../other/stb_image_write.h"
      $296 = HEAP32[$bitcount>>2]|0; //@line 529 "src/texttest/../other/stb_image_write.h"
      $297 = (($296) + 7)|0; //@line 529 "src/texttest/../other/stb_image_write.h"
      HEAP32[$bitcount>>2] = $297; //@line 529 "src/texttest/../other/stb_image_write.h"
      $298 = HEAP32[$out>>2]|0; //@line 529 "src/texttest/../other/stb_image_write.h"
      $299 = (_stbiw__zlib_flushf($298,$bitbuf,$bitcount)|0); //@line 529 "src/texttest/../other/stb_image_write.h"
      HEAP32[$out>>2] = $299; //@line 529 "src/texttest/../other/stb_image_write.h"
     } else {
      $300 = $j; //@line 529 "src/texttest/../other/stb_image_write.h"
      $301 = (($300) + 257)|0; //@line 529 "src/texttest/../other/stb_image_write.h"
      $302 = (192 + ($301))|0; //@line 529 "src/texttest/../other/stb_image_write.h"
      $303 = (($302) - 280)|0; //@line 529 "src/texttest/../other/stb_image_write.h"
      $304 = (_stbiw__zlib_bitrev($303,8)|0); //@line 529 "src/texttest/../other/stb_image_write.h"
      $305 = HEAP32[$bitcount>>2]|0; //@line 529 "src/texttest/../other/stb_image_write.h"
      $306 = $304 << $305; //@line 529 "src/texttest/../other/stb_image_write.h"
      $307 = HEAP32[$bitbuf>>2]|0; //@line 529 "src/texttest/../other/stb_image_write.h"
      $308 = $307 | $306; //@line 529 "src/texttest/../other/stb_image_write.h"
      HEAP32[$bitbuf>>2] = $308; //@line 529 "src/texttest/../other/stb_image_write.h"
      $309 = HEAP32[$bitcount>>2]|0; //@line 529 "src/texttest/../other/stb_image_write.h"
      $310 = (($309) + 8)|0; //@line 529 "src/texttest/../other/stb_image_write.h"
      HEAP32[$bitcount>>2] = $310; //@line 529 "src/texttest/../other/stb_image_write.h"
      $311 = HEAP32[$out>>2]|0; //@line 529 "src/texttest/../other/stb_image_write.h"
      $312 = (_stbiw__zlib_flushf($311,$bitbuf,$bitcount)|0); //@line 529 "src/texttest/../other/stb_image_write.h"
      HEAP32[$out>>2] = $312; //@line 529 "src/texttest/../other/stb_image_write.h"
     }
    }
   }
   $313 = $j; //@line 530 "src/texttest/../other/stb_image_write.h"
   $314 = (160 + ($313)|0); //@line 530 "src/texttest/../other/stb_image_write.h"
   $315 = HEAP8[$314>>0]|0; //@line 530 "src/texttest/../other/stb_image_write.h"
   $316 = ($315<<24>>24)!=(0); //@line 530 "src/texttest/../other/stb_image_write.h"
   if ($316) {
    $317 = $best; //@line 530 "src/texttest/../other/stb_image_write.h"
    $318 = $j; //@line 530 "src/texttest/../other/stb_image_write.h"
    $319 = (96 + ($318<<1)|0); //@line 530 "src/texttest/../other/stb_image_write.h"
    $320 = HEAP16[$319>>1]|0; //@line 530 "src/texttest/../other/stb_image_write.h"
    $321 = $320&65535; //@line 530 "src/texttest/../other/stb_image_write.h"
    $322 = (($317) - ($321))|0; //@line 530 "src/texttest/../other/stb_image_write.h"
    $323 = HEAP32[$bitcount>>2]|0; //@line 530 "src/texttest/../other/stb_image_write.h"
    $324 = $322 << $323; //@line 530 "src/texttest/../other/stb_image_write.h"
    $325 = HEAP32[$bitbuf>>2]|0; //@line 530 "src/texttest/../other/stb_image_write.h"
    $326 = $325 | $324; //@line 530 "src/texttest/../other/stb_image_write.h"
    HEAP32[$bitbuf>>2] = $326; //@line 530 "src/texttest/../other/stb_image_write.h"
    $327 = $j; //@line 530 "src/texttest/../other/stb_image_write.h"
    $328 = (160 + ($327)|0); //@line 530 "src/texttest/../other/stb_image_write.h"
    $329 = HEAP8[$328>>0]|0; //@line 530 "src/texttest/../other/stb_image_write.h"
    $330 = $329&255; //@line 530 "src/texttest/../other/stb_image_write.h"
    $331 = HEAP32[$bitcount>>2]|0; //@line 530 "src/texttest/../other/stb_image_write.h"
    $332 = (($331) + ($330))|0; //@line 530 "src/texttest/../other/stb_image_write.h"
    HEAP32[$bitcount>>2] = $332; //@line 530 "src/texttest/../other/stb_image_write.h"
    $333 = HEAP32[$out>>2]|0; //@line 530 "src/texttest/../other/stb_image_write.h"
    $334 = (_stbiw__zlib_flushf($333,$bitbuf,$bitcount)|0); //@line 530 "src/texttest/../other/stb_image_write.h"
    HEAP32[$out>>2] = $334; //@line 530 "src/texttest/../other/stb_image_write.h"
   }
   $j = 0; //@line 531 "src/texttest/../other/stb_image_write.h"
   while(1) {
    $335 = $d1; //@line 531 "src/texttest/../other/stb_image_write.h"
    $336 = $j; //@line 531 "src/texttest/../other/stb_image_write.h"
    $337 = (($336) + 1)|0; //@line 531 "src/texttest/../other/stb_image_write.h"
    $338 = (192 + ($337<<1)|0); //@line 531 "src/texttest/../other/stb_image_write.h"
    $339 = HEAP16[$338>>1]|0; //@line 531 "src/texttest/../other/stb_image_write.h"
    $340 = $339&65535; //@line 531 "src/texttest/../other/stb_image_write.h"
    $341 = (($340) - 1)|0; //@line 531 "src/texttest/../other/stb_image_write.h"
    $342 = ($335|0)>($341|0); //@line 531 "src/texttest/../other/stb_image_write.h"
    if (!($342)) {
     break;
    }
    $343 = $j; //@line 531 "src/texttest/../other/stb_image_write.h"
    $344 = (($343) + 1)|0; //@line 531 "src/texttest/../other/stb_image_write.h"
    $j = $344; //@line 531 "src/texttest/../other/stb_image_write.h"
   }
   $345 = $j; //@line 532 "src/texttest/../other/stb_image_write.h"
   $346 = (_stbiw__zlib_bitrev($345,5)|0); //@line 532 "src/texttest/../other/stb_image_write.h"
   $347 = HEAP32[$bitcount>>2]|0; //@line 532 "src/texttest/../other/stb_image_write.h"
   $348 = $346 << $347; //@line 532 "src/texttest/../other/stb_image_write.h"
   $349 = HEAP32[$bitbuf>>2]|0; //@line 532 "src/texttest/../other/stb_image_write.h"
   $350 = $349 | $348; //@line 532 "src/texttest/../other/stb_image_write.h"
   HEAP32[$bitbuf>>2] = $350; //@line 532 "src/texttest/../other/stb_image_write.h"
   $351 = HEAP32[$bitcount>>2]|0; //@line 532 "src/texttest/../other/stb_image_write.h"
   $352 = (($351) + 5)|0; //@line 532 "src/texttest/../other/stb_image_write.h"
   HEAP32[$bitcount>>2] = $352; //@line 532 "src/texttest/../other/stb_image_write.h"
   $353 = HEAP32[$out>>2]|0; //@line 532 "src/texttest/../other/stb_image_write.h"
   $354 = (_stbiw__zlib_flushf($353,$bitbuf,$bitcount)|0); //@line 532 "src/texttest/../other/stb_image_write.h"
   HEAP32[$out>>2] = $354; //@line 532 "src/texttest/../other/stb_image_write.h"
   $355 = $j; //@line 533 "src/texttest/../other/stb_image_write.h"
   $356 = (256 + ($355)|0); //@line 533 "src/texttest/../other/stb_image_write.h"
   $357 = HEAP8[$356>>0]|0; //@line 533 "src/texttest/../other/stb_image_write.h"
   $358 = ($357<<24>>24)!=(0); //@line 533 "src/texttest/../other/stb_image_write.h"
   if ($358) {
    $359 = $d1; //@line 533 "src/texttest/../other/stb_image_write.h"
    $360 = $j; //@line 533 "src/texttest/../other/stb_image_write.h"
    $361 = (192 + ($360<<1)|0); //@line 533 "src/texttest/../other/stb_image_write.h"
    $362 = HEAP16[$361>>1]|0; //@line 533 "src/texttest/../other/stb_image_write.h"
    $363 = $362&65535; //@line 533 "src/texttest/../other/stb_image_write.h"
    $364 = (($359) - ($363))|0; //@line 533 "src/texttest/../other/stb_image_write.h"
    $365 = HEAP32[$bitcount>>2]|0; //@line 533 "src/texttest/../other/stb_image_write.h"
    $366 = $364 << $365; //@line 533 "src/texttest/../other/stb_image_write.h"
    $367 = HEAP32[$bitbuf>>2]|0; //@line 533 "src/texttest/../other/stb_image_write.h"
    $368 = $367 | $366; //@line 533 "src/texttest/../other/stb_image_write.h"
    HEAP32[$bitbuf>>2] = $368; //@line 533 "src/texttest/../other/stb_image_write.h"
    $369 = $j; //@line 533 "src/texttest/../other/stb_image_write.h"
    $370 = (256 + ($369)|0); //@line 533 "src/texttest/../other/stb_image_write.h"
    $371 = HEAP8[$370>>0]|0; //@line 533 "src/texttest/../other/stb_image_write.h"
    $372 = $371&255; //@line 533 "src/texttest/../other/stb_image_write.h"
    $373 = HEAP32[$bitcount>>2]|0; //@line 533 "src/texttest/../other/stb_image_write.h"
    $374 = (($373) + ($372))|0; //@line 533 "src/texttest/../other/stb_image_write.h"
    HEAP32[$bitcount>>2] = $374; //@line 533 "src/texttest/../other/stb_image_write.h"
    $375 = HEAP32[$out>>2]|0; //@line 533 "src/texttest/../other/stb_image_write.h"
    $376 = (_stbiw__zlib_flushf($375,$bitbuf,$bitcount)|0); //@line 533 "src/texttest/../other/stb_image_write.h"
    HEAP32[$out>>2] = $376; //@line 533 "src/texttest/../other/stb_image_write.h"
   }
   $377 = $best; //@line 534 "src/texttest/../other/stb_image_write.h"
   $378 = $i; //@line 534 "src/texttest/../other/stb_image_write.h"
   $379 = (($378) + ($377))|0; //@line 534 "src/texttest/../other/stb_image_write.h"
   $i = $379; //@line 534 "src/texttest/../other/stb_image_write.h"
  } else {
   $380 = $i; //@line 536 "src/texttest/../other/stb_image_write.h"
   $381 = $0; //@line 536 "src/texttest/../other/stb_image_write.h"
   $382 = (($381) + ($380)|0); //@line 536 "src/texttest/../other/stb_image_write.h"
   $383 = HEAP8[$382>>0]|0; //@line 536 "src/texttest/../other/stb_image_write.h"
   $384 = $383&255; //@line 536 "src/texttest/../other/stb_image_write.h"
   $385 = ($384|0)<=(143); //@line 536 "src/texttest/../other/stb_image_write.h"
   if ($385) {
    $386 = $i; //@line 536 "src/texttest/../other/stb_image_write.h"
    $387 = $0; //@line 536 "src/texttest/../other/stb_image_write.h"
    $388 = (($387) + ($386)|0); //@line 536 "src/texttest/../other/stb_image_write.h"
    $389 = HEAP8[$388>>0]|0; //@line 536 "src/texttest/../other/stb_image_write.h"
    $390 = $389&255; //@line 536 "src/texttest/../other/stb_image_write.h"
    $391 = (48 + ($390))|0; //@line 536 "src/texttest/../other/stb_image_write.h"
    $392 = (_stbiw__zlib_bitrev($391,8)|0); //@line 536 "src/texttest/../other/stb_image_write.h"
    $393 = HEAP32[$bitcount>>2]|0; //@line 536 "src/texttest/../other/stb_image_write.h"
    $394 = $392 << $393; //@line 536 "src/texttest/../other/stb_image_write.h"
    $395 = HEAP32[$bitbuf>>2]|0; //@line 536 "src/texttest/../other/stb_image_write.h"
    $396 = $395 | $394; //@line 536 "src/texttest/../other/stb_image_write.h"
    HEAP32[$bitbuf>>2] = $396; //@line 536 "src/texttest/../other/stb_image_write.h"
    $397 = HEAP32[$bitcount>>2]|0; //@line 536 "src/texttest/../other/stb_image_write.h"
    $398 = (($397) + 8)|0; //@line 536 "src/texttest/../other/stb_image_write.h"
    HEAP32[$bitcount>>2] = $398; //@line 536 "src/texttest/../other/stb_image_write.h"
    $399 = HEAP32[$out>>2]|0; //@line 536 "src/texttest/../other/stb_image_write.h"
    $400 = (_stbiw__zlib_flushf($399,$bitbuf,$bitcount)|0); //@line 536 "src/texttest/../other/stb_image_write.h"
    HEAP32[$out>>2] = $400; //@line 536 "src/texttest/../other/stb_image_write.h"
   } else {
    $401 = $i; //@line 536 "src/texttest/../other/stb_image_write.h"
    $402 = $0; //@line 536 "src/texttest/../other/stb_image_write.h"
    $403 = (($402) + ($401)|0); //@line 536 "src/texttest/../other/stb_image_write.h"
    $404 = HEAP8[$403>>0]|0; //@line 536 "src/texttest/../other/stb_image_write.h"
    $405 = $404&255; //@line 536 "src/texttest/../other/stb_image_write.h"
    $406 = (400 + ($405))|0; //@line 536 "src/texttest/../other/stb_image_write.h"
    $407 = (($406) - 144)|0; //@line 536 "src/texttest/../other/stb_image_write.h"
    $408 = (_stbiw__zlib_bitrev($407,9)|0); //@line 536 "src/texttest/../other/stb_image_write.h"
    $409 = HEAP32[$bitcount>>2]|0; //@line 536 "src/texttest/../other/stb_image_write.h"
    $410 = $408 << $409; //@line 536 "src/texttest/../other/stb_image_write.h"
    $411 = HEAP32[$bitbuf>>2]|0; //@line 536 "src/texttest/../other/stb_image_write.h"
    $412 = $411 | $410; //@line 536 "src/texttest/../other/stb_image_write.h"
    HEAP32[$bitbuf>>2] = $412; //@line 536 "src/texttest/../other/stb_image_write.h"
    $413 = HEAP32[$bitcount>>2]|0; //@line 536 "src/texttest/../other/stb_image_write.h"
    $414 = (($413) + 9)|0; //@line 536 "src/texttest/../other/stb_image_write.h"
    HEAP32[$bitcount>>2] = $414; //@line 536 "src/texttest/../other/stb_image_write.h"
    $415 = HEAP32[$out>>2]|0; //@line 536 "src/texttest/../other/stb_image_write.h"
    $416 = (_stbiw__zlib_flushf($415,$bitbuf,$bitcount)|0); //@line 536 "src/texttest/../other/stb_image_write.h"
    HEAP32[$out>>2] = $416; //@line 536 "src/texttest/../other/stb_image_write.h"
   }
   $417 = $i; //@line 537 "src/texttest/../other/stb_image_write.h"
   $418 = (($417) + 1)|0; //@line 537 "src/texttest/../other/stb_image_write.h"
   $i = $418; //@line 537 "src/texttest/../other/stb_image_write.h"
  }
 }
 if ((label|0) == 51) {
  ___assert_fail((288|0),(48|0),527,(320|0)); //@line 527 "src/texttest/../other/stb_image_write.h"
  // unreachable; //@line 527 "src/texttest/../other/stb_image_write.h"
 }
 else if ((label|0) == 79) {
  while(1) {
   $419 = $i; //@line 541 "src/texttest/../other/stb_image_write.h"
   $420 = $1; //@line 541 "src/texttest/../other/stb_image_write.h"
   $421 = ($419|0)<($420|0); //@line 541 "src/texttest/../other/stb_image_write.h"
   if (!($421)) {
    break;
   }
   $422 = $i; //@line 542 "src/texttest/../other/stb_image_write.h"
   $423 = $0; //@line 542 "src/texttest/../other/stb_image_write.h"
   $424 = (($423) + ($422)|0); //@line 542 "src/texttest/../other/stb_image_write.h"
   $425 = HEAP8[$424>>0]|0; //@line 542 "src/texttest/../other/stb_image_write.h"
   $426 = $425&255; //@line 542 "src/texttest/../other/stb_image_write.h"
   $427 = ($426|0)<=(143); //@line 542 "src/texttest/../other/stb_image_write.h"
   if ($427) {
    $428 = $i; //@line 542 "src/texttest/../other/stb_image_write.h"
    $429 = $0; //@line 542 "src/texttest/../other/stb_image_write.h"
    $430 = (($429) + ($428)|0); //@line 542 "src/texttest/../other/stb_image_write.h"
    $431 = HEAP8[$430>>0]|0; //@line 542 "src/texttest/../other/stb_image_write.h"
    $432 = $431&255; //@line 542 "src/texttest/../other/stb_image_write.h"
    $433 = (48 + ($432))|0; //@line 542 "src/texttest/../other/stb_image_write.h"
    $434 = (_stbiw__zlib_bitrev($433,8)|0); //@line 542 "src/texttest/../other/stb_image_write.h"
    $435 = HEAP32[$bitcount>>2]|0; //@line 542 "src/texttest/../other/stb_image_write.h"
    $436 = $434 << $435; //@line 542 "src/texttest/../other/stb_image_write.h"
    $437 = HEAP32[$bitbuf>>2]|0; //@line 542 "src/texttest/../other/stb_image_write.h"
    $438 = $437 | $436; //@line 542 "src/texttest/../other/stb_image_write.h"
    HEAP32[$bitbuf>>2] = $438; //@line 542 "src/texttest/../other/stb_image_write.h"
    $439 = HEAP32[$bitcount>>2]|0; //@line 542 "src/texttest/../other/stb_image_write.h"
    $440 = (($439) + 8)|0; //@line 542 "src/texttest/../other/stb_image_write.h"
    HEAP32[$bitcount>>2] = $440; //@line 542 "src/texttest/../other/stb_image_write.h"
    $441 = HEAP32[$out>>2]|0; //@line 542 "src/texttest/../other/stb_image_write.h"
    $442 = (_stbiw__zlib_flushf($441,$bitbuf,$bitcount)|0); //@line 542 "src/texttest/../other/stb_image_write.h"
    HEAP32[$out>>2] = $442; //@line 542 "src/texttest/../other/stb_image_write.h"
   } else {
    $443 = $i; //@line 542 "src/texttest/../other/stb_image_write.h"
    $444 = $0; //@line 542 "src/texttest/../other/stb_image_write.h"
    $445 = (($444) + ($443)|0); //@line 542 "src/texttest/../other/stb_image_write.h"
    $446 = HEAP8[$445>>0]|0; //@line 542 "src/texttest/../other/stb_image_write.h"
    $447 = $446&255; //@line 542 "src/texttest/../other/stb_image_write.h"
    $448 = (400 + ($447))|0; //@line 542 "src/texttest/../other/stb_image_write.h"
    $449 = (($448) - 144)|0; //@line 542 "src/texttest/../other/stb_image_write.h"
    $450 = (_stbiw__zlib_bitrev($449,9)|0); //@line 542 "src/texttest/../other/stb_image_write.h"
    $451 = HEAP32[$bitcount>>2]|0; //@line 542 "src/texttest/../other/stb_image_write.h"
    $452 = $450 << $451; //@line 542 "src/texttest/../other/stb_image_write.h"
    $453 = HEAP32[$bitbuf>>2]|0; //@line 542 "src/texttest/../other/stb_image_write.h"
    $454 = $453 | $452; //@line 542 "src/texttest/../other/stb_image_write.h"
    HEAP32[$bitbuf>>2] = $454; //@line 542 "src/texttest/../other/stb_image_write.h"
    $455 = HEAP32[$bitcount>>2]|0; //@line 542 "src/texttest/../other/stb_image_write.h"
    $456 = (($455) + 9)|0; //@line 542 "src/texttest/../other/stb_image_write.h"
    HEAP32[$bitcount>>2] = $456; //@line 542 "src/texttest/../other/stb_image_write.h"
    $457 = HEAP32[$out>>2]|0; //@line 542 "src/texttest/../other/stb_image_write.h"
    $458 = (_stbiw__zlib_flushf($457,$bitbuf,$bitcount)|0); //@line 542 "src/texttest/../other/stb_image_write.h"
    HEAP32[$out>>2] = $458; //@line 542 "src/texttest/../other/stb_image_write.h"
   }
   $459 = $i; //@line 541 "src/texttest/../other/stb_image_write.h"
   $460 = (($459) + 1)|0; //@line 541 "src/texttest/../other/stb_image_write.h"
   $i = $460; //@line 541 "src/texttest/../other/stb_image_write.h"
  }
  $461 = (_stbiw__zlib_bitrev(0,7)|0); //@line 543 "src/texttest/../other/stb_image_write.h"
  $462 = HEAP32[$bitcount>>2]|0; //@line 543 "src/texttest/../other/stb_image_write.h"
  $463 = $461 << $462; //@line 543 "src/texttest/../other/stb_image_write.h"
  $464 = HEAP32[$bitbuf>>2]|0; //@line 543 "src/texttest/../other/stb_image_write.h"
  $465 = $464 | $463; //@line 543 "src/texttest/../other/stb_image_write.h"
  HEAP32[$bitbuf>>2] = $465; //@line 543 "src/texttest/../other/stb_image_write.h"
  $466 = HEAP32[$bitcount>>2]|0; //@line 543 "src/texttest/../other/stb_image_write.h"
  $467 = (($466) + 7)|0; //@line 543 "src/texttest/../other/stb_image_write.h"
  HEAP32[$bitcount>>2] = $467; //@line 543 "src/texttest/../other/stb_image_write.h"
  $468 = HEAP32[$out>>2]|0; //@line 543 "src/texttest/../other/stb_image_write.h"
  $469 = (_stbiw__zlib_flushf($468,$bitbuf,$bitcount)|0); //@line 543 "src/texttest/../other/stb_image_write.h"
  HEAP32[$out>>2] = $469; //@line 543 "src/texttest/../other/stb_image_write.h"
  while(1) {
   $470 = HEAP32[$bitcount>>2]|0; //@line 545 "src/texttest/../other/stb_image_write.h"
   $471 = ($470|0)!=(0); //@line 545 "src/texttest/../other/stb_image_write.h"
   if (!($471)) {
    break;
   }
   $472 = HEAP32[$bitcount>>2]|0; //@line 546 "src/texttest/../other/stb_image_write.h"
   $473 = 0 << $472; //@line 546 "src/texttest/../other/stb_image_write.h"
   $474 = HEAP32[$bitbuf>>2]|0; //@line 546 "src/texttest/../other/stb_image_write.h"
   $475 = $474 | $473; //@line 546 "src/texttest/../other/stb_image_write.h"
   HEAP32[$bitbuf>>2] = $475; //@line 546 "src/texttest/../other/stb_image_write.h"
   $476 = HEAP32[$bitcount>>2]|0; //@line 546 "src/texttest/../other/stb_image_write.h"
   $477 = (($476) + 1)|0; //@line 546 "src/texttest/../other/stb_image_write.h"
   HEAP32[$bitcount>>2] = $477; //@line 546 "src/texttest/../other/stb_image_write.h"
   $478 = HEAP32[$out>>2]|0; //@line 546 "src/texttest/../other/stb_image_write.h"
   $479 = (_stbiw__zlib_flushf($478,$bitbuf,$bitcount)|0); //@line 546 "src/texttest/../other/stb_image_write.h"
   HEAP32[$out>>2] = $479; //@line 546 "src/texttest/../other/stb_image_write.h"
  }
  $i = 0; //@line 548 "src/texttest/../other/stb_image_write.h"
  while(1) {
   $480 = $i; //@line 548 "src/texttest/../other/stb_image_write.h"
   $481 = ($480|0)<(16384); //@line 548 "src/texttest/../other/stb_image_write.h"
   if (!($481)) {
    break;
   }
   $482 = $i; //@line 549 "src/texttest/../other/stb_image_write.h"
   $483 = (($hash_table) + ($482<<2)|0); //@line 549 "src/texttest/../other/stb_image_write.h"
   $484 = HEAP32[$483>>2]|0; //@line 549 "src/texttest/../other/stb_image_write.h"
   $485 = ($484|0)!=(0|0); //@line 549 "src/texttest/../other/stb_image_write.h"
   if ($485) {
    $486 = $i; //@line 549 "src/texttest/../other/stb_image_write.h"
    $487 = (($hash_table) + ($486<<2)|0); //@line 549 "src/texttest/../other/stb_image_write.h"
    $488 = HEAP32[$487>>2]|0; //@line 549 "src/texttest/../other/stb_image_write.h"
    $489 = (($488) + -8|0); //@line 549 "src/texttest/../other/stb_image_write.h"
    _free($489); //@line 549 "src/texttest/../other/stb_image_write.h"
   } else {
   }
   $490 = $i; //@line 548 "src/texttest/../other/stb_image_write.h"
   $491 = (($490) + 1)|0; //@line 548 "src/texttest/../other/stb_image_write.h"
   $i = $491; //@line 548 "src/texttest/../other/stb_image_write.h"
  }
  $i2 = 0; //@line 553 "src/texttest/../other/stb_image_write.h"
  $s1 = 1; //@line 553 "src/texttest/../other/stb_image_write.h"
  $s2 = 0; //@line 553 "src/texttest/../other/stb_image_write.h"
  $492 = $1; //@line 553 "src/texttest/../other/stb_image_write.h"
  $493 = (($492|0) % 5552)&-1; //@line 553 "src/texttest/../other/stb_image_write.h"
  $blocklen = $493; //@line 553 "src/texttest/../other/stb_image_write.h"
  $j3 = 0; //@line 554 "src/texttest/../other/stb_image_write.h"
  while(1) {
   $494 = $j3; //@line 555 "src/texttest/../other/stb_image_write.h"
   $495 = $1; //@line 555 "src/texttest/../other/stb_image_write.h"
   $496 = ($494|0)<($495|0); //@line 555 "src/texttest/../other/stb_image_write.h"
   if (!($496)) {
    break;
   }
   $i2 = 0; //@line 556 "src/texttest/../other/stb_image_write.h"
   while(1) {
    $497 = $i2; //@line 556 "src/texttest/../other/stb_image_write.h"
    $498 = $blocklen; //@line 556 "src/texttest/../other/stb_image_write.h"
    $499 = ($497>>>0)<($498>>>0); //@line 556 "src/texttest/../other/stb_image_write.h"
    if (!($499)) {
     break;
    }
    $500 = $j3; //@line 556 "src/texttest/../other/stb_image_write.h"
    $501 = $i2; //@line 556 "src/texttest/../other/stb_image_write.h"
    $502 = (($500) + ($501))|0; //@line 556 "src/texttest/../other/stb_image_write.h"
    $503 = $0; //@line 556 "src/texttest/../other/stb_image_write.h"
    $504 = (($503) + ($502)|0); //@line 556 "src/texttest/../other/stb_image_write.h"
    $505 = HEAP8[$504>>0]|0; //@line 556 "src/texttest/../other/stb_image_write.h"
    $506 = $505&255; //@line 556 "src/texttest/../other/stb_image_write.h"
    $507 = $s1; //@line 556 "src/texttest/../other/stb_image_write.h"
    $508 = (($507) + ($506))|0; //@line 556 "src/texttest/../other/stb_image_write.h"
    $s1 = $508; //@line 556 "src/texttest/../other/stb_image_write.h"
    $509 = $s1; //@line 556 "src/texttest/../other/stb_image_write.h"
    $510 = $s2; //@line 556 "src/texttest/../other/stb_image_write.h"
    $511 = (($510) + ($509))|0; //@line 556 "src/texttest/../other/stb_image_write.h"
    $s2 = $511; //@line 556 "src/texttest/../other/stb_image_write.h"
    $512 = $i2; //@line 556 "src/texttest/../other/stb_image_write.h"
    $513 = (($512) + 1)|0; //@line 556 "src/texttest/../other/stb_image_write.h"
    $i2 = $513; //@line 556 "src/texttest/../other/stb_image_write.h"
   }
   $514 = $s1; //@line 557 "src/texttest/../other/stb_image_write.h"
   $515 = (($514>>>0) % 65521)&-1; //@line 557 "src/texttest/../other/stb_image_write.h"
   $s1 = $515; //@line 557 "src/texttest/../other/stb_image_write.h"
   $516 = $s2; //@line 557 "src/texttest/../other/stb_image_write.h"
   $517 = (($516>>>0) % 65521)&-1; //@line 557 "src/texttest/../other/stb_image_write.h"
   $s2 = $517; //@line 557 "src/texttest/../other/stb_image_write.h"
   $518 = $blocklen; //@line 558 "src/texttest/../other/stb_image_write.h"
   $519 = $j3; //@line 558 "src/texttest/../other/stb_image_write.h"
   $520 = (($519) + ($518))|0; //@line 558 "src/texttest/../other/stb_image_write.h"
   $j3 = $520; //@line 558 "src/texttest/../other/stb_image_write.h"
   $blocklen = 5552; //@line 559 "src/texttest/../other/stb_image_write.h"
  }
  $521 = HEAP32[$out>>2]|0; //@line 561 "src/texttest/../other/stb_image_write.h"
  $522 = ($521|0)==(0|0); //@line 561 "src/texttest/../other/stb_image_write.h"
  if ($522) {
   label = 105;
  } else {
   $523 = HEAP32[$out>>2]|0; //@line 561 "src/texttest/../other/stb_image_write.h"
   $524 = (($523) + -8|0); //@line 561 "src/texttest/../other/stb_image_write.h"
   $525 = (($524) + 4|0); //@line 561 "src/texttest/../other/stb_image_write.h"
   $526 = HEAP32[$525>>2]|0; //@line 561 "src/texttest/../other/stb_image_write.h"
   $527 = (($526) + 1)|0; //@line 561 "src/texttest/../other/stb_image_write.h"
   $528 = HEAP32[$out>>2]|0; //@line 561 "src/texttest/../other/stb_image_write.h"
   $529 = (($528) + -8|0); //@line 561 "src/texttest/../other/stb_image_write.h"
   $530 = HEAP32[$529>>2]|0; //@line 561 "src/texttest/../other/stb_image_write.h"
   $531 = ($527|0)>=($530|0); //@line 561 "src/texttest/../other/stb_image_write.h"
   if ($531) {
    label = 105;
   } else {
   }
  }
  if ((label|0) == 105) {
   (_stbiw__sbgrowf($out,1,1)|0); //@line 561 "src/texttest/../other/stb_image_write.h"
  }
  $532 = $s2; //@line 561 "src/texttest/../other/stb_image_write.h"
  $533 = $532 >>> 8; //@line 561 "src/texttest/../other/stb_image_write.h"
  $534 = $533&255; //@line 561 "src/texttest/../other/stb_image_write.h"
  $535 = HEAP32[$out>>2]|0; //@line 561 "src/texttest/../other/stb_image_write.h"
  $536 = (($535) + -8|0); //@line 561 "src/texttest/../other/stb_image_write.h"
  $537 = (($536) + 4|0); //@line 561 "src/texttest/../other/stb_image_write.h"
  $538 = HEAP32[$537>>2]|0; //@line 561 "src/texttest/../other/stb_image_write.h"
  $539 = (($538) + 1)|0; //@line 561 "src/texttest/../other/stb_image_write.h"
  HEAP32[$537>>2] = $539; //@line 561 "src/texttest/../other/stb_image_write.h"
  $540 = HEAP32[$out>>2]|0; //@line 561 "src/texttest/../other/stb_image_write.h"
  $541 = (($540) + ($538)|0); //@line 561 "src/texttest/../other/stb_image_write.h"
  HEAP8[$541>>0] = $534; //@line 561 "src/texttest/../other/stb_image_write.h"
  $542 = HEAP32[$out>>2]|0; //@line 562 "src/texttest/../other/stb_image_write.h"
  $543 = ($542|0)==(0|0); //@line 562 "src/texttest/../other/stb_image_write.h"
  if ($543) {
   label = 109;
  } else {
   $544 = HEAP32[$out>>2]|0; //@line 562 "src/texttest/../other/stb_image_write.h"
   $545 = (($544) + -8|0); //@line 562 "src/texttest/../other/stb_image_write.h"
   $546 = (($545) + 4|0); //@line 562 "src/texttest/../other/stb_image_write.h"
   $547 = HEAP32[$546>>2]|0; //@line 562 "src/texttest/../other/stb_image_write.h"
   $548 = (($547) + 1)|0; //@line 562 "src/texttest/../other/stb_image_write.h"
   $549 = HEAP32[$out>>2]|0; //@line 562 "src/texttest/../other/stb_image_write.h"
   $550 = (($549) + -8|0); //@line 562 "src/texttest/../other/stb_image_write.h"
   $551 = HEAP32[$550>>2]|0; //@line 562 "src/texttest/../other/stb_image_write.h"
   $552 = ($548|0)>=($551|0); //@line 562 "src/texttest/../other/stb_image_write.h"
   if ($552) {
    label = 109;
   } else {
   }
  }
  if ((label|0) == 109) {
   (_stbiw__sbgrowf($out,1,1)|0); //@line 562 "src/texttest/../other/stb_image_write.h"
  }
  $553 = $s2; //@line 562 "src/texttest/../other/stb_image_write.h"
  $554 = $553&255; //@line 562 "src/texttest/../other/stb_image_write.h"
  $555 = HEAP32[$out>>2]|0; //@line 562 "src/texttest/../other/stb_image_write.h"
  $556 = (($555) + -8|0); //@line 562 "src/texttest/../other/stb_image_write.h"
  $557 = (($556) + 4|0); //@line 562 "src/texttest/../other/stb_image_write.h"
  $558 = HEAP32[$557>>2]|0; //@line 562 "src/texttest/../other/stb_image_write.h"
  $559 = (($558) + 1)|0; //@line 562 "src/texttest/../other/stb_image_write.h"
  HEAP32[$557>>2] = $559; //@line 562 "src/texttest/../other/stb_image_write.h"
  $560 = HEAP32[$out>>2]|0; //@line 562 "src/texttest/../other/stb_image_write.h"
  $561 = (($560) + ($558)|0); //@line 562 "src/texttest/../other/stb_image_write.h"
  HEAP8[$561>>0] = $554; //@line 562 "src/texttest/../other/stb_image_write.h"
  $562 = HEAP32[$out>>2]|0; //@line 563 "src/texttest/../other/stb_image_write.h"
  $563 = ($562|0)==(0|0); //@line 563 "src/texttest/../other/stb_image_write.h"
  if ($563) {
   label = 113;
  } else {
   $564 = HEAP32[$out>>2]|0; //@line 563 "src/texttest/../other/stb_image_write.h"
   $565 = (($564) + -8|0); //@line 563 "src/texttest/../other/stb_image_write.h"
   $566 = (($565) + 4|0); //@line 563 "src/texttest/../other/stb_image_write.h"
   $567 = HEAP32[$566>>2]|0; //@line 563 "src/texttest/../other/stb_image_write.h"
   $568 = (($567) + 1)|0; //@line 563 "src/texttest/../other/stb_image_write.h"
   $569 = HEAP32[$out>>2]|0; //@line 563 "src/texttest/../other/stb_image_write.h"
   $570 = (($569) + -8|0); //@line 563 "src/texttest/../other/stb_image_write.h"
   $571 = HEAP32[$570>>2]|0; //@line 563 "src/texttest/../other/stb_image_write.h"
   $572 = ($568|0)>=($571|0); //@line 563 "src/texttest/../other/stb_image_write.h"
   if ($572) {
    label = 113;
   } else {
   }
  }
  if ((label|0) == 113) {
   (_stbiw__sbgrowf($out,1,1)|0); //@line 563 "src/texttest/../other/stb_image_write.h"
  }
  $573 = $s1; //@line 563 "src/texttest/../other/stb_image_write.h"
  $574 = $573 >>> 8; //@line 563 "src/texttest/../other/stb_image_write.h"
  $575 = $574&255; //@line 563 "src/texttest/../other/stb_image_write.h"
  $576 = HEAP32[$out>>2]|0; //@line 563 "src/texttest/../other/stb_image_write.h"
  $577 = (($576) + -8|0); //@line 563 "src/texttest/../other/stb_image_write.h"
  $578 = (($577) + 4|0); //@line 563 "src/texttest/../other/stb_image_write.h"
  $579 = HEAP32[$578>>2]|0; //@line 563 "src/texttest/../other/stb_image_write.h"
  $580 = (($579) + 1)|0; //@line 563 "src/texttest/../other/stb_image_write.h"
  HEAP32[$578>>2] = $580; //@line 563 "src/texttest/../other/stb_image_write.h"
  $581 = HEAP32[$out>>2]|0; //@line 563 "src/texttest/../other/stb_image_write.h"
  $582 = (($581) + ($579)|0); //@line 563 "src/texttest/../other/stb_image_write.h"
  HEAP8[$582>>0] = $575; //@line 563 "src/texttest/../other/stb_image_write.h"
  $583 = HEAP32[$out>>2]|0; //@line 564 "src/texttest/../other/stb_image_write.h"
  $584 = ($583|0)==(0|0); //@line 564 "src/texttest/../other/stb_image_write.h"
  if (!($584)) {
   $585 = HEAP32[$out>>2]|0; //@line 564 "src/texttest/../other/stb_image_write.h"
   $586 = (($585) + -8|0); //@line 564 "src/texttest/../other/stb_image_write.h"
   $587 = (($586) + 4|0); //@line 564 "src/texttest/../other/stb_image_write.h"
   $588 = HEAP32[$587>>2]|0; //@line 564 "src/texttest/../other/stb_image_write.h"
   $589 = (($588) + 1)|0; //@line 564 "src/texttest/../other/stb_image_write.h"
   $590 = HEAP32[$out>>2]|0; //@line 564 "src/texttest/../other/stb_image_write.h"
   $591 = (($590) + -8|0); //@line 564 "src/texttest/../other/stb_image_write.h"
   $592 = HEAP32[$591>>2]|0; //@line 564 "src/texttest/../other/stb_image_write.h"
   $593 = ($589|0)>=($592|0); //@line 564 "src/texttest/../other/stb_image_write.h"
   if (!($593)) {
    $594 = $s1; //@line 564 "src/texttest/../other/stb_image_write.h"
    $595 = $594&255; //@line 564 "src/texttest/../other/stb_image_write.h"
    $596 = HEAP32[$out>>2]|0; //@line 564 "src/texttest/../other/stb_image_write.h"
    $597 = (($596) + -8|0); //@line 564 "src/texttest/../other/stb_image_write.h"
    $598 = (($597) + 4|0); //@line 564 "src/texttest/../other/stb_image_write.h"
    $599 = HEAP32[$598>>2]|0; //@line 564 "src/texttest/../other/stb_image_write.h"
    $600 = (($599) + 1)|0; //@line 564 "src/texttest/../other/stb_image_write.h"
    HEAP32[$598>>2] = $600; //@line 564 "src/texttest/../other/stb_image_write.h"
    $601 = HEAP32[$out>>2]|0; //@line 564 "src/texttest/../other/stb_image_write.h"
    $602 = (($601) + ($599)|0); //@line 564 "src/texttest/../other/stb_image_write.h"
    HEAP8[$602>>0] = $595; //@line 564 "src/texttest/../other/stb_image_write.h"
    $603 = HEAP32[$out>>2]|0; //@line 566 "src/texttest/../other/stb_image_write.h"
    $604 = (($603) + -8|0); //@line 566 "src/texttest/../other/stb_image_write.h"
    $605 = (($604) + 4|0); //@line 566 "src/texttest/../other/stb_image_write.h"
    $606 = HEAP32[$605>>2]|0; //@line 566 "src/texttest/../other/stb_image_write.h"
    $607 = $2; //@line 566 "src/texttest/../other/stb_image_write.h"
    HEAP32[$607>>2] = $606; //@line 566 "src/texttest/../other/stb_image_write.h"
    $608 = HEAP32[$out>>2]|0; //@line 568 "src/texttest/../other/stb_image_write.h"
    $609 = (($608) + -8|0); //@line 568 "src/texttest/../other/stb_image_write.h"
    $610 = HEAP32[$out>>2]|0; //@line 568 "src/texttest/../other/stb_image_write.h"
    $611 = $2; //@line 568 "src/texttest/../other/stb_image_write.h"
    $612 = HEAP32[$611>>2]|0; //@line 568 "src/texttest/../other/stb_image_write.h"
    _memmove(($609|0),($610|0),($612|0))|0; //@line 568 "src/texttest/../other/stb_image_write.h"
    $613 = HEAP32[$out>>2]|0; //@line 569 "src/texttest/../other/stb_image_write.h"
    $614 = (($613) + -8|0); //@line 569 "src/texttest/../other/stb_image_write.h"
    STACKTOP = sp;return ($614|0); //@line 569 "src/texttest/../other/stb_image_write.h"
   }
  }
  (_stbiw__sbgrowf($out,1,1)|0); //@line 564 "src/texttest/../other/stb_image_write.h"
  $594 = $s1; //@line 564 "src/texttest/../other/stb_image_write.h"
  $595 = $594&255; //@line 564 "src/texttest/../other/stb_image_write.h"
  $596 = HEAP32[$out>>2]|0; //@line 564 "src/texttest/../other/stb_image_write.h"
  $597 = (($596) + -8|0); //@line 564 "src/texttest/../other/stb_image_write.h"
  $598 = (($597) + 4|0); //@line 564 "src/texttest/../other/stb_image_write.h"
  $599 = HEAP32[$598>>2]|0; //@line 564 "src/texttest/../other/stb_image_write.h"
  $600 = (($599) + 1)|0; //@line 564 "src/texttest/../other/stb_image_write.h"
  HEAP32[$598>>2] = $600; //@line 564 "src/texttest/../other/stb_image_write.h"
  $601 = HEAP32[$out>>2]|0; //@line 564 "src/texttest/../other/stb_image_write.h"
  $602 = (($601) + ($599)|0); //@line 564 "src/texttest/../other/stb_image_write.h"
  HEAP8[$602>>0] = $595; //@line 564 "src/texttest/../other/stb_image_write.h"
  $603 = HEAP32[$out>>2]|0; //@line 566 "src/texttest/../other/stb_image_write.h"
  $604 = (($603) + -8|0); //@line 566 "src/texttest/../other/stb_image_write.h"
  $605 = (($604) + 4|0); //@line 566 "src/texttest/../other/stb_image_write.h"
  $606 = HEAP32[$605>>2]|0; //@line 566 "src/texttest/../other/stb_image_write.h"
  $607 = $2; //@line 566 "src/texttest/../other/stb_image_write.h"
  HEAP32[$607>>2] = $606; //@line 566 "src/texttest/../other/stb_image_write.h"
  $608 = HEAP32[$out>>2]|0; //@line 568 "src/texttest/../other/stb_image_write.h"
  $609 = (($608) + -8|0); //@line 568 "src/texttest/../other/stb_image_write.h"
  $610 = HEAP32[$out>>2]|0; //@line 568 "src/texttest/../other/stb_image_write.h"
  $611 = $2; //@line 568 "src/texttest/../other/stb_image_write.h"
  $612 = HEAP32[$611>>2]|0; //@line 568 "src/texttest/../other/stb_image_write.h"
  _memmove(($609|0),($610|0),($612|0))|0; //@line 568 "src/texttest/../other/stb_image_write.h"
  $613 = HEAP32[$out>>2]|0; //@line 569 "src/texttest/../other/stb_image_write.h"
  $614 = (($613) + -8|0); //@line 569 "src/texttest/../other/stb_image_write.h"
  STACKTOP = sp;return ($614|0); //@line 569 "src/texttest/../other/stb_image_write.h"
 }
 return (0)|0;
}
function _stbiw__crc32($buffer,$len) {
 $buffer = $buffer|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $crc = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buffer;
 $1 = $len;
 $crc = -1; //@line 575 "src/texttest/../other/stb_image_write.h"
 $2 = HEAP32[((344 + 4|0))>>2]|0; //@line 577 "src/texttest/../other/stb_image_write.h"
 $3 = ($2|0)==(0); //@line 577 "src/texttest/../other/stb_image_write.h"
 if ($3) {
  $i = 0; //@line 578 "src/texttest/../other/stb_image_write.h"
  while(1) {
   $4 = $i; //@line 578 "src/texttest/../other/stb_image_write.h"
   $5 = ($4|0)<(256); //@line 578 "src/texttest/../other/stb_image_write.h"
   if (!($5)) {
    break;
   }
   $6 = $i; //@line 579 "src/texttest/../other/stb_image_write.h"
   $7 = $i; //@line 579 "src/texttest/../other/stb_image_write.h"
   $8 = (344 + ($7<<2)|0); //@line 579 "src/texttest/../other/stb_image_write.h"
   HEAP32[$8>>2] = $6; //@line 579 "src/texttest/../other/stb_image_write.h"
   $j = 0; //@line 579 "src/texttest/../other/stb_image_write.h"
   while(1) {
    $9 = $j; //@line 579 "src/texttest/../other/stb_image_write.h"
    $10 = ($9|0)<(8); //@line 579 "src/texttest/../other/stb_image_write.h"
    if (!($10)) {
     break;
    }
    $11 = $i; //@line 580 "src/texttest/../other/stb_image_write.h"
    $12 = (344 + ($11<<2)|0); //@line 580 "src/texttest/../other/stb_image_write.h"
    $13 = HEAP32[$12>>2]|0; //@line 580 "src/texttest/../other/stb_image_write.h"
    $14 = $13 >>> 1; //@line 580 "src/texttest/../other/stb_image_write.h"
    $15 = $i; //@line 580 "src/texttest/../other/stb_image_write.h"
    $16 = (344 + ($15<<2)|0); //@line 580 "src/texttest/../other/stb_image_write.h"
    $17 = HEAP32[$16>>2]|0; //@line 580 "src/texttest/../other/stb_image_write.h"
    $18 = $17 & 1; //@line 580 "src/texttest/../other/stb_image_write.h"
    $19 = ($18|0)!=(0); //@line 580 "src/texttest/../other/stb_image_write.h"
    $20 = $19 ? -306674912 : 0; //@line 580 "src/texttest/../other/stb_image_write.h"
    $21 = $14 ^ $20; //@line 580 "src/texttest/../other/stb_image_write.h"
    $22 = $i; //@line 580 "src/texttest/../other/stb_image_write.h"
    $23 = (344 + ($22<<2)|0); //@line 580 "src/texttest/../other/stb_image_write.h"
    HEAP32[$23>>2] = $21; //@line 580 "src/texttest/../other/stb_image_write.h"
    $24 = $j; //@line 579 "src/texttest/../other/stb_image_write.h"
    $25 = (($24) + 1)|0; //@line 579 "src/texttest/../other/stb_image_write.h"
    $j = $25; //@line 579 "src/texttest/../other/stb_image_write.h"
   }
   $26 = $i; //@line 578 "src/texttest/../other/stb_image_write.h"
   $27 = (($26) + 1)|0; //@line 578 "src/texttest/../other/stb_image_write.h"
   $i = $27; //@line 578 "src/texttest/../other/stb_image_write.h"
  }
 }
 $i = 0; //@line 581 "src/texttest/../other/stb_image_write.h"
 while(1) {
  $28 = $i; //@line 581 "src/texttest/../other/stb_image_write.h"
  $29 = $1; //@line 581 "src/texttest/../other/stb_image_write.h"
  $30 = ($28|0)<($29|0); //@line 581 "src/texttest/../other/stb_image_write.h"
  if (!($30)) {
   break;
  }
  $31 = $crc; //@line 582 "src/texttest/../other/stb_image_write.h"
  $32 = $31 >>> 8; //@line 582 "src/texttest/../other/stb_image_write.h"
  $33 = $i; //@line 582 "src/texttest/../other/stb_image_write.h"
  $34 = $0; //@line 582 "src/texttest/../other/stb_image_write.h"
  $35 = (($34) + ($33)|0); //@line 582 "src/texttest/../other/stb_image_write.h"
  $36 = HEAP8[$35>>0]|0; //@line 582 "src/texttest/../other/stb_image_write.h"
  $37 = $36&255; //@line 582 "src/texttest/../other/stb_image_write.h"
  $38 = $crc; //@line 582 "src/texttest/../other/stb_image_write.h"
  $39 = $38 & 255; //@line 582 "src/texttest/../other/stb_image_write.h"
  $40 = $37 ^ $39; //@line 582 "src/texttest/../other/stb_image_write.h"
  $41 = (344 + ($40<<2)|0); //@line 582 "src/texttest/../other/stb_image_write.h"
  $42 = HEAP32[$41>>2]|0; //@line 582 "src/texttest/../other/stb_image_write.h"
  $43 = $32 ^ $42; //@line 582 "src/texttest/../other/stb_image_write.h"
  $crc = $43; //@line 582 "src/texttest/../other/stb_image_write.h"
  $44 = $i; //@line 581 "src/texttest/../other/stb_image_write.h"
  $45 = (($44) + 1)|0; //@line 581 "src/texttest/../other/stb_image_write.h"
  $i = $45; //@line 581 "src/texttest/../other/stb_image_write.h"
 }
 $46 = $crc; //@line 583 "src/texttest/../other/stb_image_write.h"
 $47 = $46 ^ -1; //@line 583 "src/texttest/../other/stb_image_write.h"
 STACKTOP = sp;return ($47|0); //@line 583 "src/texttest/../other/stb_image_write.h"
}
function _stbi_write_png_to_mem($pixels,$stride_bytes,$x,$y,$n,$out_len) {
 $pixels = $pixels|0;
 $stride_bytes = $stride_bytes|0;
 $x = $x|0;
 $y = $y|0;
 $n = $n|0;
 $out_len = $out_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $best = 0, $bestval = 0, $ctype = 0, $est = 0, $filt = 0, $i = 0, $j = 0, $k = 0, $line_buffer = 0;
 var $mymap = 0, $o = 0, $out = 0, $p = 0, $sig = 0, $type = 0, $z = 0, $zlen = 0, $zlib = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ctype = sp + 64|0;
 $sig = sp + 112|0;
 $o = sp + 56|0;
 $zlen = sp + 24|0;
 $1 = $pixels;
 $2 = $stride_bytes;
 $3 = $x;
 $4 = $y;
 $5 = $n;
 $6 = $out_len;
 ;HEAP32[$ctype+0>>2]=HEAP32[1368+0>>2]|0;HEAP32[$ctype+4>>2]=HEAP32[1368+4>>2]|0;HEAP32[$ctype+8>>2]=HEAP32[1368+8>>2]|0;HEAP32[$ctype+12>>2]=HEAP32[1368+12>>2]|0;HEAP32[$ctype+16>>2]=HEAP32[1368+16>>2]|0; //@line 606 "src/texttest/../other/stb_image_write.h"
 ;HEAP8[$sig+0>>0]=HEAP8[1392+0>>0]|0;HEAP8[$sig+1>>0]=HEAP8[1392+1>>0]|0;HEAP8[$sig+2>>0]=HEAP8[1392+2>>0]|0;HEAP8[$sig+3>>0]=HEAP8[1392+3>>0]|0;HEAP8[$sig+4>>0]=HEAP8[1392+4>>0]|0;HEAP8[$sig+5>>0]=HEAP8[1392+5>>0]|0;HEAP8[$sig+6>>0]=HEAP8[1392+6>>0]|0;HEAP8[$sig+7>>0]=HEAP8[1392+7>>0]|0; //@line 607 "src/texttest/../other/stb_image_write.h"
 $7 = $2; //@line 612 "src/texttest/../other/stb_image_write.h"
 $8 = ($7|0)==(0); //@line 612 "src/texttest/../other/stb_image_write.h"
 if ($8) {
  $9 = $3; //@line 613 "src/texttest/../other/stb_image_write.h"
  $10 = $5; //@line 613 "src/texttest/../other/stb_image_write.h"
  $11 = Math_imul($9, $10)|0; //@line 613 "src/texttest/../other/stb_image_write.h"
  $2 = $11; //@line 613 "src/texttest/../other/stb_image_write.h"
 }
 $12 = $3; //@line 615 "src/texttest/../other/stb_image_write.h"
 $13 = $5; //@line 615 "src/texttest/../other/stb_image_write.h"
 $14 = Math_imul($12, $13)|0; //@line 615 "src/texttest/../other/stb_image_write.h"
 $15 = (($14) + 1)|0; //@line 615 "src/texttest/../other/stb_image_write.h"
 $16 = $4; //@line 615 "src/texttest/../other/stb_image_write.h"
 $17 = Math_imul($15, $16)|0; //@line 615 "src/texttest/../other/stb_image_write.h"
 $18 = (_malloc($17)|0); //@line 615 "src/texttest/../other/stb_image_write.h"
 $filt = $18; //@line 615 "src/texttest/../other/stb_image_write.h"
 $19 = $filt; //@line 615 "src/texttest/../other/stb_image_write.h"
 $20 = ($19|0)!=(0|0); //@line 615 "src/texttest/../other/stb_image_write.h"
 if (!($20)) {
  $0 = 0; //@line 615 "src/texttest/../other/stb_image_write.h"
  $510 = $0; //@line 694 "src/texttest/../other/stb_image_write.h"
  STACKTOP = sp;return ($510|0); //@line 694 "src/texttest/../other/stb_image_write.h"
 }
 $21 = $3; //@line 616 "src/texttest/../other/stb_image_write.h"
 $22 = $5; //@line 616 "src/texttest/../other/stb_image_write.h"
 $23 = Math_imul($21, $22)|0; //@line 616 "src/texttest/../other/stb_image_write.h"
 $24 = (_malloc($23)|0); //@line 616 "src/texttest/../other/stb_image_write.h"
 $line_buffer = $24; //@line 616 "src/texttest/../other/stb_image_write.h"
 $25 = $line_buffer; //@line 616 "src/texttest/../other/stb_image_write.h"
 $26 = ($25|0)!=(0|0); //@line 616 "src/texttest/../other/stb_image_write.h"
 if (!($26)) {
  $27 = $filt; //@line 616 "src/texttest/../other/stb_image_write.h"
  _free($27); //@line 616 "src/texttest/../other/stb_image_write.h"
  $0 = 0; //@line 616 "src/texttest/../other/stb_image_write.h"
  $510 = $0; //@line 694 "src/texttest/../other/stb_image_write.h"
  STACKTOP = sp;return ($510|0); //@line 694 "src/texttest/../other/stb_image_write.h"
 }
 $j = 0; //@line 617 "src/texttest/../other/stb_image_write.h"
 while(1) {
  $28 = $j; //@line 617 "src/texttest/../other/stb_image_write.h"
  $29 = $4; //@line 617 "src/texttest/../other/stb_image_write.h"
  $30 = ($28|0)<($29|0); //@line 617 "src/texttest/../other/stb_image_write.h"
  if (!($30)) {
   break;
  }
  $31 = $j; //@line 620 "src/texttest/../other/stb_image_write.h"
  $32 = ($31|0)!=(0); //@line 620 "src/texttest/../other/stb_image_write.h"
  $33 = $32 ? 1400 : 1424; //@line 620 "src/texttest/../other/stb_image_write.h"
  $mymap = $33; //@line 620 "src/texttest/../other/stb_image_write.h"
  $best = 0; //@line 621 "src/texttest/../other/stb_image_write.h"
  $bestval = 2147483647; //@line 621 "src/texttest/../other/stb_image_write.h"
  $p = 0; //@line 622 "src/texttest/../other/stb_image_write.h"
  while(1) {
   $34 = $p; //@line 622 "src/texttest/../other/stb_image_write.h"
   $35 = ($34|0)<(2); //@line 622 "src/texttest/../other/stb_image_write.h"
   if (!($35)) {
    break;
   }
   $36 = $p; //@line 623 "src/texttest/../other/stb_image_write.h"
   $37 = ($36|0)!=(0); //@line 623 "src/texttest/../other/stb_image_write.h"
   if ($37) {
    $38 = $best; //@line 623 "src/texttest/../other/stb_image_write.h"
    $39 = $38;
   } else {
    $39 = 0;
   }
   $k = $39; //@line 623 "src/texttest/../other/stb_image_write.h"
   while(1) {
    $40 = $k; //@line 623 "src/texttest/../other/stb_image_write.h"
    $41 = ($40|0)<(5); //@line 623 "src/texttest/../other/stb_image_write.h"
    if (!($41)) {
     break;
    }
    $42 = $k; //@line 624 "src/texttest/../other/stb_image_write.h"
    $43 = $mymap; //@line 624 "src/texttest/../other/stb_image_write.h"
    $44 = (($43) + ($42<<2)|0); //@line 624 "src/texttest/../other/stb_image_write.h"
    $45 = HEAP32[$44>>2]|0; //@line 624 "src/texttest/../other/stb_image_write.h"
    $type = $45; //@line 624 "src/texttest/../other/stb_image_write.h"
    $est = 0; //@line 624 "src/texttest/../other/stb_image_write.h"
    $46 = $1; //@line 625 "src/texttest/../other/stb_image_write.h"
    $47 = $2; //@line 625 "src/texttest/../other/stb_image_write.h"
    $48 = $j; //@line 625 "src/texttest/../other/stb_image_write.h"
    $49 = Math_imul($47, $48)|0; //@line 625 "src/texttest/../other/stb_image_write.h"
    $50 = (($46) + ($49)|0); //@line 625 "src/texttest/../other/stb_image_write.h"
    $z = $50; //@line 625 "src/texttest/../other/stb_image_write.h"
    $i = 0; //@line 626 "src/texttest/../other/stb_image_write.h"
    while(1) {
     $51 = $i; //@line 626 "src/texttest/../other/stb_image_write.h"
     $52 = $5; //@line 626 "src/texttest/../other/stb_image_write.h"
     $53 = ($51|0)<($52|0); //@line 626 "src/texttest/../other/stb_image_write.h"
     if (!($53)) {
      break;
     }
     $54 = $type; //@line 627 "src/texttest/../other/stb_image_write.h"
     switch ($54|0) {
     case 6:  {
      $130 = $i; //@line 634 "src/texttest/../other/stb_image_write.h"
      $131 = $z; //@line 634 "src/texttest/../other/stb_image_write.h"
      $132 = (($131) + ($130)|0); //@line 634 "src/texttest/../other/stb_image_write.h"
      $133 = HEAP8[$132>>0]|0; //@line 634 "src/texttest/../other/stb_image_write.h"
      $134 = $i; //@line 634 "src/texttest/../other/stb_image_write.h"
      $135 = $line_buffer; //@line 634 "src/texttest/../other/stb_image_write.h"
      $136 = (($135) + ($134)|0); //@line 634 "src/texttest/../other/stb_image_write.h"
      HEAP8[$136>>0] = $133; //@line 634 "src/texttest/../other/stb_image_write.h"
      break;
     }
     case 2:  {
      $69 = $i; //@line 630 "src/texttest/../other/stb_image_write.h"
      $70 = $z; //@line 630 "src/texttest/../other/stb_image_write.h"
      $71 = (($70) + ($69)|0); //@line 630 "src/texttest/../other/stb_image_write.h"
      $72 = HEAP8[$71>>0]|0; //@line 630 "src/texttest/../other/stb_image_write.h"
      $73 = $72&255; //@line 630 "src/texttest/../other/stb_image_write.h"
      $74 = $i; //@line 630 "src/texttest/../other/stb_image_write.h"
      $75 = $2; //@line 630 "src/texttest/../other/stb_image_write.h"
      $76 = (($74) - ($75))|0; //@line 630 "src/texttest/../other/stb_image_write.h"
      $77 = $z; //@line 630 "src/texttest/../other/stb_image_write.h"
      $78 = (($77) + ($76)|0); //@line 630 "src/texttest/../other/stb_image_write.h"
      $79 = HEAP8[$78>>0]|0; //@line 630 "src/texttest/../other/stb_image_write.h"
      $80 = $79&255; //@line 630 "src/texttest/../other/stb_image_write.h"
      $81 = (($73) - ($80))|0; //@line 630 "src/texttest/../other/stb_image_write.h"
      $82 = $81&255; //@line 630 "src/texttest/../other/stb_image_write.h"
      $83 = $i; //@line 630 "src/texttest/../other/stb_image_write.h"
      $84 = $line_buffer; //@line 630 "src/texttest/../other/stb_image_write.h"
      $85 = (($84) + ($83)|0); //@line 630 "src/texttest/../other/stb_image_write.h"
      HEAP8[$85>>0] = $82; //@line 630 "src/texttest/../other/stb_image_write.h"
      break;
     }
     case 0:  {
      $55 = $i; //@line 628 "src/texttest/../other/stb_image_write.h"
      $56 = $z; //@line 628 "src/texttest/../other/stb_image_write.h"
      $57 = (($56) + ($55)|0); //@line 628 "src/texttest/../other/stb_image_write.h"
      $58 = HEAP8[$57>>0]|0; //@line 628 "src/texttest/../other/stb_image_write.h"
      $59 = $i; //@line 628 "src/texttest/../other/stb_image_write.h"
      $60 = $line_buffer; //@line 628 "src/texttest/../other/stb_image_write.h"
      $61 = (($60) + ($59)|0); //@line 628 "src/texttest/../other/stb_image_write.h"
      HEAP8[$61>>0] = $58; //@line 628 "src/texttest/../other/stb_image_write.h"
      break;
     }
     case 5:  {
      $123 = $i; //@line 633 "src/texttest/../other/stb_image_write.h"
      $124 = $z; //@line 633 "src/texttest/../other/stb_image_write.h"
      $125 = (($124) + ($123)|0); //@line 633 "src/texttest/../other/stb_image_write.h"
      $126 = HEAP8[$125>>0]|0; //@line 633 "src/texttest/../other/stb_image_write.h"
      $127 = $i; //@line 633 "src/texttest/../other/stb_image_write.h"
      $128 = $line_buffer; //@line 633 "src/texttest/../other/stb_image_write.h"
      $129 = (($128) + ($127)|0); //@line 633 "src/texttest/../other/stb_image_write.h"
      HEAP8[$129>>0] = $126; //@line 633 "src/texttest/../other/stb_image_write.h"
      break;
     }
     case 3:  {
      $86 = $i; //@line 631 "src/texttest/../other/stb_image_write.h"
      $87 = $z; //@line 631 "src/texttest/../other/stb_image_write.h"
      $88 = (($87) + ($86)|0); //@line 631 "src/texttest/../other/stb_image_write.h"
      $89 = HEAP8[$88>>0]|0; //@line 631 "src/texttest/../other/stb_image_write.h"
      $90 = $89&255; //@line 631 "src/texttest/../other/stb_image_write.h"
      $91 = $i; //@line 631 "src/texttest/../other/stb_image_write.h"
      $92 = $2; //@line 631 "src/texttest/../other/stb_image_write.h"
      $93 = (($91) - ($92))|0; //@line 631 "src/texttest/../other/stb_image_write.h"
      $94 = $z; //@line 631 "src/texttest/../other/stb_image_write.h"
      $95 = (($94) + ($93)|0); //@line 631 "src/texttest/../other/stb_image_write.h"
      $96 = HEAP8[$95>>0]|0; //@line 631 "src/texttest/../other/stb_image_write.h"
      $97 = $96&255; //@line 631 "src/texttest/../other/stb_image_write.h"
      $98 = $97 >> 1; //@line 631 "src/texttest/../other/stb_image_write.h"
      $99 = (($90) - ($98))|0; //@line 631 "src/texttest/../other/stb_image_write.h"
      $100 = $99&255; //@line 631 "src/texttest/../other/stb_image_write.h"
      $101 = $i; //@line 631 "src/texttest/../other/stb_image_write.h"
      $102 = $line_buffer; //@line 631 "src/texttest/../other/stb_image_write.h"
      $103 = (($102) + ($101)|0); //@line 631 "src/texttest/../other/stb_image_write.h"
      HEAP8[$103>>0] = $100; //@line 631 "src/texttest/../other/stb_image_write.h"
      break;
     }
     case 1:  {
      $62 = $i; //@line 629 "src/texttest/../other/stb_image_write.h"
      $63 = $z; //@line 629 "src/texttest/../other/stb_image_write.h"
      $64 = (($63) + ($62)|0); //@line 629 "src/texttest/../other/stb_image_write.h"
      $65 = HEAP8[$64>>0]|0; //@line 629 "src/texttest/../other/stb_image_write.h"
      $66 = $i; //@line 629 "src/texttest/../other/stb_image_write.h"
      $67 = $line_buffer; //@line 629 "src/texttest/../other/stb_image_write.h"
      $68 = (($67) + ($66)|0); //@line 629 "src/texttest/../other/stb_image_write.h"
      HEAP8[$68>>0] = $65; //@line 629 "src/texttest/../other/stb_image_write.h"
      break;
     }
     case 4:  {
      $104 = $i; //@line 632 "src/texttest/../other/stb_image_write.h"
      $105 = $z; //@line 632 "src/texttest/../other/stb_image_write.h"
      $106 = (($105) + ($104)|0); //@line 632 "src/texttest/../other/stb_image_write.h"
      $107 = HEAP8[$106>>0]|0; //@line 632 "src/texttest/../other/stb_image_write.h"
      $108 = $107&255; //@line 632 "src/texttest/../other/stb_image_write.h"
      $109 = $i; //@line 632 "src/texttest/../other/stb_image_write.h"
      $110 = $2; //@line 632 "src/texttest/../other/stb_image_write.h"
      $111 = (($109) - ($110))|0; //@line 632 "src/texttest/../other/stb_image_write.h"
      $112 = $z; //@line 632 "src/texttest/../other/stb_image_write.h"
      $113 = (($112) + ($111)|0); //@line 632 "src/texttest/../other/stb_image_write.h"
      $114 = HEAP8[$113>>0]|0; //@line 632 "src/texttest/../other/stb_image_write.h"
      $115 = $114&255; //@line 632 "src/texttest/../other/stb_image_write.h"
      $116 = (_stbiw__paeth(0,$115,0)|0); //@line 632 "src/texttest/../other/stb_image_write.h"
      $117 = $116&255; //@line 632 "src/texttest/../other/stb_image_write.h"
      $118 = (($108) - ($117))|0; //@line 632 "src/texttest/../other/stb_image_write.h"
      $119 = $118&255; //@line 632 "src/texttest/../other/stb_image_write.h"
      $120 = $i; //@line 632 "src/texttest/../other/stb_image_write.h"
      $121 = $line_buffer; //@line 632 "src/texttest/../other/stb_image_write.h"
      $122 = (($121) + ($120)|0); //@line 632 "src/texttest/../other/stb_image_write.h"
      HEAP8[$122>>0] = $119; //@line 632 "src/texttest/../other/stb_image_write.h"
      break;
     }
     default: {
     }
     }
     $137 = $i; //@line 626 "src/texttest/../other/stb_image_write.h"
     $138 = (($137) + 1)|0; //@line 626 "src/texttest/../other/stb_image_write.h"
     $i = $138; //@line 626 "src/texttest/../other/stb_image_write.h"
    }
    $139 = $5; //@line 636 "src/texttest/../other/stb_image_write.h"
    $i = $139; //@line 636 "src/texttest/../other/stb_image_write.h"
    while(1) {
     $140 = $i; //@line 636 "src/texttest/../other/stb_image_write.h"
     $141 = $3; //@line 636 "src/texttest/../other/stb_image_write.h"
     $142 = $5; //@line 636 "src/texttest/../other/stb_image_write.h"
     $143 = Math_imul($141, $142)|0; //@line 636 "src/texttest/../other/stb_image_write.h"
     $144 = ($140|0)<($143|0); //@line 636 "src/texttest/../other/stb_image_write.h"
     if (!($144)) {
      break;
     }
     $145 = $type; //@line 637 "src/texttest/../other/stb_image_write.h"
     switch ($145|0) {
     case 1:  {
      $153 = $i; //@line 639 "src/texttest/../other/stb_image_write.h"
      $154 = $z; //@line 639 "src/texttest/../other/stb_image_write.h"
      $155 = (($154) + ($153)|0); //@line 639 "src/texttest/../other/stb_image_write.h"
      $156 = HEAP8[$155>>0]|0; //@line 639 "src/texttest/../other/stb_image_write.h"
      $157 = $156&255; //@line 639 "src/texttest/../other/stb_image_write.h"
      $158 = $i; //@line 639 "src/texttest/../other/stb_image_write.h"
      $159 = $5; //@line 639 "src/texttest/../other/stb_image_write.h"
      $160 = (($158) - ($159))|0; //@line 639 "src/texttest/../other/stb_image_write.h"
      $161 = $z; //@line 639 "src/texttest/../other/stb_image_write.h"
      $162 = (($161) + ($160)|0); //@line 639 "src/texttest/../other/stb_image_write.h"
      $163 = HEAP8[$162>>0]|0; //@line 639 "src/texttest/../other/stb_image_write.h"
      $164 = $163&255; //@line 639 "src/texttest/../other/stb_image_write.h"
      $165 = (($157) - ($164))|0; //@line 639 "src/texttest/../other/stb_image_write.h"
      $166 = $165&255; //@line 639 "src/texttest/../other/stb_image_write.h"
      $167 = $i; //@line 639 "src/texttest/../other/stb_image_write.h"
      $168 = $line_buffer; //@line 639 "src/texttest/../other/stb_image_write.h"
      $169 = (($168) + ($167)|0); //@line 639 "src/texttest/../other/stb_image_write.h"
      HEAP8[$169>>0] = $166; //@line 639 "src/texttest/../other/stb_image_write.h"
      break;
     }
     case 6:  {
      $266 = $i; //@line 644 "src/texttest/../other/stb_image_write.h"
      $267 = $z; //@line 644 "src/texttest/../other/stb_image_write.h"
      $268 = (($267) + ($266)|0); //@line 644 "src/texttest/../other/stb_image_write.h"
      $269 = HEAP8[$268>>0]|0; //@line 644 "src/texttest/../other/stb_image_write.h"
      $270 = $269&255; //@line 644 "src/texttest/../other/stb_image_write.h"
      $271 = $i; //@line 644 "src/texttest/../other/stb_image_write.h"
      $272 = $5; //@line 644 "src/texttest/../other/stb_image_write.h"
      $273 = (($271) - ($272))|0; //@line 644 "src/texttest/../other/stb_image_write.h"
      $274 = $z; //@line 644 "src/texttest/../other/stb_image_write.h"
      $275 = (($274) + ($273)|0); //@line 644 "src/texttest/../other/stb_image_write.h"
      $276 = HEAP8[$275>>0]|0; //@line 644 "src/texttest/../other/stb_image_write.h"
      $277 = $276&255; //@line 644 "src/texttest/../other/stb_image_write.h"
      $278 = (_stbiw__paeth($277,0,0)|0); //@line 644 "src/texttest/../other/stb_image_write.h"
      $279 = $278&255; //@line 644 "src/texttest/../other/stb_image_write.h"
      $280 = (($270) - ($279))|0; //@line 644 "src/texttest/../other/stb_image_write.h"
      $281 = $280&255; //@line 644 "src/texttest/../other/stb_image_write.h"
      $282 = $i; //@line 644 "src/texttest/../other/stb_image_write.h"
      $283 = $line_buffer; //@line 644 "src/texttest/../other/stb_image_write.h"
      $284 = (($283) + ($282)|0); //@line 644 "src/texttest/../other/stb_image_write.h"
      HEAP8[$284>>0] = $281; //@line 644 "src/texttest/../other/stb_image_write.h"
      break;
     }
     case 2:  {
      $170 = $i; //@line 640 "src/texttest/../other/stb_image_write.h"
      $171 = $z; //@line 640 "src/texttest/../other/stb_image_write.h"
      $172 = (($171) + ($170)|0); //@line 640 "src/texttest/../other/stb_image_write.h"
      $173 = HEAP8[$172>>0]|0; //@line 640 "src/texttest/../other/stb_image_write.h"
      $174 = $173&255; //@line 640 "src/texttest/../other/stb_image_write.h"
      $175 = $i; //@line 640 "src/texttest/../other/stb_image_write.h"
      $176 = $2; //@line 640 "src/texttest/../other/stb_image_write.h"
      $177 = (($175) - ($176))|0; //@line 640 "src/texttest/../other/stb_image_write.h"
      $178 = $z; //@line 640 "src/texttest/../other/stb_image_write.h"
      $179 = (($178) + ($177)|0); //@line 640 "src/texttest/../other/stb_image_write.h"
      $180 = HEAP8[$179>>0]|0; //@line 640 "src/texttest/../other/stb_image_write.h"
      $181 = $180&255; //@line 640 "src/texttest/../other/stb_image_write.h"
      $182 = (($174) - ($181))|0; //@line 640 "src/texttest/../other/stb_image_write.h"
      $183 = $182&255; //@line 640 "src/texttest/../other/stb_image_write.h"
      $184 = $i; //@line 640 "src/texttest/../other/stb_image_write.h"
      $185 = $line_buffer; //@line 640 "src/texttest/../other/stb_image_write.h"
      $186 = (($185) + ($184)|0); //@line 640 "src/texttest/../other/stb_image_write.h"
      HEAP8[$186>>0] = $183; //@line 640 "src/texttest/../other/stb_image_write.h"
      break;
     }
     case 4:  {
      $213 = $i; //@line 642 "src/texttest/../other/stb_image_write.h"
      $214 = $z; //@line 642 "src/texttest/../other/stb_image_write.h"
      $215 = (($214) + ($213)|0); //@line 642 "src/texttest/../other/stb_image_write.h"
      $216 = HEAP8[$215>>0]|0; //@line 642 "src/texttest/../other/stb_image_write.h"
      $217 = $216&255; //@line 642 "src/texttest/../other/stb_image_write.h"
      $218 = $i; //@line 642 "src/texttest/../other/stb_image_write.h"
      $219 = $5; //@line 642 "src/texttest/../other/stb_image_write.h"
      $220 = (($218) - ($219))|0; //@line 642 "src/texttest/../other/stb_image_write.h"
      $221 = $z; //@line 642 "src/texttest/../other/stb_image_write.h"
      $222 = (($221) + ($220)|0); //@line 642 "src/texttest/../other/stb_image_write.h"
      $223 = HEAP8[$222>>0]|0; //@line 642 "src/texttest/../other/stb_image_write.h"
      $224 = $223&255; //@line 642 "src/texttest/../other/stb_image_write.h"
      $225 = $i; //@line 642 "src/texttest/../other/stb_image_write.h"
      $226 = $2; //@line 642 "src/texttest/../other/stb_image_write.h"
      $227 = (($225) - ($226))|0; //@line 642 "src/texttest/../other/stb_image_write.h"
      $228 = $z; //@line 642 "src/texttest/../other/stb_image_write.h"
      $229 = (($228) + ($227)|0); //@line 642 "src/texttest/../other/stb_image_write.h"
      $230 = HEAP8[$229>>0]|0; //@line 642 "src/texttest/../other/stb_image_write.h"
      $231 = $230&255; //@line 642 "src/texttest/../other/stb_image_write.h"
      $232 = $i; //@line 642 "src/texttest/../other/stb_image_write.h"
      $233 = $2; //@line 642 "src/texttest/../other/stb_image_write.h"
      $234 = (($232) - ($233))|0; //@line 642 "src/texttest/../other/stb_image_write.h"
      $235 = $5; //@line 642 "src/texttest/../other/stb_image_write.h"
      $236 = (($234) - ($235))|0; //@line 642 "src/texttest/../other/stb_image_write.h"
      $237 = $z; //@line 642 "src/texttest/../other/stb_image_write.h"
      $238 = (($237) + ($236)|0); //@line 642 "src/texttest/../other/stb_image_write.h"
      $239 = HEAP8[$238>>0]|0; //@line 642 "src/texttest/../other/stb_image_write.h"
      $240 = $239&255; //@line 642 "src/texttest/../other/stb_image_write.h"
      $241 = (_stbiw__paeth($224,$231,$240)|0); //@line 642 "src/texttest/../other/stb_image_write.h"
      $242 = $241&255; //@line 642 "src/texttest/../other/stb_image_write.h"
      $243 = (($217) - ($242))|0; //@line 642 "src/texttest/../other/stb_image_write.h"
      $244 = $243&255; //@line 642 "src/texttest/../other/stb_image_write.h"
      $245 = $i; //@line 642 "src/texttest/../other/stb_image_write.h"
      $246 = $line_buffer; //@line 642 "src/texttest/../other/stb_image_write.h"
      $247 = (($246) + ($245)|0); //@line 642 "src/texttest/../other/stb_image_write.h"
      HEAP8[$247>>0] = $244; //@line 642 "src/texttest/../other/stb_image_write.h"
      break;
     }
     case 3:  {
      $187 = $i; //@line 641 "src/texttest/../other/stb_image_write.h"
      $188 = $z; //@line 641 "src/texttest/../other/stb_image_write.h"
      $189 = (($188) + ($187)|0); //@line 641 "src/texttest/../other/stb_image_write.h"
      $190 = HEAP8[$189>>0]|0; //@line 641 "src/texttest/../other/stb_image_write.h"
      $191 = $190&255; //@line 641 "src/texttest/../other/stb_image_write.h"
      $192 = $i; //@line 641 "src/texttest/../other/stb_image_write.h"
      $193 = $5; //@line 641 "src/texttest/../other/stb_image_write.h"
      $194 = (($192) - ($193))|0; //@line 641 "src/texttest/../other/stb_image_write.h"
      $195 = $z; //@line 641 "src/texttest/../other/stb_image_write.h"
      $196 = (($195) + ($194)|0); //@line 641 "src/texttest/../other/stb_image_write.h"
      $197 = HEAP8[$196>>0]|0; //@line 641 "src/texttest/../other/stb_image_write.h"
      $198 = $197&255; //@line 641 "src/texttest/../other/stb_image_write.h"
      $199 = $i; //@line 641 "src/texttest/../other/stb_image_write.h"
      $200 = $2; //@line 641 "src/texttest/../other/stb_image_write.h"
      $201 = (($199) - ($200))|0; //@line 641 "src/texttest/../other/stb_image_write.h"
      $202 = $z; //@line 641 "src/texttest/../other/stb_image_write.h"
      $203 = (($202) + ($201)|0); //@line 641 "src/texttest/../other/stb_image_write.h"
      $204 = HEAP8[$203>>0]|0; //@line 641 "src/texttest/../other/stb_image_write.h"
      $205 = $204&255; //@line 641 "src/texttest/../other/stb_image_write.h"
      $206 = (($198) + ($205))|0; //@line 641 "src/texttest/../other/stb_image_write.h"
      $207 = $206 >> 1; //@line 641 "src/texttest/../other/stb_image_write.h"
      $208 = (($191) - ($207))|0; //@line 641 "src/texttest/../other/stb_image_write.h"
      $209 = $208&255; //@line 641 "src/texttest/../other/stb_image_write.h"
      $210 = $i; //@line 641 "src/texttest/../other/stb_image_write.h"
      $211 = $line_buffer; //@line 641 "src/texttest/../other/stb_image_write.h"
      $212 = (($211) + ($210)|0); //@line 641 "src/texttest/../other/stb_image_write.h"
      HEAP8[$212>>0] = $209; //@line 641 "src/texttest/../other/stb_image_write.h"
      break;
     }
     case 5:  {
      $248 = $i; //@line 643 "src/texttest/../other/stb_image_write.h"
      $249 = $z; //@line 643 "src/texttest/../other/stb_image_write.h"
      $250 = (($249) + ($248)|0); //@line 643 "src/texttest/../other/stb_image_write.h"
      $251 = HEAP8[$250>>0]|0; //@line 643 "src/texttest/../other/stb_image_write.h"
      $252 = $251&255; //@line 643 "src/texttest/../other/stb_image_write.h"
      $253 = $i; //@line 643 "src/texttest/../other/stb_image_write.h"
      $254 = $5; //@line 643 "src/texttest/../other/stb_image_write.h"
      $255 = (($253) - ($254))|0; //@line 643 "src/texttest/../other/stb_image_write.h"
      $256 = $z; //@line 643 "src/texttest/../other/stb_image_write.h"
      $257 = (($256) + ($255)|0); //@line 643 "src/texttest/../other/stb_image_write.h"
      $258 = HEAP8[$257>>0]|0; //@line 643 "src/texttest/../other/stb_image_write.h"
      $259 = $258&255; //@line 643 "src/texttest/../other/stb_image_write.h"
      $260 = $259 >> 1; //@line 643 "src/texttest/../other/stb_image_write.h"
      $261 = (($252) - ($260))|0; //@line 643 "src/texttest/../other/stb_image_write.h"
      $262 = $261&255; //@line 643 "src/texttest/../other/stb_image_write.h"
      $263 = $i; //@line 643 "src/texttest/../other/stb_image_write.h"
      $264 = $line_buffer; //@line 643 "src/texttest/../other/stb_image_write.h"
      $265 = (($264) + ($263)|0); //@line 643 "src/texttest/../other/stb_image_write.h"
      HEAP8[$265>>0] = $262; //@line 643 "src/texttest/../other/stb_image_write.h"
      break;
     }
     case 0:  {
      $146 = $i; //@line 638 "src/texttest/../other/stb_image_write.h"
      $147 = $z; //@line 638 "src/texttest/../other/stb_image_write.h"
      $148 = (($147) + ($146)|0); //@line 638 "src/texttest/../other/stb_image_write.h"
      $149 = HEAP8[$148>>0]|0; //@line 638 "src/texttest/../other/stb_image_write.h"
      $150 = $i; //@line 638 "src/texttest/../other/stb_image_write.h"
      $151 = $line_buffer; //@line 638 "src/texttest/../other/stb_image_write.h"
      $152 = (($151) + ($150)|0); //@line 638 "src/texttest/../other/stb_image_write.h"
      HEAP8[$152>>0] = $149; //@line 638 "src/texttest/../other/stb_image_write.h"
      break;
     }
     default: {
     }
     }
     $285 = $i; //@line 636 "src/texttest/../other/stb_image_write.h"
     $286 = (($285) + 1)|0; //@line 636 "src/texttest/../other/stb_image_write.h"
     $i = $286; //@line 636 "src/texttest/../other/stb_image_write.h"
    }
    $287 = $p; //@line 647 "src/texttest/../other/stb_image_write.h"
    $288 = ($287|0)!=(0); //@line 647 "src/texttest/../other/stb_image_write.h"
    if ($288) {
     label = 41;
     break;
    }
    $i = 0; //@line 648 "src/texttest/../other/stb_image_write.h"
    while(1) {
     $289 = $i; //@line 648 "src/texttest/../other/stb_image_write.h"
     $290 = $3; //@line 648 "src/texttest/../other/stb_image_write.h"
     $291 = $5; //@line 648 "src/texttest/../other/stb_image_write.h"
     $292 = Math_imul($290, $291)|0; //@line 648 "src/texttest/../other/stb_image_write.h"
     $293 = ($289|0)<($292|0); //@line 648 "src/texttest/../other/stb_image_write.h"
     if (!($293)) {
      break;
     }
     $294 = $i; //@line 649 "src/texttest/../other/stb_image_write.h"
     $295 = $line_buffer; //@line 649 "src/texttest/../other/stb_image_write.h"
     $296 = (($295) + ($294)|0); //@line 649 "src/texttest/../other/stb_image_write.h"
     $297 = HEAP8[$296>>0]|0; //@line 649 "src/texttest/../other/stb_image_write.h"
     $298 = $297 << 24 >> 24; //@line 649 "src/texttest/../other/stb_image_write.h"
     $299 = (Math_abs(($298|0))|0); //@line 649 "src/texttest/../other/stb_image_write.h"
     $300 = $est; //@line 649 "src/texttest/../other/stb_image_write.h"
     $301 = (($300) + ($299))|0; //@line 649 "src/texttest/../other/stb_image_write.h"
     $est = $301; //@line 649 "src/texttest/../other/stb_image_write.h"
     $302 = $i; //@line 648 "src/texttest/../other/stb_image_write.h"
     $303 = (($302) + 1)|0; //@line 648 "src/texttest/../other/stb_image_write.h"
     $i = $303; //@line 648 "src/texttest/../other/stb_image_write.h"
    }
    $304 = $est; //@line 650 "src/texttest/../other/stb_image_write.h"
    $305 = $bestval; //@line 650 "src/texttest/../other/stb_image_write.h"
    $306 = ($304|0)<($305|0); //@line 650 "src/texttest/../other/stb_image_write.h"
    if ($306) {
     $307 = $est; //@line 650 "src/texttest/../other/stb_image_write.h"
     $bestval = $307; //@line 650 "src/texttest/../other/stb_image_write.h"
     $308 = $k; //@line 650 "src/texttest/../other/stb_image_write.h"
     $best = $308; //@line 650 "src/texttest/../other/stb_image_write.h"
    }
    $309 = $k; //@line 623 "src/texttest/../other/stb_image_write.h"
    $310 = (($309) + 1)|0; //@line 623 "src/texttest/../other/stb_image_write.h"
    $k = $310; //@line 623 "src/texttest/../other/stb_image_write.h"
   }
   if ((label|0) == 41) {
    label = 0;
   }
   $311 = $p; //@line 622 "src/texttest/../other/stb_image_write.h"
   $312 = (($311) + 1)|0; //@line 622 "src/texttest/../other/stb_image_write.h"
   $p = $312; //@line 622 "src/texttest/../other/stb_image_write.h"
  }
  $313 = $best; //@line 654 "src/texttest/../other/stb_image_write.h"
  $314 = $313&255; //@line 654 "src/texttest/../other/stb_image_write.h"
  $315 = $j; //@line 654 "src/texttest/../other/stb_image_write.h"
  $316 = $3; //@line 654 "src/texttest/../other/stb_image_write.h"
  $317 = $5; //@line 654 "src/texttest/../other/stb_image_write.h"
  $318 = Math_imul($316, $317)|0; //@line 654 "src/texttest/../other/stb_image_write.h"
  $319 = (($318) + 1)|0; //@line 654 "src/texttest/../other/stb_image_write.h"
  $320 = Math_imul($315, $319)|0; //@line 654 "src/texttest/../other/stb_image_write.h"
  $321 = $filt; //@line 654 "src/texttest/../other/stb_image_write.h"
  $322 = (($321) + ($320)|0); //@line 654 "src/texttest/../other/stb_image_write.h"
  HEAP8[$322>>0] = $314; //@line 654 "src/texttest/../other/stb_image_write.h"
  $323 = $filt; //@line 655 "src/texttest/../other/stb_image_write.h"
  $324 = $j; //@line 655 "src/texttest/../other/stb_image_write.h"
  $325 = $3; //@line 655 "src/texttest/../other/stb_image_write.h"
  $326 = $5; //@line 655 "src/texttest/../other/stb_image_write.h"
  $327 = Math_imul($325, $326)|0; //@line 655 "src/texttest/../other/stb_image_write.h"
  $328 = (($327) + 1)|0; //@line 655 "src/texttest/../other/stb_image_write.h"
  $329 = Math_imul($324, $328)|0; //@line 655 "src/texttest/../other/stb_image_write.h"
  $330 = (($323) + ($329)|0); //@line 655 "src/texttest/../other/stb_image_write.h"
  $331 = (($330) + 1|0); //@line 655 "src/texttest/../other/stb_image_write.h"
  $332 = $line_buffer; //@line 655 "src/texttest/../other/stb_image_write.h"
  $333 = $3; //@line 655 "src/texttest/../other/stb_image_write.h"
  $334 = $5; //@line 655 "src/texttest/../other/stb_image_write.h"
  $335 = Math_imul($333, $334)|0; //@line 655 "src/texttest/../other/stb_image_write.h"
  _memmove(($331|0),($332|0),($335|0))|0; //@line 655 "src/texttest/../other/stb_image_write.h"
  $336 = $j; //@line 617 "src/texttest/../other/stb_image_write.h"
  $337 = (($336) + 1)|0; //@line 617 "src/texttest/../other/stb_image_write.h"
  $j = $337; //@line 617 "src/texttest/../other/stb_image_write.h"
 }
 $338 = $line_buffer; //@line 657 "src/texttest/../other/stb_image_write.h"
 _free($338); //@line 657 "src/texttest/../other/stb_image_write.h"
 $339 = $filt; //@line 658 "src/texttest/../other/stb_image_write.h"
 $340 = $4; //@line 658 "src/texttest/../other/stb_image_write.h"
 $341 = $3; //@line 658 "src/texttest/../other/stb_image_write.h"
 $342 = $5; //@line 658 "src/texttest/../other/stb_image_write.h"
 $343 = Math_imul($341, $342)|0; //@line 658 "src/texttest/../other/stb_image_write.h"
 $344 = (($343) + 1)|0; //@line 658 "src/texttest/../other/stb_image_write.h"
 $345 = Math_imul($340, $344)|0; //@line 658 "src/texttest/../other/stb_image_write.h"
 $346 = (_stbi_zlib_compress($339,$345,$zlen,8)|0); //@line 658 "src/texttest/../other/stb_image_write.h"
 $zlib = $346; //@line 658 "src/texttest/../other/stb_image_write.h"
 $347 = $filt; //@line 659 "src/texttest/../other/stb_image_write.h"
 _free($347); //@line 659 "src/texttest/../other/stb_image_write.h"
 $348 = $zlib; //@line 660 "src/texttest/../other/stb_image_write.h"
 $349 = ($348|0)!=(0|0); //@line 660 "src/texttest/../other/stb_image_write.h"
 if (!($349)) {
  $0 = 0; //@line 660 "src/texttest/../other/stb_image_write.h"
  $510 = $0; //@line 694 "src/texttest/../other/stb_image_write.h"
  STACKTOP = sp;return ($510|0); //@line 694 "src/texttest/../other/stb_image_write.h"
 }
 $350 = HEAP32[$zlen>>2]|0; //@line 663 "src/texttest/../other/stb_image_write.h"
 $351 = (45 + ($350))|0; //@line 663 "src/texttest/../other/stb_image_write.h"
 $352 = (($351) + 12)|0; //@line 663 "src/texttest/../other/stb_image_write.h"
 $353 = (_malloc($352)|0); //@line 663 "src/texttest/../other/stb_image_write.h"
 $out = $353; //@line 663 "src/texttest/../other/stb_image_write.h"
 $354 = $out; //@line 664 "src/texttest/../other/stb_image_write.h"
 $355 = ($354|0)!=(0|0); //@line 664 "src/texttest/../other/stb_image_write.h"
 if (!($355)) {
  $0 = 0; //@line 664 "src/texttest/../other/stb_image_write.h"
  $510 = $0; //@line 694 "src/texttest/../other/stb_image_write.h"
  STACKTOP = sp;return ($510|0); //@line 694 "src/texttest/../other/stb_image_write.h"
 }
 $356 = HEAP32[$zlen>>2]|0; //@line 665 "src/texttest/../other/stb_image_write.h"
 $357 = (45 + ($356))|0; //@line 665 "src/texttest/../other/stb_image_write.h"
 $358 = (($357) + 12)|0; //@line 665 "src/texttest/../other/stb_image_write.h"
 $359 = $6; //@line 665 "src/texttest/../other/stb_image_write.h"
 HEAP32[$359>>2] = $358; //@line 665 "src/texttest/../other/stb_image_write.h"
 $360 = $out; //@line 667 "src/texttest/../other/stb_image_write.h"
 HEAP32[$o>>2] = $360; //@line 667 "src/texttest/../other/stb_image_write.h"
 $361 = HEAP32[$o>>2]|0; //@line 668 "src/texttest/../other/stb_image_write.h"
 _memmove(($361|0),($sig|0),8)|0; //@line 668 "src/texttest/../other/stb_image_write.h"
 $362 = HEAP32[$o>>2]|0; //@line 668 "src/texttest/../other/stb_image_write.h"
 $363 = (($362) + 8|0); //@line 668 "src/texttest/../other/stb_image_write.h"
 HEAP32[$o>>2] = $363; //@line 668 "src/texttest/../other/stb_image_write.h"
 $364 = HEAP32[$o>>2]|0; //@line 669 "src/texttest/../other/stb_image_write.h"
 HEAP8[$364>>0] = 0; //@line 669 "src/texttest/../other/stb_image_write.h"
 $365 = HEAP32[$o>>2]|0; //@line 669 "src/texttest/../other/stb_image_write.h"
 $366 = (($365) + 1|0); //@line 669 "src/texttest/../other/stb_image_write.h"
 HEAP8[$366>>0] = 0; //@line 669 "src/texttest/../other/stb_image_write.h"
 $367 = HEAP32[$o>>2]|0; //@line 669 "src/texttest/../other/stb_image_write.h"
 $368 = (($367) + 2|0); //@line 669 "src/texttest/../other/stb_image_write.h"
 HEAP8[$368>>0] = 0; //@line 669 "src/texttest/../other/stb_image_write.h"
 $369 = HEAP32[$o>>2]|0; //@line 669 "src/texttest/../other/stb_image_write.h"
 $370 = (($369) + 3|0); //@line 669 "src/texttest/../other/stb_image_write.h"
 HEAP8[$370>>0] = 13; //@line 669 "src/texttest/../other/stb_image_write.h"
 $371 = HEAP32[$o>>2]|0; //@line 669 "src/texttest/../other/stb_image_write.h"
 $372 = (($371) + 4|0); //@line 669 "src/texttest/../other/stb_image_write.h"
 HEAP32[$o>>2] = $372; //@line 669 "src/texttest/../other/stb_image_write.h"
 $373 = HEAP8[1448>>0]|0; //@line 670 "src/texttest/../other/stb_image_write.h"
 $374 = HEAP32[$o>>2]|0; //@line 670 "src/texttest/../other/stb_image_write.h"
 HEAP8[$374>>0] = $373; //@line 670 "src/texttest/../other/stb_image_write.h"
 $375 = HEAP8[((1448 + 1|0))>>0]|0; //@line 670 "src/texttest/../other/stb_image_write.h"
 $376 = HEAP32[$o>>2]|0; //@line 670 "src/texttest/../other/stb_image_write.h"
 $377 = (($376) + 1|0); //@line 670 "src/texttest/../other/stb_image_write.h"
 HEAP8[$377>>0] = $375; //@line 670 "src/texttest/../other/stb_image_write.h"
 $378 = HEAP8[((1448 + 2|0))>>0]|0; //@line 670 "src/texttest/../other/stb_image_write.h"
 $379 = HEAP32[$o>>2]|0; //@line 670 "src/texttest/../other/stb_image_write.h"
 $380 = (($379) + 2|0); //@line 670 "src/texttest/../other/stb_image_write.h"
 HEAP8[$380>>0] = $378; //@line 670 "src/texttest/../other/stb_image_write.h"
 $381 = HEAP8[((1448 + 3|0))>>0]|0; //@line 670 "src/texttest/../other/stb_image_write.h"
 $382 = HEAP32[$o>>2]|0; //@line 670 "src/texttest/../other/stb_image_write.h"
 $383 = (($382) + 3|0); //@line 670 "src/texttest/../other/stb_image_write.h"
 HEAP8[$383>>0] = $381; //@line 670 "src/texttest/../other/stb_image_write.h"
 $384 = HEAP32[$o>>2]|0; //@line 670 "src/texttest/../other/stb_image_write.h"
 $385 = (($384) + 4|0); //@line 670 "src/texttest/../other/stb_image_write.h"
 HEAP32[$o>>2] = $385; //@line 670 "src/texttest/../other/stb_image_write.h"
 $386 = $3; //@line 671 "src/texttest/../other/stb_image_write.h"
 $387 = $386 >> 24; //@line 671 "src/texttest/../other/stb_image_write.h"
 $388 = $387&255; //@line 671 "src/texttest/../other/stb_image_write.h"
 $389 = HEAP32[$o>>2]|0; //@line 671 "src/texttest/../other/stb_image_write.h"
 HEAP8[$389>>0] = $388; //@line 671 "src/texttest/../other/stb_image_write.h"
 $390 = $3; //@line 671 "src/texttest/../other/stb_image_write.h"
 $391 = $390 >> 16; //@line 671 "src/texttest/../other/stb_image_write.h"
 $392 = $391&255; //@line 671 "src/texttest/../other/stb_image_write.h"
 $393 = HEAP32[$o>>2]|0; //@line 671 "src/texttest/../other/stb_image_write.h"
 $394 = (($393) + 1|0); //@line 671 "src/texttest/../other/stb_image_write.h"
 HEAP8[$394>>0] = $392; //@line 671 "src/texttest/../other/stb_image_write.h"
 $395 = $3; //@line 671 "src/texttest/../other/stb_image_write.h"
 $396 = $395 >> 8; //@line 671 "src/texttest/../other/stb_image_write.h"
 $397 = $396&255; //@line 671 "src/texttest/../other/stb_image_write.h"
 $398 = HEAP32[$o>>2]|0; //@line 671 "src/texttest/../other/stb_image_write.h"
 $399 = (($398) + 2|0); //@line 671 "src/texttest/../other/stb_image_write.h"
 HEAP8[$399>>0] = $397; //@line 671 "src/texttest/../other/stb_image_write.h"
 $400 = $3; //@line 671 "src/texttest/../other/stb_image_write.h"
 $401 = $400&255; //@line 671 "src/texttest/../other/stb_image_write.h"
 $402 = HEAP32[$o>>2]|0; //@line 671 "src/texttest/../other/stb_image_write.h"
 $403 = (($402) + 3|0); //@line 671 "src/texttest/../other/stb_image_write.h"
 HEAP8[$403>>0] = $401; //@line 671 "src/texttest/../other/stb_image_write.h"
 $404 = HEAP32[$o>>2]|0; //@line 671 "src/texttest/../other/stb_image_write.h"
 $405 = (($404) + 4|0); //@line 671 "src/texttest/../other/stb_image_write.h"
 HEAP32[$o>>2] = $405; //@line 671 "src/texttest/../other/stb_image_write.h"
 $406 = $4; //@line 672 "src/texttest/../other/stb_image_write.h"
 $407 = $406 >> 24; //@line 672 "src/texttest/../other/stb_image_write.h"
 $408 = $407&255; //@line 672 "src/texttest/../other/stb_image_write.h"
 $409 = HEAP32[$o>>2]|0; //@line 672 "src/texttest/../other/stb_image_write.h"
 HEAP8[$409>>0] = $408; //@line 672 "src/texttest/../other/stb_image_write.h"
 $410 = $4; //@line 672 "src/texttest/../other/stb_image_write.h"
 $411 = $410 >> 16; //@line 672 "src/texttest/../other/stb_image_write.h"
 $412 = $411&255; //@line 672 "src/texttest/../other/stb_image_write.h"
 $413 = HEAP32[$o>>2]|0; //@line 672 "src/texttest/../other/stb_image_write.h"
 $414 = (($413) + 1|0); //@line 672 "src/texttest/../other/stb_image_write.h"
 HEAP8[$414>>0] = $412; //@line 672 "src/texttest/../other/stb_image_write.h"
 $415 = $4; //@line 672 "src/texttest/../other/stb_image_write.h"
 $416 = $415 >> 8; //@line 672 "src/texttest/../other/stb_image_write.h"
 $417 = $416&255; //@line 672 "src/texttest/../other/stb_image_write.h"
 $418 = HEAP32[$o>>2]|0; //@line 672 "src/texttest/../other/stb_image_write.h"
 $419 = (($418) + 2|0); //@line 672 "src/texttest/../other/stb_image_write.h"
 HEAP8[$419>>0] = $417; //@line 672 "src/texttest/../other/stb_image_write.h"
 $420 = $4; //@line 672 "src/texttest/../other/stb_image_write.h"
 $421 = $420&255; //@line 672 "src/texttest/../other/stb_image_write.h"
 $422 = HEAP32[$o>>2]|0; //@line 672 "src/texttest/../other/stb_image_write.h"
 $423 = (($422) + 3|0); //@line 672 "src/texttest/../other/stb_image_write.h"
 HEAP8[$423>>0] = $421; //@line 672 "src/texttest/../other/stb_image_write.h"
 $424 = HEAP32[$o>>2]|0; //@line 672 "src/texttest/../other/stb_image_write.h"
 $425 = (($424) + 4|0); //@line 672 "src/texttest/../other/stb_image_write.h"
 HEAP32[$o>>2] = $425; //@line 672 "src/texttest/../other/stb_image_write.h"
 $426 = HEAP32[$o>>2]|0; //@line 673 "src/texttest/../other/stb_image_write.h"
 $427 = (($426) + 1|0); //@line 673 "src/texttest/../other/stb_image_write.h"
 HEAP32[$o>>2] = $427; //@line 673 "src/texttest/../other/stb_image_write.h"
 HEAP8[$426>>0] = 8; //@line 673 "src/texttest/../other/stb_image_write.h"
 $428 = $5; //@line 674 "src/texttest/../other/stb_image_write.h"
 $429 = (($ctype) + ($428<<2)|0); //@line 674 "src/texttest/../other/stb_image_write.h"
 $430 = HEAP32[$429>>2]|0; //@line 674 "src/texttest/../other/stb_image_write.h"
 $431 = $430&255; //@line 674 "src/texttest/../other/stb_image_write.h"
 $432 = HEAP32[$o>>2]|0; //@line 674 "src/texttest/../other/stb_image_write.h"
 $433 = (($432) + 1|0); //@line 674 "src/texttest/../other/stb_image_write.h"
 HEAP32[$o>>2] = $433; //@line 674 "src/texttest/../other/stb_image_write.h"
 HEAP8[$432>>0] = $431; //@line 674 "src/texttest/../other/stb_image_write.h"
 $434 = HEAP32[$o>>2]|0; //@line 675 "src/texttest/../other/stb_image_write.h"
 $435 = (($434) + 1|0); //@line 675 "src/texttest/../other/stb_image_write.h"
 HEAP32[$o>>2] = $435; //@line 675 "src/texttest/../other/stb_image_write.h"
 HEAP8[$434>>0] = 0; //@line 675 "src/texttest/../other/stb_image_write.h"
 $436 = HEAP32[$o>>2]|0; //@line 676 "src/texttest/../other/stb_image_write.h"
 $437 = (($436) + 1|0); //@line 676 "src/texttest/../other/stb_image_write.h"
 HEAP32[$o>>2] = $437; //@line 676 "src/texttest/../other/stb_image_write.h"
 HEAP8[$436>>0] = 0; //@line 676 "src/texttest/../other/stb_image_write.h"
 $438 = HEAP32[$o>>2]|0; //@line 677 "src/texttest/../other/stb_image_write.h"
 $439 = (($438) + 1|0); //@line 677 "src/texttest/../other/stb_image_write.h"
 HEAP32[$o>>2] = $439; //@line 677 "src/texttest/../other/stb_image_write.h"
 HEAP8[$438>>0] = 0; //@line 677 "src/texttest/../other/stb_image_write.h"
 _stbiw__wpcrc($o,13); //@line 678 "src/texttest/../other/stb_image_write.h"
 $440 = HEAP32[$zlen>>2]|0; //@line 680 "src/texttest/../other/stb_image_write.h"
 $441 = $440 >> 24; //@line 680 "src/texttest/../other/stb_image_write.h"
 $442 = $441&255; //@line 680 "src/texttest/../other/stb_image_write.h"
 $443 = HEAP32[$o>>2]|0; //@line 680 "src/texttest/../other/stb_image_write.h"
 HEAP8[$443>>0] = $442; //@line 680 "src/texttest/../other/stb_image_write.h"
 $444 = HEAP32[$zlen>>2]|0; //@line 680 "src/texttest/../other/stb_image_write.h"
 $445 = $444 >> 16; //@line 680 "src/texttest/../other/stb_image_write.h"
 $446 = $445&255; //@line 680 "src/texttest/../other/stb_image_write.h"
 $447 = HEAP32[$o>>2]|0; //@line 680 "src/texttest/../other/stb_image_write.h"
 $448 = (($447) + 1|0); //@line 680 "src/texttest/../other/stb_image_write.h"
 HEAP8[$448>>0] = $446; //@line 680 "src/texttest/../other/stb_image_write.h"
 $449 = HEAP32[$zlen>>2]|0; //@line 680 "src/texttest/../other/stb_image_write.h"
 $450 = $449 >> 8; //@line 680 "src/texttest/../other/stb_image_write.h"
 $451 = $450&255; //@line 680 "src/texttest/../other/stb_image_write.h"
 $452 = HEAP32[$o>>2]|0; //@line 680 "src/texttest/../other/stb_image_write.h"
 $453 = (($452) + 2|0); //@line 680 "src/texttest/../other/stb_image_write.h"
 HEAP8[$453>>0] = $451; //@line 680 "src/texttest/../other/stb_image_write.h"
 $454 = HEAP32[$zlen>>2]|0; //@line 680 "src/texttest/../other/stb_image_write.h"
 $455 = $454&255; //@line 680 "src/texttest/../other/stb_image_write.h"
 $456 = HEAP32[$o>>2]|0; //@line 680 "src/texttest/../other/stb_image_write.h"
 $457 = (($456) + 3|0); //@line 680 "src/texttest/../other/stb_image_write.h"
 HEAP8[$457>>0] = $455; //@line 680 "src/texttest/../other/stb_image_write.h"
 $458 = HEAP32[$o>>2]|0; //@line 680 "src/texttest/../other/stb_image_write.h"
 $459 = (($458) + 4|0); //@line 680 "src/texttest/../other/stb_image_write.h"
 HEAP32[$o>>2] = $459; //@line 680 "src/texttest/../other/stb_image_write.h"
 $460 = HEAP8[1456>>0]|0; //@line 681 "src/texttest/../other/stb_image_write.h"
 $461 = HEAP32[$o>>2]|0; //@line 681 "src/texttest/../other/stb_image_write.h"
 HEAP8[$461>>0] = $460; //@line 681 "src/texttest/../other/stb_image_write.h"
 $462 = HEAP8[((1456 + 1|0))>>0]|0; //@line 681 "src/texttest/../other/stb_image_write.h"
 $463 = HEAP32[$o>>2]|0; //@line 681 "src/texttest/../other/stb_image_write.h"
 $464 = (($463) + 1|0); //@line 681 "src/texttest/../other/stb_image_write.h"
 HEAP8[$464>>0] = $462; //@line 681 "src/texttest/../other/stb_image_write.h"
 $465 = HEAP8[((1456 + 2|0))>>0]|0; //@line 681 "src/texttest/../other/stb_image_write.h"
 $466 = HEAP32[$o>>2]|0; //@line 681 "src/texttest/../other/stb_image_write.h"
 $467 = (($466) + 2|0); //@line 681 "src/texttest/../other/stb_image_write.h"
 HEAP8[$467>>0] = $465; //@line 681 "src/texttest/../other/stb_image_write.h"
 $468 = HEAP8[((1456 + 3|0))>>0]|0; //@line 681 "src/texttest/../other/stb_image_write.h"
 $469 = HEAP32[$o>>2]|0; //@line 681 "src/texttest/../other/stb_image_write.h"
 $470 = (($469) + 3|0); //@line 681 "src/texttest/../other/stb_image_write.h"
 HEAP8[$470>>0] = $468; //@line 681 "src/texttest/../other/stb_image_write.h"
 $471 = HEAP32[$o>>2]|0; //@line 681 "src/texttest/../other/stb_image_write.h"
 $472 = (($471) + 4|0); //@line 681 "src/texttest/../other/stb_image_write.h"
 HEAP32[$o>>2] = $472; //@line 681 "src/texttest/../other/stb_image_write.h"
 $473 = HEAP32[$o>>2]|0; //@line 682 "src/texttest/../other/stb_image_write.h"
 $474 = $zlib; //@line 682 "src/texttest/../other/stb_image_write.h"
 $475 = HEAP32[$zlen>>2]|0; //@line 682 "src/texttest/../other/stb_image_write.h"
 _memmove(($473|0),($474|0),($475|0))|0; //@line 682 "src/texttest/../other/stb_image_write.h"
 $476 = HEAP32[$zlen>>2]|0; //@line 683 "src/texttest/../other/stb_image_write.h"
 $477 = HEAP32[$o>>2]|0; //@line 683 "src/texttest/../other/stb_image_write.h"
 $478 = (($477) + ($476)|0); //@line 683 "src/texttest/../other/stb_image_write.h"
 HEAP32[$o>>2] = $478; //@line 683 "src/texttest/../other/stb_image_write.h"
 $479 = $zlib; //@line 684 "src/texttest/../other/stb_image_write.h"
 _free($479); //@line 684 "src/texttest/../other/stb_image_write.h"
 $480 = HEAP32[$zlen>>2]|0; //@line 685 "src/texttest/../other/stb_image_write.h"
 _stbiw__wpcrc($o,$480); //@line 685 "src/texttest/../other/stb_image_write.h"
 $481 = HEAP32[$o>>2]|0; //@line 687 "src/texttest/../other/stb_image_write.h"
 HEAP8[$481>>0] = 0; //@line 687 "src/texttest/../other/stb_image_write.h"
 $482 = HEAP32[$o>>2]|0; //@line 687 "src/texttest/../other/stb_image_write.h"
 $483 = (($482) + 1|0); //@line 687 "src/texttest/../other/stb_image_write.h"
 HEAP8[$483>>0] = 0; //@line 687 "src/texttest/../other/stb_image_write.h"
 $484 = HEAP32[$o>>2]|0; //@line 687 "src/texttest/../other/stb_image_write.h"
 $485 = (($484) + 2|0); //@line 687 "src/texttest/../other/stb_image_write.h"
 HEAP8[$485>>0] = 0; //@line 687 "src/texttest/../other/stb_image_write.h"
 $486 = HEAP32[$o>>2]|0; //@line 687 "src/texttest/../other/stb_image_write.h"
 $487 = (($486) + 3|0); //@line 687 "src/texttest/../other/stb_image_write.h"
 HEAP8[$487>>0] = 0; //@line 687 "src/texttest/../other/stb_image_write.h"
 $488 = HEAP32[$o>>2]|0; //@line 687 "src/texttest/../other/stb_image_write.h"
 $489 = (($488) + 4|0); //@line 687 "src/texttest/../other/stb_image_write.h"
 HEAP32[$o>>2] = $489; //@line 687 "src/texttest/../other/stb_image_write.h"
 $490 = HEAP8[1464>>0]|0; //@line 688 "src/texttest/../other/stb_image_write.h"
 $491 = HEAP32[$o>>2]|0; //@line 688 "src/texttest/../other/stb_image_write.h"
 HEAP8[$491>>0] = $490; //@line 688 "src/texttest/../other/stb_image_write.h"
 $492 = HEAP8[((1464 + 1|0))>>0]|0; //@line 688 "src/texttest/../other/stb_image_write.h"
 $493 = HEAP32[$o>>2]|0; //@line 688 "src/texttest/../other/stb_image_write.h"
 $494 = (($493) + 1|0); //@line 688 "src/texttest/../other/stb_image_write.h"
 HEAP8[$494>>0] = $492; //@line 688 "src/texttest/../other/stb_image_write.h"
 $495 = HEAP8[((1464 + 2|0))>>0]|0; //@line 688 "src/texttest/../other/stb_image_write.h"
 $496 = HEAP32[$o>>2]|0; //@line 688 "src/texttest/../other/stb_image_write.h"
 $497 = (($496) + 2|0); //@line 688 "src/texttest/../other/stb_image_write.h"
 HEAP8[$497>>0] = $495; //@line 688 "src/texttest/../other/stb_image_write.h"
 $498 = HEAP8[((1464 + 3|0))>>0]|0; //@line 688 "src/texttest/../other/stb_image_write.h"
 $499 = HEAP32[$o>>2]|0; //@line 688 "src/texttest/../other/stb_image_write.h"
 $500 = (($499) + 3|0); //@line 688 "src/texttest/../other/stb_image_write.h"
 HEAP8[$500>>0] = $498; //@line 688 "src/texttest/../other/stb_image_write.h"
 $501 = HEAP32[$o>>2]|0; //@line 688 "src/texttest/../other/stb_image_write.h"
 $502 = (($501) + 4|0); //@line 688 "src/texttest/../other/stb_image_write.h"
 HEAP32[$o>>2] = $502; //@line 688 "src/texttest/../other/stb_image_write.h"
 _stbiw__wpcrc($o,0); //@line 689 "src/texttest/../other/stb_image_write.h"
 $503 = HEAP32[$o>>2]|0; //@line 691 "src/texttest/../other/stb_image_write.h"
 $504 = $out; //@line 691 "src/texttest/../other/stb_image_write.h"
 $505 = $6; //@line 691 "src/texttest/../other/stb_image_write.h"
 $506 = HEAP32[$505>>2]|0; //@line 691 "src/texttest/../other/stb_image_write.h"
 $507 = (($504) + ($506)|0); //@line 691 "src/texttest/../other/stb_image_write.h"
 $508 = ($503|0)==($507|0); //@line 691 "src/texttest/../other/stb_image_write.h"
 if (!($508)) {
  ___assert_fail((1472|0),(48|0),691,(1496|0)); //@line 691 "src/texttest/../other/stb_image_write.h"
  // unreachable; //@line 691 "src/texttest/../other/stb_image_write.h"
 }
 $509 = $out; //@line 693 "src/texttest/../other/stb_image_write.h"
 $0 = $509; //@line 693 "src/texttest/../other/stb_image_write.h"
 $510 = $0; //@line 694 "src/texttest/../other/stb_image_write.h"
 STACKTOP = sp;return ($510|0); //@line 694 "src/texttest/../other/stb_image_write.h"
}
function _stbi_write_png($filename,$x,$y,$comp,$data,$stride_bytes) {
 $filename = $filename|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $data = $data|0;
 $stride_bytes = $stride_bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, $len = 0, $png = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $len = sp + 4|0;
 $1 = $filename;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $data;
 $6 = $stride_bytes;
 $7 = $5; //@line 700 "src/texttest/../other/stb_image_write.h"
 $8 = $6; //@line 700 "src/texttest/../other/stb_image_write.h"
 $9 = $2; //@line 700 "src/texttest/../other/stb_image_write.h"
 $10 = $3; //@line 700 "src/texttest/../other/stb_image_write.h"
 $11 = $4; //@line 700 "src/texttest/../other/stb_image_write.h"
 $12 = (_stbi_write_png_to_mem($7,$8,$9,$10,$11,$len)|0); //@line 700 "src/texttest/../other/stb_image_write.h"
 $png = $12; //@line 700 "src/texttest/../other/stb_image_write.h"
 $13 = $png; //@line 701 "src/texttest/../other/stb_image_write.h"
 $14 = ($13|0)!=(0|0); //@line 701 "src/texttest/../other/stb_image_write.h"
 if (!($14)) {
  $0 = 0; //@line 701 "src/texttest/../other/stb_image_write.h"
  $25 = $0; //@line 708 "src/texttest/../other/stb_image_write.h"
  STACKTOP = sp;return ($25|0); //@line 708 "src/texttest/../other/stb_image_write.h"
 }
 $15 = $1; //@line 702 "src/texttest/../other/stb_image_write.h"
 $16 = (_fopen(($15|0),(88|0))|0); //@line 702 "src/texttest/../other/stb_image_write.h"
 $f = $16; //@line 702 "src/texttest/../other/stb_image_write.h"
 $17 = $f; //@line 703 "src/texttest/../other/stb_image_write.h"
 $18 = ($17|0)!=(0|0); //@line 703 "src/texttest/../other/stb_image_write.h"
 if ($18) {
  $20 = $png; //@line 704 "src/texttest/../other/stb_image_write.h"
  $21 = HEAP32[$len>>2]|0; //@line 704 "src/texttest/../other/stb_image_write.h"
  $22 = $f; //@line 704 "src/texttest/../other/stb_image_write.h"
  (_fwrite(($20|0),1,($21|0),($22|0))|0); //@line 704 "src/texttest/../other/stb_image_write.h"
  $23 = $f; //@line 705 "src/texttest/../other/stb_image_write.h"
  (_fclose(($23|0))|0); //@line 705 "src/texttest/../other/stb_image_write.h"
  $24 = $png; //@line 706 "src/texttest/../other/stb_image_write.h"
  _free($24); //@line 706 "src/texttest/../other/stb_image_write.h"
  $0 = 1; //@line 707 "src/texttest/../other/stb_image_write.h"
  $25 = $0; //@line 708 "src/texttest/../other/stb_image_write.h"
  STACKTOP = sp;return ($25|0); //@line 708 "src/texttest/../other/stb_image_write.h"
 } else {
  $19 = $png; //@line 703 "src/texttest/../other/stb_image_write.h"
  _free($19); //@line 703 "src/texttest/../other/stb_image_write.h"
  $0 = 0; //@line 703 "src/texttest/../other/stb_image_write.h"
  $25 = $0; //@line 708 "src/texttest/../other/stb_image_write.h"
  STACKTOP = sp;return ($25|0); //@line 708 "src/texttest/../other/stb_image_write.h"
 }
 return (0)|0;
}
function _setupProgram($vertexSource,$vertexSourceSize,$fragmentSource,$fragmentSourceSize) {
 $vertexSource = $vertexSource|0;
 $vertexSourceSize = $vertexSourceSize|0;
 $fragmentSource = $fragmentSource|0;
 $fragmentSourceSize = $fragmentSourceSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fragmentShader = 0, $fs = 0, $length = 0, $program = 0;
 var $shader_ok = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vertexShader = 0, $vs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $vs = sp + 44|0;
 $fs = sp + 40|0;
 $shader_ok = sp + 28|0;
 $0 = $vertexSource;
 $1 = $vertexSourceSize;
 $2 = $fragmentSource;
 $3 = $fragmentSourceSize;
 $4 = $0; //@line 46 "src/texttest/../puun/gf/gl_help.c"
 HEAP32[$vs>>2] = $4; //@line 46 "src/texttest/../puun/gf/gl_help.c"
 $5 = $2; //@line 47 "src/texttest/../puun/gf/gl_help.c"
 HEAP32[$fs>>2] = $5; //@line 47 "src/texttest/../puun/gf/gl_help.c"
 $6 = (_glCreateShader(35633)|0); //@line 48 "src/texttest/../puun/gf/gl_help.c"
 $vertexShader = $6; //@line 48 "src/texttest/../puun/gf/gl_help.c"
 $7 = (_glCreateShader(35632)|0); //@line 49 "src/texttest/../puun/gf/gl_help.c"
 $fragmentShader = $7; //@line 49 "src/texttest/../puun/gf/gl_help.c"
 $8 = $vertexShader; //@line 52 "src/texttest/../puun/gf/gl_help.c"
 _glShaderSource(($8|0),1,($vs|0),(0|0)); //@line 52 "src/texttest/../puun/gf/gl_help.c"
 $9 = $vertexShader; //@line 53 "src/texttest/../puun/gf/gl_help.c"
 _glCompileShader(($9|0)); //@line 53 "src/texttest/../puun/gf/gl_help.c"
 $10 = $vertexShader; //@line 54 "src/texttest/../puun/gf/gl_help.c"
 _glGetShaderiv(($10|0),35713,($shader_ok|0)); //@line 54 "src/texttest/../puun/gf/gl_help.c"
 $11 = HEAP32[$shader_ok>>2]|0; //@line 55 "src/texttest/../puun/gf/gl_help.c"
 $12 = ($11|0)==(0); //@line 55 "src/texttest/../puun/gf/gl_help.c"
 if ($12) {
  $length = 1000; //@line 56 "src/texttest/../puun/gf/gl_help.c"
  (_printf((1520|0),($vararg_buffer|0))|0); //@line 57 "src/texttest/../puun/gf/gl_help.c"
  $13 = $vertexShader; //@line 59 "src/texttest/../puun/gf/gl_help.c"
  _show_info_log($13,2,3); //@line 59 "src/texttest/../puun/gf/gl_help.c"
  $14 = $vertexShader; //@line 60 "src/texttest/../puun/gf/gl_help.c"
  _glDeleteShader(($14|0)); //@line 60 "src/texttest/../puun/gf/gl_help.c"
 }
 $15 = $fragmentShader; //@line 63 "src/texttest/../puun/gf/gl_help.c"
 _glShaderSource(($15|0),1,($fs|0),(0|0)); //@line 63 "src/texttest/../puun/gf/gl_help.c"
 $16 = $fragmentShader; //@line 64 "src/texttest/../puun/gf/gl_help.c"
 _glCompileShader(($16|0)); //@line 64 "src/texttest/../puun/gf/gl_help.c"
 $17 = $fragmentShader; //@line 65 "src/texttest/../puun/gf/gl_help.c"
 _glGetShaderiv(($17|0),35713,($shader_ok|0)); //@line 65 "src/texttest/../puun/gf/gl_help.c"
 $18 = HEAP32[$shader_ok>>2]|0; //@line 67 "src/texttest/../puun/gf/gl_help.c"
 $19 = ($18|0)!=(0); //@line 67 "src/texttest/../puun/gf/gl_help.c"
 if (!($19)) {
  $20 = HEAP32[_stderr>>2]|0; //@line 68 "src/texttest/../puun/gf/gl_help.c"
  (_fprintf(($20|0),(1560|0),($vararg_buffer1|0))|0); //@line 68 "src/texttest/../puun/gf/gl_help.c"
  $21 = $fragmentShader; //@line 69 "src/texttest/../puun/gf/gl_help.c"
  _show_info_log($21,2,4); //@line 69 "src/texttest/../puun/gf/gl_help.c"
  $22 = $fragmentShader; //@line 70 "src/texttest/../puun/gf/gl_help.c"
  _glDeleteShader(($22|0)); //@line 70 "src/texttest/../puun/gf/gl_help.c"
 }
 $23 = (_glCreateProgram()|0); //@line 73 "src/texttest/../puun/gf/gl_help.c"
 $program = $23; //@line 73 "src/texttest/../puun/gf/gl_help.c"
 $24 = $program; //@line 74 "src/texttest/../puun/gf/gl_help.c"
 $25 = $vertexShader; //@line 74 "src/texttest/../puun/gf/gl_help.c"
 _glAttachShader(($24|0),($25|0)); //@line 74 "src/texttest/../puun/gf/gl_help.c"
 $26 = $program; //@line 75 "src/texttest/../puun/gf/gl_help.c"
 $27 = $fragmentShader; //@line 75 "src/texttest/../puun/gf/gl_help.c"
 _glAttachShader(($26|0),($27|0)); //@line 75 "src/texttest/../puun/gf/gl_help.c"
 $28 = $program; //@line 76 "src/texttest/../puun/gf/gl_help.c"
 _glLinkProgram(($28|0)); //@line 76 "src/texttest/../puun/gf/gl_help.c"
 $29 = $program; //@line 78 "src/texttest/../puun/gf/gl_help.c"
 _glGetProgramiv(($29|0),35714,($shader_ok|0)); //@line 78 "src/texttest/../puun/gf/gl_help.c"
 $30 = HEAP32[$shader_ok>>2]|0; //@line 79 "src/texttest/../puun/gf/gl_help.c"
 $31 = ($30|0)!=(0); //@line 79 "src/texttest/../puun/gf/gl_help.c"
 if ($31) {
  $35 = $program; //@line 84 "src/texttest/../puun/gf/gl_help.c"
  STACKTOP = sp;return ($35|0); //@line 84 "src/texttest/../puun/gf/gl_help.c"
 }
 $32 = HEAP32[_stderr>>2]|0; //@line 80 "src/texttest/../puun/gf/gl_help.c"
 (_fprintf(($32|0),(1600|0),($vararg_buffer3|0))|0); //@line 80 "src/texttest/../puun/gf/gl_help.c"
 $33 = $vertexShader; //@line 81 "src/texttest/../puun/gf/gl_help.c"
 _show_info_log($33,2,3); //@line 81 "src/texttest/../puun/gf/gl_help.c"
 $34 = $program; //@line 82 "src/texttest/../puun/gf/gl_help.c"
 _glDeleteProgram(($34|0)); //@line 82 "src/texttest/../puun/gf/gl_help.c"
 $35 = $program; //@line 84 "src/texttest/../puun/gf/gl_help.c"
 STACKTOP = sp;return ($35|0); //@line 84 "src/texttest/../puun/gf/gl_help.c"
}
function _create_square_list($agg$result,$program,$squares) {
 $agg$result = $agg$result|0;
 $program = $program|0;
 $squares = $squares|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $sl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sl = sp;
 $0 = $program;
 $1 = $squares;
 ;HEAP32[$sl+0>>2]=0|0;HEAP32[$sl+4>>2]=0|0;HEAP32[$sl+8>>2]=0|0;HEAP32[$sl+12>>2]=0|0; //@line 22 "src/texttest/../puun/gf/square2.c"
 $2 = $1; //@line 23 "src/texttest/../puun/gf/square2.c"
 HEAP32[$sl>>2] = $2; //@line 23 "src/texttest/../puun/gf/square2.c"
 $3 = (($sl) + 4|0); //@line 24 "src/texttest/../puun/gf/square2.c"
 HEAP32[$3>>2] = 0; //@line 24 "src/texttest/../puun/gf/square2.c"
 $4 = $0; //@line 26 "src/texttest/../puun/gf/square2.c"
 $5 = (($sl) + 8|0); //@line 26 "src/texttest/../puun/gf/square2.c"
 HEAP8[$5>>0] = $4; //@line 26 "src/texttest/../puun/gf/square2.c"
 $6 = (($sl) + 12|0); //@line 27 "src/texttest/../puun/gf/square2.c"
 _glGenBuffers(1,($6|0)); //@line 27 "src/texttest/../puun/gf/square2.c"
 ;HEAP32[$agg$result+0>>2]=HEAP32[$sl+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$sl+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$sl+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$sl+12>>2]|0; //@line 29 "src/texttest/../puun/gf/square2.c"
 STACKTOP = sp;return; //@line 29 "src/texttest/../puun/gf/square2.c"
}
function _squareList_update_pos($sl,$d) {
 $sl = $sl|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0.0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0;
 var $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0.0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0;
 var $97 = 0.0, $98 = 0.0, $99 = 0.0, $blx = 0.0, $bly = 0.0, $brx = 0.0, $bry = 0.0, $by = 0.0, $co = 0.0, $data = 0, $dataI = 0, $i = 0, $lx = 0.0, $pos = 0, $rx = 0.0, $s = 0, $scale = 0, $si = 0.0, $stride = 0, $tlx = 0.0;
 var $tly = 0.0, $trx = 0.0, $try = 0.0, $ty = 0.0, $uv = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 72|0;
 $0 = $d;
 $1 = $0; //@line 34 "src/texttest/../puun/gf/square2.c"
 $data = $1; //@line 34 "src/texttest/../puun/gf/square2.c"
 $i = 0; //@line 37 "src/texttest/../puun/gf/square2.c"
 $dataI = 0; //@line 37 "src/texttest/../puun/gf/square2.c"
 while(1) {
  $2 = $i; //@line 37 "src/texttest/../puun/gf/square2.c"
  $3 = (($sl) + 4|0); //@line 37 "src/texttest/../puun/gf/square2.c"
  $4 = HEAP32[$3>>2]|0; //@line 37 "src/texttest/../puun/gf/square2.c"
  $5 = ($2|0)<($4|0); //@line 37 "src/texttest/../puun/gf/square2.c"
  if (!($5)) {
   break;
  }
  $6 = $i; //@line 38 "src/texttest/../puun/gf/square2.c"
  $7 = HEAP32[$sl>>2]|0; //@line 38 "src/texttest/../puun/gf/square2.c"
  $8 = (($7) + (($6*40)|0)|0); //@line 38 "src/texttest/../puun/gf/square2.c"
  dest=$s+0|0; src=$8+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 38 "src/texttest/../puun/gf/square2.c"
  $9 = (($s) + 16|0); //@line 39 "src/texttest/../puun/gf/square2.c"
  $10 = +HEAPF32[$9>>2]; //@line 39 "src/texttest/../puun/gf/square2.c"
  $11 = -$10; //@line 39 "src/texttest/../puun/gf/square2.c"
  $12 = $11 / 2.0; //@line 39 "src/texttest/../puun/gf/square2.c"
  $lx = $12; //@line 39 "src/texttest/../puun/gf/square2.c"
  $13 = (($s) + 20|0); //@line 39 "src/texttest/../puun/gf/square2.c"
  $14 = +HEAPF32[$13>>2]; //@line 39 "src/texttest/../puun/gf/square2.c"
  $15 = -$14; //@line 39 "src/texttest/../puun/gf/square2.c"
  $16 = $15 / 2.0; //@line 39 "src/texttest/../puun/gf/square2.c"
  $by = $16; //@line 39 "src/texttest/../puun/gf/square2.c"
  $17 = (($s) + 16|0); //@line 39 "src/texttest/../puun/gf/square2.c"
  $18 = +HEAPF32[$17>>2]; //@line 39 "src/texttest/../puun/gf/square2.c"
  $19 = $18 / 2.0; //@line 39 "src/texttest/../puun/gf/square2.c"
  $rx = $19; //@line 39 "src/texttest/../puun/gf/square2.c"
  $20 = (($s) + 20|0); //@line 39 "src/texttest/../puun/gf/square2.c"
  $21 = +HEAPF32[$20>>2]; //@line 39 "src/texttest/../puun/gf/square2.c"
  $22 = $21 / 2.0; //@line 39 "src/texttest/../puun/gf/square2.c"
  $ty = $22; //@line 39 "src/texttest/../puun/gf/square2.c"
  $23 = (($s) + 12|0); //@line 41 "src/texttest/../puun/gf/square2.c"
  $24 = +HEAPF32[$23>>2]; //@line 41 "src/texttest/../puun/gf/square2.c"
  $25 = $24; //@line 41 "src/texttest/../puun/gf/square2.c"
  $26 = (+Math_cos((+$25))); //@line 41 "src/texttest/../puun/gf/square2.c"
  $27 = $26; //@line 41 "src/texttest/../puun/gf/square2.c"
  $co = $27; //@line 41 "src/texttest/../puun/gf/square2.c"
  $28 = (($s) + 12|0); //@line 42 "src/texttest/../puun/gf/square2.c"
  $29 = +HEAPF32[$28>>2]; //@line 42 "src/texttest/../puun/gf/square2.c"
  $30 = $29; //@line 42 "src/texttest/../puun/gf/square2.c"
  $31 = (+Math_sin((+$30))); //@line 42 "src/texttest/../puun/gf/square2.c"
  $32 = $31; //@line 42 "src/texttest/../puun/gf/square2.c"
  $si = $32; //@line 42 "src/texttest/../puun/gf/square2.c"
  $33 = $co; //@line 43 "src/texttest/../puun/gf/square2.c"
  $34 = $lx; //@line 43 "src/texttest/../puun/gf/square2.c"
  $35 = $33 * $34; //@line 43 "src/texttest/../puun/gf/square2.c"
  $36 = $si; //@line 43 "src/texttest/../puun/gf/square2.c"
  $37 = $by; //@line 43 "src/texttest/../puun/gf/square2.c"
  $38 = $36 * $37; //@line 43 "src/texttest/../puun/gf/square2.c"
  $39 = $35 + $38; //@line 43 "src/texttest/../puun/gf/square2.c"
  $40 = +HEAPF32[$s>>2]; //@line 43 "src/texttest/../puun/gf/square2.c"
  $41 = $39 + $40; //@line 43 "src/texttest/../puun/gf/square2.c"
  $blx = $41; //@line 43 "src/texttest/../puun/gf/square2.c"
  $42 = $si; //@line 44 "src/texttest/../puun/gf/square2.c"
  $43 = -$42; //@line 44 "src/texttest/../puun/gf/square2.c"
  $44 = $lx; //@line 44 "src/texttest/../puun/gf/square2.c"
  $45 = $43 * $44; //@line 44 "src/texttest/../puun/gf/square2.c"
  $46 = $co; //@line 44 "src/texttest/../puun/gf/square2.c"
  $47 = $by; //@line 44 "src/texttest/../puun/gf/square2.c"
  $48 = $46 * $47; //@line 44 "src/texttest/../puun/gf/square2.c"
  $49 = $45 + $48; //@line 44 "src/texttest/../puun/gf/square2.c"
  $50 = (($s) + 4|0); //@line 44 "src/texttest/../puun/gf/square2.c"
  $51 = +HEAPF32[$50>>2]; //@line 44 "src/texttest/../puun/gf/square2.c"
  $52 = $49 + $51; //@line 44 "src/texttest/../puun/gf/square2.c"
  $bly = $52; //@line 44 "src/texttest/../puun/gf/square2.c"
  $53 = $co; //@line 45 "src/texttest/../puun/gf/square2.c"
  $54 = $rx; //@line 45 "src/texttest/../puun/gf/square2.c"
  $55 = $53 * $54; //@line 45 "src/texttest/../puun/gf/square2.c"
  $56 = $si; //@line 45 "src/texttest/../puun/gf/square2.c"
  $57 = $by; //@line 45 "src/texttest/../puun/gf/square2.c"
  $58 = $56 * $57; //@line 45 "src/texttest/../puun/gf/square2.c"
  $59 = $55 + $58; //@line 45 "src/texttest/../puun/gf/square2.c"
  $60 = +HEAPF32[$s>>2]; //@line 45 "src/texttest/../puun/gf/square2.c"
  $61 = $59 + $60; //@line 45 "src/texttest/../puun/gf/square2.c"
  $brx = $61; //@line 45 "src/texttest/../puun/gf/square2.c"
  $62 = $si; //@line 46 "src/texttest/../puun/gf/square2.c"
  $63 = -$62; //@line 46 "src/texttest/../puun/gf/square2.c"
  $64 = $rx; //@line 46 "src/texttest/../puun/gf/square2.c"
  $65 = $63 * $64; //@line 46 "src/texttest/../puun/gf/square2.c"
  $66 = $co; //@line 46 "src/texttest/../puun/gf/square2.c"
  $67 = $by; //@line 46 "src/texttest/../puun/gf/square2.c"
  $68 = $66 * $67; //@line 46 "src/texttest/../puun/gf/square2.c"
  $69 = $65 + $68; //@line 46 "src/texttest/../puun/gf/square2.c"
  $70 = (($s) + 4|0); //@line 46 "src/texttest/../puun/gf/square2.c"
  $71 = +HEAPF32[$70>>2]; //@line 46 "src/texttest/../puun/gf/square2.c"
  $72 = $69 + $71; //@line 46 "src/texttest/../puun/gf/square2.c"
  $bry = $72; //@line 46 "src/texttest/../puun/gf/square2.c"
  $73 = $co; //@line 47 "src/texttest/../puun/gf/square2.c"
  $74 = $lx; //@line 47 "src/texttest/../puun/gf/square2.c"
  $75 = $73 * $74; //@line 47 "src/texttest/../puun/gf/square2.c"
  $76 = $si; //@line 47 "src/texttest/../puun/gf/square2.c"
  $77 = $ty; //@line 47 "src/texttest/../puun/gf/square2.c"
  $78 = $76 * $77; //@line 47 "src/texttest/../puun/gf/square2.c"
  $79 = $75 + $78; //@line 47 "src/texttest/../puun/gf/square2.c"
  $80 = +HEAPF32[$s>>2]; //@line 47 "src/texttest/../puun/gf/square2.c"
  $81 = $79 + $80; //@line 47 "src/texttest/../puun/gf/square2.c"
  $tlx = $81; //@line 47 "src/texttest/../puun/gf/square2.c"
  $82 = $si; //@line 48 "src/texttest/../puun/gf/square2.c"
  $83 = -$82; //@line 48 "src/texttest/../puun/gf/square2.c"
  $84 = $lx; //@line 48 "src/texttest/../puun/gf/square2.c"
  $85 = $83 * $84; //@line 48 "src/texttest/../puun/gf/square2.c"
  $86 = $co; //@line 48 "src/texttest/../puun/gf/square2.c"
  $87 = $ty; //@line 48 "src/texttest/../puun/gf/square2.c"
  $88 = $86 * $87; //@line 48 "src/texttest/../puun/gf/square2.c"
  $89 = $85 + $88; //@line 48 "src/texttest/../puun/gf/square2.c"
  $90 = (($s) + 4|0); //@line 48 "src/texttest/../puun/gf/square2.c"
  $91 = +HEAPF32[$90>>2]; //@line 48 "src/texttest/../puun/gf/square2.c"
  $92 = $89 + $91; //@line 48 "src/texttest/../puun/gf/square2.c"
  $tly = $92; //@line 48 "src/texttest/../puun/gf/square2.c"
  $93 = $co; //@line 49 "src/texttest/../puun/gf/square2.c"
  $94 = $rx; //@line 49 "src/texttest/../puun/gf/square2.c"
  $95 = $93 * $94; //@line 49 "src/texttest/../puun/gf/square2.c"
  $96 = $si; //@line 49 "src/texttest/../puun/gf/square2.c"
  $97 = $ty; //@line 49 "src/texttest/../puun/gf/square2.c"
  $98 = $96 * $97; //@line 49 "src/texttest/../puun/gf/square2.c"
  $99 = $95 + $98; //@line 49 "src/texttest/../puun/gf/square2.c"
  $100 = +HEAPF32[$s>>2]; //@line 49 "src/texttest/../puun/gf/square2.c"
  $101 = $99 + $100; //@line 49 "src/texttest/../puun/gf/square2.c"
  $trx = $101; //@line 49 "src/texttest/../puun/gf/square2.c"
  $102 = $si; //@line 50 "src/texttest/../puun/gf/square2.c"
  $103 = -$102; //@line 50 "src/texttest/../puun/gf/square2.c"
  $104 = $rx; //@line 50 "src/texttest/../puun/gf/square2.c"
  $105 = $103 * $104; //@line 50 "src/texttest/../puun/gf/square2.c"
  $106 = $co; //@line 50 "src/texttest/../puun/gf/square2.c"
  $107 = $ty; //@line 50 "src/texttest/../puun/gf/square2.c"
  $108 = $106 * $107; //@line 50 "src/texttest/../puun/gf/square2.c"
  $109 = $105 + $108; //@line 50 "src/texttest/../puun/gf/square2.c"
  $110 = (($s) + 4|0); //@line 50 "src/texttest/../puun/gf/square2.c"
  $111 = +HEAPF32[$110>>2]; //@line 50 "src/texttest/../puun/gf/square2.c"
  $112 = $109 + $111; //@line 50 "src/texttest/../puun/gf/square2.c"
  $try = $112; //@line 50 "src/texttest/../puun/gf/square2.c"
  $113 = $blx; //@line 53 "src/texttest/../puun/gf/square2.c"
  $114 = $dataI; //@line 53 "src/texttest/../puun/gf/square2.c"
  $115 = $data; //@line 53 "src/texttest/../puun/gf/square2.c"
  $116 = (($115) + ($114<<2)|0); //@line 53 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$116>>2] = $113; //@line 53 "src/texttest/../puun/gf/square2.c"
  $117 = $dataI; //@line 53 "src/texttest/../puun/gf/square2.c"
  $118 = (($117) + 1)|0; //@line 53 "src/texttest/../puun/gf/square2.c"
  $dataI = $118; //@line 53 "src/texttest/../puun/gf/square2.c"
  $119 = $bly; //@line 54 "src/texttest/../puun/gf/square2.c"
  $120 = $dataI; //@line 54 "src/texttest/../puun/gf/square2.c"
  $121 = $data; //@line 54 "src/texttest/../puun/gf/square2.c"
  $122 = (($121) + ($120<<2)|0); //@line 54 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$122>>2] = $119; //@line 54 "src/texttest/../puun/gf/square2.c"
  $123 = $dataI; //@line 54 "src/texttest/../puun/gf/square2.c"
  $124 = (($123) + 1)|0; //@line 54 "src/texttest/../puun/gf/square2.c"
  $dataI = $124; //@line 54 "src/texttest/../puun/gf/square2.c"
  $125 = $dataI; //@line 55 "src/texttest/../puun/gf/square2.c"
  $126 = $data; //@line 55 "src/texttest/../puun/gf/square2.c"
  $127 = (($126) + ($125<<2)|0); //@line 55 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$127>>2] = 0.0; //@line 55 "src/texttest/../puun/gf/square2.c"
  $128 = $dataI; //@line 55 "src/texttest/../puun/gf/square2.c"
  $129 = (($128) + 1)|0; //@line 55 "src/texttest/../puun/gf/square2.c"
  $dataI = $129; //@line 55 "src/texttest/../puun/gf/square2.c"
  $130 = (($s) + 24|0); //@line 58 "src/texttest/../puun/gf/square2.c"
  $131 = +HEAPF32[$130>>2]; //@line 58 "src/texttest/../puun/gf/square2.c"
  $132 = $dataI; //@line 58 "src/texttest/../puun/gf/square2.c"
  $133 = $data; //@line 58 "src/texttest/../puun/gf/square2.c"
  $134 = (($133) + ($132<<2)|0); //@line 58 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$134>>2] = $131; //@line 58 "src/texttest/../puun/gf/square2.c"
  $135 = $dataI; //@line 58 "src/texttest/../puun/gf/square2.c"
  $136 = (($135) + 1)|0; //@line 58 "src/texttest/../puun/gf/square2.c"
  $dataI = $136; //@line 58 "src/texttest/../puun/gf/square2.c"
  $137 = (($s) + 36|0); //@line 59 "src/texttest/../puun/gf/square2.c"
  $138 = +HEAPF32[$137>>2]; //@line 59 "src/texttest/../puun/gf/square2.c"
  $139 = $dataI; //@line 59 "src/texttest/../puun/gf/square2.c"
  $140 = $data; //@line 59 "src/texttest/../puun/gf/square2.c"
  $141 = (($140) + ($139<<2)|0); //@line 59 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$141>>2] = $138; //@line 59 "src/texttest/../puun/gf/square2.c"
  $142 = $dataI; //@line 59 "src/texttest/../puun/gf/square2.c"
  $143 = (($142) + 1)|0; //@line 59 "src/texttest/../puun/gf/square2.c"
  $dataI = $143; //@line 59 "src/texttest/../puun/gf/square2.c"
  $144 = $dataI; //@line 62 "src/texttest/../puun/gf/square2.c"
  $145 = $data; //@line 62 "src/texttest/../puun/gf/square2.c"
  $146 = (($145) + ($144<<2)|0); //@line 62 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$146>>2] = 1.0; //@line 62 "src/texttest/../puun/gf/square2.c"
  $147 = $dataI; //@line 62 "src/texttest/../puun/gf/square2.c"
  $148 = (($147) + 1)|0; //@line 62 "src/texttest/../puun/gf/square2.c"
  $dataI = $148; //@line 62 "src/texttest/../puun/gf/square2.c"
  $149 = $dataI; //@line 63 "src/texttest/../puun/gf/square2.c"
  $150 = $data; //@line 63 "src/texttest/../puun/gf/square2.c"
  $151 = (($150) + ($149<<2)|0); //@line 63 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$151>>2] = 1.0; //@line 63 "src/texttest/../puun/gf/square2.c"
  $152 = $dataI; //@line 63 "src/texttest/../puun/gf/square2.c"
  $153 = (($152) + 1)|0; //@line 63 "src/texttest/../puun/gf/square2.c"
  $dataI = $153; //@line 63 "src/texttest/../puun/gf/square2.c"
  $154 = $brx; //@line 67 "src/texttest/../puun/gf/square2.c"
  $155 = $dataI; //@line 67 "src/texttest/../puun/gf/square2.c"
  $156 = $data; //@line 67 "src/texttest/../puun/gf/square2.c"
  $157 = (($156) + ($155<<2)|0); //@line 67 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$157>>2] = $154; //@line 67 "src/texttest/../puun/gf/square2.c"
  $158 = $dataI; //@line 67 "src/texttest/../puun/gf/square2.c"
  $159 = (($158) + 1)|0; //@line 67 "src/texttest/../puun/gf/square2.c"
  $dataI = $159; //@line 67 "src/texttest/../puun/gf/square2.c"
  $160 = $bry; //@line 68 "src/texttest/../puun/gf/square2.c"
  $161 = $dataI; //@line 68 "src/texttest/../puun/gf/square2.c"
  $162 = $data; //@line 68 "src/texttest/../puun/gf/square2.c"
  $163 = (($162) + ($161<<2)|0); //@line 68 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$163>>2] = $160; //@line 68 "src/texttest/../puun/gf/square2.c"
  $164 = $dataI; //@line 68 "src/texttest/../puun/gf/square2.c"
  $165 = (($164) + 1)|0; //@line 68 "src/texttest/../puun/gf/square2.c"
  $dataI = $165; //@line 68 "src/texttest/../puun/gf/square2.c"
  $166 = (($s) + 8|0); //@line 69 "src/texttest/../puun/gf/square2.c"
  $167 = +HEAPF32[$166>>2]; //@line 69 "src/texttest/../puun/gf/square2.c"
  $168 = $dataI; //@line 69 "src/texttest/../puun/gf/square2.c"
  $169 = $data; //@line 69 "src/texttest/../puun/gf/square2.c"
  $170 = (($169) + ($168<<2)|0); //@line 69 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$170>>2] = $167; //@line 69 "src/texttest/../puun/gf/square2.c"
  $171 = $dataI; //@line 69 "src/texttest/../puun/gf/square2.c"
  $172 = (($171) + 1)|0; //@line 69 "src/texttest/../puun/gf/square2.c"
  $dataI = $172; //@line 69 "src/texttest/../puun/gf/square2.c"
  $173 = (($s) + 32|0); //@line 72 "src/texttest/../puun/gf/square2.c"
  $174 = +HEAPF32[$173>>2]; //@line 72 "src/texttest/../puun/gf/square2.c"
  $175 = $dataI; //@line 72 "src/texttest/../puun/gf/square2.c"
  $176 = $data; //@line 72 "src/texttest/../puun/gf/square2.c"
  $177 = (($176) + ($175<<2)|0); //@line 72 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$177>>2] = $174; //@line 72 "src/texttest/../puun/gf/square2.c"
  $178 = $dataI; //@line 72 "src/texttest/../puun/gf/square2.c"
  $179 = (($178) + 1)|0; //@line 72 "src/texttest/../puun/gf/square2.c"
  $dataI = $179; //@line 72 "src/texttest/../puun/gf/square2.c"
  $180 = (($s) + 36|0); //@line 73 "src/texttest/../puun/gf/square2.c"
  $181 = +HEAPF32[$180>>2]; //@line 73 "src/texttest/../puun/gf/square2.c"
  $182 = $dataI; //@line 73 "src/texttest/../puun/gf/square2.c"
  $183 = $data; //@line 73 "src/texttest/../puun/gf/square2.c"
  $184 = (($183) + ($182<<2)|0); //@line 73 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$184>>2] = $181; //@line 73 "src/texttest/../puun/gf/square2.c"
  $185 = $dataI; //@line 73 "src/texttest/../puun/gf/square2.c"
  $186 = (($185) + 1)|0; //@line 73 "src/texttest/../puun/gf/square2.c"
  $dataI = $186; //@line 73 "src/texttest/../puun/gf/square2.c"
  $187 = $dataI; //@line 76 "src/texttest/../puun/gf/square2.c"
  $188 = $data; //@line 76 "src/texttest/../puun/gf/square2.c"
  $189 = (($188) + ($187<<2)|0); //@line 76 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$189>>2] = 1.0; //@line 76 "src/texttest/../puun/gf/square2.c"
  $190 = $dataI; //@line 76 "src/texttest/../puun/gf/square2.c"
  $191 = (($190) + 1)|0; //@line 76 "src/texttest/../puun/gf/square2.c"
  $dataI = $191; //@line 76 "src/texttest/../puun/gf/square2.c"
  $192 = $dataI; //@line 77 "src/texttest/../puun/gf/square2.c"
  $193 = $data; //@line 77 "src/texttest/../puun/gf/square2.c"
  $194 = (($193) + ($192<<2)|0); //@line 77 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$194>>2] = 1.0; //@line 77 "src/texttest/../puun/gf/square2.c"
  $195 = $dataI; //@line 77 "src/texttest/../puun/gf/square2.c"
  $196 = (($195) + 1)|0; //@line 77 "src/texttest/../puun/gf/square2.c"
  $dataI = $196; //@line 77 "src/texttest/../puun/gf/square2.c"
  $197 = $tlx; //@line 81 "src/texttest/../puun/gf/square2.c"
  $198 = $dataI; //@line 81 "src/texttest/../puun/gf/square2.c"
  $199 = $data; //@line 81 "src/texttest/../puun/gf/square2.c"
  $200 = (($199) + ($198<<2)|0); //@line 81 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$200>>2] = $197; //@line 81 "src/texttest/../puun/gf/square2.c"
  $201 = $dataI; //@line 81 "src/texttest/../puun/gf/square2.c"
  $202 = (($201) + 1)|0; //@line 81 "src/texttest/../puun/gf/square2.c"
  $dataI = $202; //@line 81 "src/texttest/../puun/gf/square2.c"
  $203 = $tly; //@line 82 "src/texttest/../puun/gf/square2.c"
  $204 = $dataI; //@line 82 "src/texttest/../puun/gf/square2.c"
  $205 = $data; //@line 82 "src/texttest/../puun/gf/square2.c"
  $206 = (($205) + ($204<<2)|0); //@line 82 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$206>>2] = $203; //@line 82 "src/texttest/../puun/gf/square2.c"
  $207 = $dataI; //@line 82 "src/texttest/../puun/gf/square2.c"
  $208 = (($207) + 1)|0; //@line 82 "src/texttest/../puun/gf/square2.c"
  $dataI = $208; //@line 82 "src/texttest/../puun/gf/square2.c"
  $209 = (($s) + 8|0); //@line 83 "src/texttest/../puun/gf/square2.c"
  $210 = +HEAPF32[$209>>2]; //@line 83 "src/texttest/../puun/gf/square2.c"
  $211 = $dataI; //@line 83 "src/texttest/../puun/gf/square2.c"
  $212 = $data; //@line 83 "src/texttest/../puun/gf/square2.c"
  $213 = (($212) + ($211<<2)|0); //@line 83 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$213>>2] = $210; //@line 83 "src/texttest/../puun/gf/square2.c"
  $214 = $dataI; //@line 83 "src/texttest/../puun/gf/square2.c"
  $215 = (($214) + 1)|0; //@line 83 "src/texttest/../puun/gf/square2.c"
  $dataI = $215; //@line 83 "src/texttest/../puun/gf/square2.c"
  $216 = (($s) + 24|0); //@line 86 "src/texttest/../puun/gf/square2.c"
  $217 = +HEAPF32[$216>>2]; //@line 86 "src/texttest/../puun/gf/square2.c"
  $218 = $dataI; //@line 86 "src/texttest/../puun/gf/square2.c"
  $219 = $data; //@line 86 "src/texttest/../puun/gf/square2.c"
  $220 = (($219) + ($218<<2)|0); //@line 86 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$220>>2] = $217; //@line 86 "src/texttest/../puun/gf/square2.c"
  $221 = $dataI; //@line 86 "src/texttest/../puun/gf/square2.c"
  $222 = (($221) + 1)|0; //@line 86 "src/texttest/../puun/gf/square2.c"
  $dataI = $222; //@line 86 "src/texttest/../puun/gf/square2.c"
  $223 = (($s) + 28|0); //@line 87 "src/texttest/../puun/gf/square2.c"
  $224 = +HEAPF32[$223>>2]; //@line 87 "src/texttest/../puun/gf/square2.c"
  $225 = $dataI; //@line 87 "src/texttest/../puun/gf/square2.c"
  $226 = $data; //@line 87 "src/texttest/../puun/gf/square2.c"
  $227 = (($226) + ($225<<2)|0); //@line 87 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$227>>2] = $224; //@line 87 "src/texttest/../puun/gf/square2.c"
  $228 = $dataI; //@line 87 "src/texttest/../puun/gf/square2.c"
  $229 = (($228) + 1)|0; //@line 87 "src/texttest/../puun/gf/square2.c"
  $dataI = $229; //@line 87 "src/texttest/../puun/gf/square2.c"
  $230 = $dataI; //@line 90 "src/texttest/../puun/gf/square2.c"
  $231 = $data; //@line 90 "src/texttest/../puun/gf/square2.c"
  $232 = (($231) + ($230<<2)|0); //@line 90 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$232>>2] = 1.0; //@line 90 "src/texttest/../puun/gf/square2.c"
  $233 = $dataI; //@line 90 "src/texttest/../puun/gf/square2.c"
  $234 = (($233) + 1)|0; //@line 90 "src/texttest/../puun/gf/square2.c"
  $dataI = $234; //@line 90 "src/texttest/../puun/gf/square2.c"
  $235 = $dataI; //@line 91 "src/texttest/../puun/gf/square2.c"
  $236 = $data; //@line 91 "src/texttest/../puun/gf/square2.c"
  $237 = (($236) + ($235<<2)|0); //@line 91 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$237>>2] = 1.0; //@line 91 "src/texttest/../puun/gf/square2.c"
  $238 = $dataI; //@line 91 "src/texttest/../puun/gf/square2.c"
  $239 = (($238) + 1)|0; //@line 91 "src/texttest/../puun/gf/square2.c"
  $dataI = $239; //@line 91 "src/texttest/../puun/gf/square2.c"
  $240 = $brx; //@line 95 "src/texttest/../puun/gf/square2.c"
  $241 = $dataI; //@line 95 "src/texttest/../puun/gf/square2.c"
  $242 = $data; //@line 95 "src/texttest/../puun/gf/square2.c"
  $243 = (($242) + ($241<<2)|0); //@line 95 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$243>>2] = $240; //@line 95 "src/texttest/../puun/gf/square2.c"
  $244 = $dataI; //@line 95 "src/texttest/../puun/gf/square2.c"
  $245 = (($244) + 1)|0; //@line 95 "src/texttest/../puun/gf/square2.c"
  $dataI = $245; //@line 95 "src/texttest/../puun/gf/square2.c"
  $246 = $bry; //@line 96 "src/texttest/../puun/gf/square2.c"
  $247 = $dataI; //@line 96 "src/texttest/../puun/gf/square2.c"
  $248 = $data; //@line 96 "src/texttest/../puun/gf/square2.c"
  $249 = (($248) + ($247<<2)|0); //@line 96 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$249>>2] = $246; //@line 96 "src/texttest/../puun/gf/square2.c"
  $250 = $dataI; //@line 96 "src/texttest/../puun/gf/square2.c"
  $251 = (($250) + 1)|0; //@line 96 "src/texttest/../puun/gf/square2.c"
  $dataI = $251; //@line 96 "src/texttest/../puun/gf/square2.c"
  $252 = (($s) + 8|0); //@line 97 "src/texttest/../puun/gf/square2.c"
  $253 = +HEAPF32[$252>>2]; //@line 97 "src/texttest/../puun/gf/square2.c"
  $254 = $dataI; //@line 97 "src/texttest/../puun/gf/square2.c"
  $255 = $data; //@line 97 "src/texttest/../puun/gf/square2.c"
  $256 = (($255) + ($254<<2)|0); //@line 97 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$256>>2] = $253; //@line 97 "src/texttest/../puun/gf/square2.c"
  $257 = $dataI; //@line 97 "src/texttest/../puun/gf/square2.c"
  $258 = (($257) + 1)|0; //@line 97 "src/texttest/../puun/gf/square2.c"
  $dataI = $258; //@line 97 "src/texttest/../puun/gf/square2.c"
  $259 = (($s) + 32|0); //@line 100 "src/texttest/../puun/gf/square2.c"
  $260 = +HEAPF32[$259>>2]; //@line 100 "src/texttest/../puun/gf/square2.c"
  $261 = $dataI; //@line 100 "src/texttest/../puun/gf/square2.c"
  $262 = $data; //@line 100 "src/texttest/../puun/gf/square2.c"
  $263 = (($262) + ($261<<2)|0); //@line 100 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$263>>2] = $260; //@line 100 "src/texttest/../puun/gf/square2.c"
  $264 = $dataI; //@line 100 "src/texttest/../puun/gf/square2.c"
  $265 = (($264) + 1)|0; //@line 100 "src/texttest/../puun/gf/square2.c"
  $dataI = $265; //@line 100 "src/texttest/../puun/gf/square2.c"
  $266 = (($s) + 36|0); //@line 101 "src/texttest/../puun/gf/square2.c"
  $267 = +HEAPF32[$266>>2]; //@line 101 "src/texttest/../puun/gf/square2.c"
  $268 = $dataI; //@line 101 "src/texttest/../puun/gf/square2.c"
  $269 = $data; //@line 101 "src/texttest/../puun/gf/square2.c"
  $270 = (($269) + ($268<<2)|0); //@line 101 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$270>>2] = $267; //@line 101 "src/texttest/../puun/gf/square2.c"
  $271 = $dataI; //@line 101 "src/texttest/../puun/gf/square2.c"
  $272 = (($271) + 1)|0; //@line 101 "src/texttest/../puun/gf/square2.c"
  $dataI = $272; //@line 101 "src/texttest/../puun/gf/square2.c"
  $273 = $dataI; //@line 104 "src/texttest/../puun/gf/square2.c"
  $274 = $data; //@line 104 "src/texttest/../puun/gf/square2.c"
  $275 = (($274) + ($273<<2)|0); //@line 104 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$275>>2] = 1.0; //@line 104 "src/texttest/../puun/gf/square2.c"
  $276 = $dataI; //@line 104 "src/texttest/../puun/gf/square2.c"
  $277 = (($276) + 1)|0; //@line 104 "src/texttest/../puun/gf/square2.c"
  $dataI = $277; //@line 104 "src/texttest/../puun/gf/square2.c"
  $278 = $dataI; //@line 105 "src/texttest/../puun/gf/square2.c"
  $279 = $data; //@line 105 "src/texttest/../puun/gf/square2.c"
  $280 = (($279) + ($278<<2)|0); //@line 105 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$280>>2] = 1.0; //@line 105 "src/texttest/../puun/gf/square2.c"
  $281 = $dataI; //@line 105 "src/texttest/../puun/gf/square2.c"
  $282 = (($281) + 1)|0; //@line 105 "src/texttest/../puun/gf/square2.c"
  $dataI = $282; //@line 105 "src/texttest/../puun/gf/square2.c"
  $283 = $tlx; //@line 109 "src/texttest/../puun/gf/square2.c"
  $284 = $dataI; //@line 109 "src/texttest/../puun/gf/square2.c"
  $285 = $data; //@line 109 "src/texttest/../puun/gf/square2.c"
  $286 = (($285) + ($284<<2)|0); //@line 109 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$286>>2] = $283; //@line 109 "src/texttest/../puun/gf/square2.c"
  $287 = $dataI; //@line 109 "src/texttest/../puun/gf/square2.c"
  $288 = (($287) + 1)|0; //@line 109 "src/texttest/../puun/gf/square2.c"
  $dataI = $288; //@line 109 "src/texttest/../puun/gf/square2.c"
  $289 = $tly; //@line 110 "src/texttest/../puun/gf/square2.c"
  $290 = $dataI; //@line 110 "src/texttest/../puun/gf/square2.c"
  $291 = $data; //@line 110 "src/texttest/../puun/gf/square2.c"
  $292 = (($291) + ($290<<2)|0); //@line 110 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$292>>2] = $289; //@line 110 "src/texttest/../puun/gf/square2.c"
  $293 = $dataI; //@line 110 "src/texttest/../puun/gf/square2.c"
  $294 = (($293) + 1)|0; //@line 110 "src/texttest/../puun/gf/square2.c"
  $dataI = $294; //@line 110 "src/texttest/../puun/gf/square2.c"
  $295 = (($s) + 8|0); //@line 111 "src/texttest/../puun/gf/square2.c"
  $296 = +HEAPF32[$295>>2]; //@line 111 "src/texttest/../puun/gf/square2.c"
  $297 = $dataI; //@line 111 "src/texttest/../puun/gf/square2.c"
  $298 = $data; //@line 111 "src/texttest/../puun/gf/square2.c"
  $299 = (($298) + ($297<<2)|0); //@line 111 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$299>>2] = $296; //@line 111 "src/texttest/../puun/gf/square2.c"
  $300 = $dataI; //@line 111 "src/texttest/../puun/gf/square2.c"
  $301 = (($300) + 1)|0; //@line 111 "src/texttest/../puun/gf/square2.c"
  $dataI = $301; //@line 111 "src/texttest/../puun/gf/square2.c"
  $302 = (($s) + 24|0); //@line 114 "src/texttest/../puun/gf/square2.c"
  $303 = +HEAPF32[$302>>2]; //@line 114 "src/texttest/../puun/gf/square2.c"
  $304 = $dataI; //@line 114 "src/texttest/../puun/gf/square2.c"
  $305 = $data; //@line 114 "src/texttest/../puun/gf/square2.c"
  $306 = (($305) + ($304<<2)|0); //@line 114 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$306>>2] = $303; //@line 114 "src/texttest/../puun/gf/square2.c"
  $307 = $dataI; //@line 114 "src/texttest/../puun/gf/square2.c"
  $308 = (($307) + 1)|0; //@line 114 "src/texttest/../puun/gf/square2.c"
  $dataI = $308; //@line 114 "src/texttest/../puun/gf/square2.c"
  $309 = (($s) + 28|0); //@line 115 "src/texttest/../puun/gf/square2.c"
  $310 = +HEAPF32[$309>>2]; //@line 115 "src/texttest/../puun/gf/square2.c"
  $311 = $dataI; //@line 115 "src/texttest/../puun/gf/square2.c"
  $312 = $data; //@line 115 "src/texttest/../puun/gf/square2.c"
  $313 = (($312) + ($311<<2)|0); //@line 115 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$313>>2] = $310; //@line 115 "src/texttest/../puun/gf/square2.c"
  $314 = $dataI; //@line 115 "src/texttest/../puun/gf/square2.c"
  $315 = (($314) + 1)|0; //@line 115 "src/texttest/../puun/gf/square2.c"
  $dataI = $315; //@line 115 "src/texttest/../puun/gf/square2.c"
  $316 = $dataI; //@line 118 "src/texttest/../puun/gf/square2.c"
  $317 = $data; //@line 118 "src/texttest/../puun/gf/square2.c"
  $318 = (($317) + ($316<<2)|0); //@line 118 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$318>>2] = 1.0; //@line 118 "src/texttest/../puun/gf/square2.c"
  $319 = $dataI; //@line 118 "src/texttest/../puun/gf/square2.c"
  $320 = (($319) + 1)|0; //@line 118 "src/texttest/../puun/gf/square2.c"
  $dataI = $320; //@line 118 "src/texttest/../puun/gf/square2.c"
  $321 = $dataI; //@line 119 "src/texttest/../puun/gf/square2.c"
  $322 = $data; //@line 119 "src/texttest/../puun/gf/square2.c"
  $323 = (($322) + ($321<<2)|0); //@line 119 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$323>>2] = 1.0; //@line 119 "src/texttest/../puun/gf/square2.c"
  $324 = $dataI; //@line 119 "src/texttest/../puun/gf/square2.c"
  $325 = (($324) + 1)|0; //@line 119 "src/texttest/../puun/gf/square2.c"
  $dataI = $325; //@line 119 "src/texttest/../puun/gf/square2.c"
  $326 = $trx; //@line 123 "src/texttest/../puun/gf/square2.c"
  $327 = $dataI; //@line 123 "src/texttest/../puun/gf/square2.c"
  $328 = $data; //@line 123 "src/texttest/../puun/gf/square2.c"
  $329 = (($328) + ($327<<2)|0); //@line 123 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$329>>2] = $326; //@line 123 "src/texttest/../puun/gf/square2.c"
  $330 = $dataI; //@line 123 "src/texttest/../puun/gf/square2.c"
  $331 = (($330) + 1)|0; //@line 123 "src/texttest/../puun/gf/square2.c"
  $dataI = $331; //@line 123 "src/texttest/../puun/gf/square2.c"
  $332 = $try; //@line 124 "src/texttest/../puun/gf/square2.c"
  $333 = $dataI; //@line 124 "src/texttest/../puun/gf/square2.c"
  $334 = $data; //@line 124 "src/texttest/../puun/gf/square2.c"
  $335 = (($334) + ($333<<2)|0); //@line 124 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$335>>2] = $332; //@line 124 "src/texttest/../puun/gf/square2.c"
  $336 = $dataI; //@line 124 "src/texttest/../puun/gf/square2.c"
  $337 = (($336) + 1)|0; //@line 124 "src/texttest/../puun/gf/square2.c"
  $dataI = $337; //@line 124 "src/texttest/../puun/gf/square2.c"
  $338 = (($s) + 8|0); //@line 125 "src/texttest/../puun/gf/square2.c"
  $339 = +HEAPF32[$338>>2]; //@line 125 "src/texttest/../puun/gf/square2.c"
  $340 = $dataI; //@line 125 "src/texttest/../puun/gf/square2.c"
  $341 = $data; //@line 125 "src/texttest/../puun/gf/square2.c"
  $342 = (($341) + ($340<<2)|0); //@line 125 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$342>>2] = $339; //@line 125 "src/texttest/../puun/gf/square2.c"
  $343 = $dataI; //@line 125 "src/texttest/../puun/gf/square2.c"
  $344 = (($343) + 1)|0; //@line 125 "src/texttest/../puun/gf/square2.c"
  $dataI = $344; //@line 125 "src/texttest/../puun/gf/square2.c"
  $345 = (($s) + 32|0); //@line 128 "src/texttest/../puun/gf/square2.c"
  $346 = +HEAPF32[$345>>2]; //@line 128 "src/texttest/../puun/gf/square2.c"
  $347 = $dataI; //@line 128 "src/texttest/../puun/gf/square2.c"
  $348 = $data; //@line 128 "src/texttest/../puun/gf/square2.c"
  $349 = (($348) + ($347<<2)|0); //@line 128 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$349>>2] = $346; //@line 128 "src/texttest/../puun/gf/square2.c"
  $350 = $dataI; //@line 128 "src/texttest/../puun/gf/square2.c"
  $351 = (($350) + 1)|0; //@line 128 "src/texttest/../puun/gf/square2.c"
  $dataI = $351; //@line 128 "src/texttest/../puun/gf/square2.c"
  $352 = (($s) + 28|0); //@line 129 "src/texttest/../puun/gf/square2.c"
  $353 = +HEAPF32[$352>>2]; //@line 129 "src/texttest/../puun/gf/square2.c"
  $354 = $dataI; //@line 129 "src/texttest/../puun/gf/square2.c"
  $355 = $data; //@line 129 "src/texttest/../puun/gf/square2.c"
  $356 = (($355) + ($354<<2)|0); //@line 129 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$356>>2] = $353; //@line 129 "src/texttest/../puun/gf/square2.c"
  $357 = $dataI; //@line 129 "src/texttest/../puun/gf/square2.c"
  $358 = (($357) + 1)|0; //@line 129 "src/texttest/../puun/gf/square2.c"
  $dataI = $358; //@line 129 "src/texttest/../puun/gf/square2.c"
  $359 = $dataI; //@line 132 "src/texttest/../puun/gf/square2.c"
  $360 = $data; //@line 132 "src/texttest/../puun/gf/square2.c"
  $361 = (($360) + ($359<<2)|0); //@line 132 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$361>>2] = 1.0; //@line 132 "src/texttest/../puun/gf/square2.c"
  $362 = $dataI; //@line 132 "src/texttest/../puun/gf/square2.c"
  $363 = (($362) + 1)|0; //@line 132 "src/texttest/../puun/gf/square2.c"
  $dataI = $363; //@line 132 "src/texttest/../puun/gf/square2.c"
  $364 = $dataI; //@line 133 "src/texttest/../puun/gf/square2.c"
  $365 = $data; //@line 133 "src/texttest/../puun/gf/square2.c"
  $366 = (($365) + ($364<<2)|0); //@line 133 "src/texttest/../puun/gf/square2.c"
  HEAPF32[$366>>2] = 1.0; //@line 133 "src/texttest/../puun/gf/square2.c"
  $367 = $dataI; //@line 133 "src/texttest/../puun/gf/square2.c"
  $368 = (($367) + 1)|0; //@line 133 "src/texttest/../puun/gf/square2.c"
  $dataI = $368; //@line 133 "src/texttest/../puun/gf/square2.c"
  $369 = $i; //@line 37 "src/texttest/../puun/gf/square2.c"
  $370 = (($369) + 1)|0; //@line 37 "src/texttest/../puun/gf/square2.c"
  $i = $370; //@line 37 "src/texttest/../puun/gf/square2.c"
 }
 $371 = (($sl) + 8|0); //@line 137 "src/texttest/../puun/gf/square2.c"
 $372 = HEAP8[$371>>0]|0; //@line 137 "src/texttest/../puun/gf/square2.c"
 $373 = $372&255; //@line 137 "src/texttest/../puun/gf/square2.c"
 $374 = (_glGetAttribLocation(($373|0),(1632|0))|0); //@line 137 "src/texttest/../puun/gf/square2.c"
 $pos = $374; //@line 137 "src/texttest/../puun/gf/square2.c"
 $375 = (($sl) + 8|0); //@line 138 "src/texttest/../puun/gf/square2.c"
 $376 = HEAP8[$375>>0]|0; //@line 138 "src/texttest/../puun/gf/square2.c"
 $377 = $376&255; //@line 138 "src/texttest/../puun/gf/square2.c"
 $378 = (_glGetAttribLocation(($377|0),(1648|0))|0); //@line 138 "src/texttest/../puun/gf/square2.c"
 $uv = $378; //@line 138 "src/texttest/../puun/gf/square2.c"
 $379 = (($sl) + 8|0); //@line 139 "src/texttest/../puun/gf/square2.c"
 $380 = HEAP8[$379>>0]|0; //@line 139 "src/texttest/../puun/gf/square2.c"
 $381 = $380&255; //@line 139 "src/texttest/../puun/gf/square2.c"
 $382 = (_glGetAttribLocation(($381|0),(1656|0))|0); //@line 139 "src/texttest/../puun/gf/square2.c"
 $scale = $382; //@line 139 "src/texttest/../puun/gf/square2.c"
 $stride = 28; //@line 141 "src/texttest/../puun/gf/square2.c"
 $383 = (($sl) + 12|0); //@line 143 "src/texttest/../puun/gf/square2.c"
 $384 = HEAP32[$383>>2]|0; //@line 143 "src/texttest/../puun/gf/square2.c"
 _glBindBuffer(34962,($384|0)); //@line 143 "src/texttest/../puun/gf/square2.c"
 $385 = (($sl) + 4|0); //@line 144 "src/texttest/../puun/gf/square2.c"
 $386 = HEAP32[$385>>2]|0; //@line 144 "src/texttest/../puun/gf/square2.c"
 $387 = ($386*6)|0; //@line 144 "src/texttest/../puun/gf/square2.c"
 $388 = ($387*7)|0; //@line 144 "src/texttest/../puun/gf/square2.c"
 $389 = $388<<2; //@line 144 "src/texttest/../puun/gf/square2.c"
 $390 = $data; //@line 144 "src/texttest/../puun/gf/square2.c"
 _glBufferData(34962,($389|0),($390|0),35048); //@line 144 "src/texttest/../puun/gf/square2.c"
 $391 = $pos; //@line 146 "src/texttest/../puun/gf/square2.c"
 $392 = $stride; //@line 146 "src/texttest/../puun/gf/square2.c"
 $393 = $392&255; //@line 146 "src/texttest/../puun/gf/square2.c"
 _glVertexAttribPointer(($391|0),3,5126,0,($393|0),(0|0)); //@line 146 "src/texttest/../puun/gf/square2.c"
 $394 = $pos; //@line 148 "src/texttest/../puun/gf/square2.c"
 _glEnableVertexAttribArray(($394|0)); //@line 148 "src/texttest/../puun/gf/square2.c"
 $395 = $uv; //@line 149 "src/texttest/../puun/gf/square2.c"
 $396 = $stride; //@line 149 "src/texttest/../puun/gf/square2.c"
 $397 = $396&255; //@line 149 "src/texttest/../puun/gf/square2.c"
 _glVertexAttribPointer(($395|0),2,5126,0,($397|0),((12)|0)); //@line 149 "src/texttest/../puun/gf/square2.c"
 $398 = $uv; //@line 151 "src/texttest/../puun/gf/square2.c"
 _glEnableVertexAttribArray(($398|0)); //@line 151 "src/texttest/../puun/gf/square2.c"
 $399 = $scale; //@line 152 "src/texttest/../puun/gf/square2.c"
 $400 = $stride; //@line 152 "src/texttest/../puun/gf/square2.c"
 $401 = $400&255; //@line 152 "src/texttest/../puun/gf/square2.c"
 _glVertexAttribPointer(($399|0),2,5126,0,($401|0),((20)|0)); //@line 152 "src/texttest/../puun/gf/square2.c"
 $402 = $scale; //@line 154 "src/texttest/../puun/gf/square2.c"
 _glEnableVertexAttribArray(($402|0)); //@line 154 "src/texttest/../puun/gf/square2.c"
 STACKTOP = sp;return; //@line 155 "src/texttest/../puun/gf/square2.c"
}
function _stbtt_InitFont($info,$data2,$fontstart) {
 $info = $info|0;
 $data2 = $data2|0;
 $fontstart = $fontstart|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cmap = 0, $data = 0, $encoding_record = 0, $i = 0, $numTables = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $info;
 $2 = $data2;
 $3 = $fontstart;
 $4 = $2; //@line 981 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $data = $4; //@line 981 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $5 = $data; //@line 985 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $6 = $1; //@line 985 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = (($6) + 4|0); //@line 985 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$7>>2] = $5; //@line 985 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = $3; //@line 986 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = $1; //@line 986 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = (($9) + 8|0); //@line 986 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$10>>2] = $8; //@line 986 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = $data; //@line 988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = $3; //@line 988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = (_stbtt__find_table($11,$12,7792)|0); //@line 988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $cmap = $13; //@line 988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = $data; //@line 989 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = $3; //@line 989 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $16 = (_stbtt__find_table($14,$15,7800)|0); //@line 989 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $17 = $1; //@line 989 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = (($17) + 16|0); //@line 989 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$18>>2] = $16; //@line 989 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $19 = $data; //@line 990 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $20 = $3; //@line 990 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $21 = (_stbtt__find_table($19,$20,7808)|0); //@line 990 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $22 = $1; //@line 990 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $23 = (($22) + 20|0); //@line 990 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$23>>2] = $21; //@line 990 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $24 = $data; //@line 991 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $25 = $3; //@line 991 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $26 = (_stbtt__find_table($24,$25,7816)|0); //@line 991 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $27 = $1; //@line 991 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $28 = (($27) + 24|0); //@line 991 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$28>>2] = $26; //@line 991 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $29 = $data; //@line 992 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $30 = $3; //@line 992 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $31 = (_stbtt__find_table($29,$30,7824)|0); //@line 992 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $32 = $1; //@line 992 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $33 = (($32) + 28|0); //@line 992 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$33>>2] = $31; //@line 992 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $34 = $data; //@line 993 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $35 = $3; //@line 993 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $36 = (_stbtt__find_table($34,$35,7832)|0); //@line 993 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $37 = $1; //@line 993 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $38 = (($37) + 32|0); //@line 993 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$38>>2] = $36; //@line 993 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $39 = $data; //@line 994 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $40 = $3; //@line 994 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $41 = (_stbtt__find_table($39,$40,7840)|0); //@line 994 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $42 = $1; //@line 994 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $43 = (($42) + 36|0); //@line 994 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$43>>2] = $41; //@line 994 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $44 = $cmap; //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $45 = ($44|0)!=(0); //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($45) {
  $46 = $1; //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $47 = (($46) + 16|0); //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $48 = HEAP32[$47>>2]|0; //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $49 = ($48|0)!=(0); //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($49) {
   $50 = $1; //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $51 = (($50) + 20|0); //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $52 = HEAP32[$51>>2]|0; //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $53 = ($52|0)!=(0); //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if ($53) {
    $54 = $1; //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $55 = (($54) + 24|0); //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $56 = HEAP32[$55>>2]|0; //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $57 = ($56|0)!=(0); //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if ($57) {
     $58 = $1; //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $59 = (($58) + 28|0); //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $60 = HEAP32[$59>>2]|0; //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $61 = ($60|0)!=(0); //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if ($61) {
      $62 = $1; //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $63 = (($62) + 32|0); //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $64 = HEAP32[$63>>2]|0; //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $65 = ($64|0)!=(0); //@line 995 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      if ($65) {
       $66 = $data; //@line 998 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $67 = $3; //@line 998 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $68 = (_stbtt__find_table($66,$67,7848)|0); //@line 998 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $t = $68; //@line 998 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $69 = $t; //@line 999 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $70 = ($69|0)!=(0); //@line 999 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       if ($70) {
        $71 = $data; //@line 1000 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $72 = $t; //@line 1000 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $73 = (($71) + ($72)|0); //@line 1000 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $74 = (($73) + 4|0); //@line 1000 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $75 = (_ttUSHORT($74)|0); //@line 1000 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $76 = $75&65535; //@line 1000 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $77 = $1; //@line 1000 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $78 = (($77) + 12|0); //@line 1000 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        HEAP32[$78>>2] = $76; //@line 1000 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       } else {
        $79 = $1; //@line 1002 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $80 = (($79) + 12|0); //@line 1002 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        HEAP32[$80>>2] = 65535; //@line 1002 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       }
       $81 = $data; //@line 1007 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $82 = $cmap; //@line 1007 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $83 = (($81) + ($82)|0); //@line 1007 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $84 = (($83) + 2|0); //@line 1007 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $85 = (_ttUSHORT($84)|0); //@line 1007 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $86 = $85&65535; //@line 1007 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $numTables = $86; //@line 1007 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $87 = $1; //@line 1008 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $88 = (($87) + 40|0); //@line 1008 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       HEAP32[$88>>2] = 0; //@line 1008 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $i = 0; //@line 1009 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       while(1) {
        $89 = $i; //@line 1009 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $90 = $numTables; //@line 1009 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $91 = ($89|0)<($90|0); //@line 1009 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        if (!($91)) {
         break;
        }
        $92 = $cmap; //@line 1010 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $93 = (($92) + 4)|0; //@line 1010 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $94 = $i; //@line 1010 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $95 = $94<<3; //@line 1010 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $96 = (($93) + ($95))|0; //@line 1010 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $encoding_record = $96; //@line 1010 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $97 = $data; //@line 1012 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $98 = $encoding_record; //@line 1012 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $99 = (($97) + ($98)|0); //@line 1012 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $100 = (_ttUSHORT($99)|0); //@line 1012 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $101 = $100&65535; //@line 1012 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        if ((($101|0) == 0)) {
         $117 = $cmap; //@line 1025 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $118 = $data; //@line 1025 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $119 = $encoding_record; //@line 1025 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $120 = (($118) + ($119)|0); //@line 1025 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $121 = (($120) + 4|0); //@line 1025 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $122 = (_ttULONG($121)|0); //@line 1025 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $123 = (($117) + ($122))|0; //@line 1025 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $124 = $1; //@line 1025 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $125 = (($124) + 40|0); //@line 1025 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         HEAP32[$125>>2] = $123; //@line 1025 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        } else if ((($101|0) == 3)) {
         $102 = $data; //@line 1014 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $103 = $encoding_record; //@line 1014 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $104 = (($102) + ($103)|0); //@line 1014 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $105 = (($104) + 2|0); //@line 1014 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $106 = (_ttUSHORT($105)|0); //@line 1014 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $107 = $106&65535; //@line 1014 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         if ((($107|0) == 10) | (($107|0) == 1)) {
          $108 = $cmap; //@line 1018 "src/texttest/../puun/gf/../../other/stb_truetype.h"
          $109 = $data; //@line 1018 "src/texttest/../puun/gf/../../other/stb_truetype.h"
          $110 = $encoding_record; //@line 1018 "src/texttest/../puun/gf/../../other/stb_truetype.h"
          $111 = (($109) + ($110)|0); //@line 1018 "src/texttest/../puun/gf/../../other/stb_truetype.h"
          $112 = (($111) + 4|0); //@line 1018 "src/texttest/../puun/gf/../../other/stb_truetype.h"
          $113 = (_ttULONG($112)|0); //@line 1018 "src/texttest/../puun/gf/../../other/stb_truetype.h"
          $114 = (($108) + ($113))|0; //@line 1018 "src/texttest/../puun/gf/../../other/stb_truetype.h"
          $115 = $1; //@line 1018 "src/texttest/../puun/gf/../../other/stb_truetype.h"
          $116 = (($115) + 40|0); //@line 1018 "src/texttest/../puun/gf/../../other/stb_truetype.h"
          HEAP32[$116>>2] = $114; //@line 1018 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         }
        }
        $126 = $i; //@line 1009 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $127 = (($126) + 1)|0; //@line 1009 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $i = $127; //@line 1009 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       }
       $128 = $1; //@line 1029 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $129 = (($128) + 40|0); //@line 1029 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $130 = HEAP32[$129>>2]|0; //@line 1029 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $131 = ($130|0)==(0); //@line 1029 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       if ($131) {
        $0 = 0; //@line 1030 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $142 = $0; //@line 1034 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        STACKTOP = sp;return ($142|0); //@line 1034 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       } else {
        $132 = $data; //@line 1032 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $133 = $1; //@line 1032 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $134 = (($133) + 20|0); //@line 1032 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $135 = HEAP32[$134>>2]|0; //@line 1032 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $136 = (($132) + ($135)|0); //@line 1032 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $137 = (($136) + 50|0); //@line 1032 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $138 = (_ttUSHORT($137)|0); //@line 1032 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $139 = $138&65535; //@line 1032 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $140 = $1; //@line 1032 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $141 = (($140) + 44|0); //@line 1032 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        HEAP32[$141>>2] = $139; //@line 1032 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $0 = 1; //@line 1033 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $142 = $0; //@line 1034 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        STACKTOP = sp;return ($142|0); //@line 1034 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       }
      }
     }
    }
   }
  }
 }
 $0 = 0; //@line 996 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $142 = $0; //@line 1034 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return ($142|0); //@line 1034 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt_FindGlyphIndex($info,$unicode_codepoint) {
 $info = $info|0;
 $unicode_codepoint = $unicode_codepoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytes = 0, $count = 0, $data = 0, $end = 0, $endCount = 0, $end_char = 0, $entrySelector = 0;
 var $first = 0, $format = 0, $high = 0, $index_map = 0, $item = 0, $low = 0, $mid = 0, $ngroups = 0, $offset = 0, $rangeShift = 0, $search = 0, $searchRange = 0, $segcount = 0, $start = 0, $start_char = 0, $start_glyph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $info;
 $2 = $unicode_codepoint;
 $3 = $1; //@line 1038 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $4 = (($3) + 4|0); //@line 1038 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $5 = HEAP32[$4>>2]|0; //@line 1038 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $data = $5; //@line 1038 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $6 = $1; //@line 1039 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = (($6) + 40|0); //@line 1039 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = HEAP32[$7>>2]|0; //@line 1039 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $index_map = $8; //@line 1039 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = $data; //@line 1041 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = $index_map; //@line 1041 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = (($9) + ($10)|0); //@line 1041 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = (_ttUSHORT($11)|0); //@line 1041 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $format = $12; //@line 1041 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = $format; //@line 1042 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = $13&65535; //@line 1042 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = ($14|0)==(0); //@line 1042 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($15) {
  $16 = $data; //@line 1043 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $17 = $index_map; //@line 1043 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $18 = (($16) + ($17)|0); //@line 1043 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $19 = (($18) + 2|0); //@line 1043 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $20 = (_ttUSHORT($19)|0); //@line 1043 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $21 = $20&65535; //@line 1043 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $bytes = $21; //@line 1043 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $22 = $2; //@line 1044 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $23 = $bytes; //@line 1044 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $24 = (($23) - 6)|0; //@line 1044 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $25 = ($22|0)<($24|0); //@line 1044 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($25) {
   $26 = $data; //@line 1045 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $27 = $index_map; //@line 1045 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $28 = (($26) + ($27)|0); //@line 1045 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $29 = (($28) + 6|0); //@line 1045 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $30 = $2; //@line 1045 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $31 = (($29) + ($30)|0); //@line 1045 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $32 = HEAP8[$31>>0]|0; //@line 1045 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $33 = $32&255; //@line 1045 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $0 = $33; //@line 1045 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $312 = $0; //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   STACKTOP = sp;return ($312|0); //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  } else {
   $0 = 0; //@line 1046 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $312 = $0; //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   STACKTOP = sp;return ($312|0); //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
 }
 $34 = $format; //@line 1047 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $35 = $34&65535; //@line 1047 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $36 = ($35|0)==(6); //@line 1047 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($36) {
  $37 = $data; //@line 1048 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $38 = $index_map; //@line 1048 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $39 = (($37) + ($38)|0); //@line 1048 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $40 = (($39) + 6|0); //@line 1048 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $41 = (_ttUSHORT($40)|0); //@line 1048 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $42 = $41&65535; //@line 1048 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $first = $42; //@line 1048 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $43 = $data; //@line 1049 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $44 = $index_map; //@line 1049 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $45 = (($43) + ($44)|0); //@line 1049 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $46 = (($45) + 8|0); //@line 1049 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $47 = (_ttUSHORT($46)|0); //@line 1049 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $48 = $47&65535; //@line 1049 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $count = $48; //@line 1049 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $49 = $2; //@line 1050 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $50 = $first; //@line 1050 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $51 = ($49>>>0)>=($50>>>0); //@line 1050 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($51) {
   $52 = $2; //@line 1050 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $53 = $first; //@line 1050 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $54 = $count; //@line 1050 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $55 = (($53) + ($54))|0; //@line 1050 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $56 = ($52>>>0)<($55>>>0); //@line 1050 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if ($56) {
    $57 = $data; //@line 1051 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $58 = $index_map; //@line 1051 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $59 = (($57) + ($58)|0); //@line 1051 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $60 = (($59) + 10|0); //@line 1051 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $61 = $2; //@line 1051 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $62 = $first; //@line 1051 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $63 = (($61) - ($62))|0; //@line 1051 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $64 = $63<<1; //@line 1051 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $65 = (($60) + ($64)|0); //@line 1051 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $66 = (_ttUSHORT($65)|0); //@line 1051 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $67 = $66&65535; //@line 1051 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $0 = $67; //@line 1051 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $312 = $0; //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    STACKTOP = sp;return ($312|0); //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   }
  }
  $0 = 0; //@line 1052 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $312 = $0; //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($312|0); //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $68 = $format; //@line 1053 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $69 = $68&65535; //@line 1053 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $70 = ($69|0)==(2); //@line 1053 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($70) {
  ___assert_fail((7856|0),(7864|0),1054,(7920|0)); //@line 1054 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  // unreachable; //@line 1054 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $71 = $format; //@line 1056 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $72 = $71&65535; //@line 1056 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $73 = ($72|0)==(4); //@line 1056 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($73) {
  $74 = $data; //@line 1057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $75 = $index_map; //@line 1057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $76 = (($74) + ($75)|0); //@line 1057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $77 = (($76) + 6|0); //@line 1057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $78 = (_ttUSHORT($77)|0); //@line 1057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $79 = $78&65535; //@line 1057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $80 = $79 >> 1; //@line 1057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $81 = $80&65535; //@line 1057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $segcount = $81; //@line 1057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $82 = $data; //@line 1058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $83 = $index_map; //@line 1058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $84 = (($82) + ($83)|0); //@line 1058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $85 = (($84) + 8|0); //@line 1058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $86 = (_ttUSHORT($85)|0); //@line 1058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $87 = $86&65535; //@line 1058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $88 = $87 >> 1; //@line 1058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $89 = $88&65535; //@line 1058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $searchRange = $89; //@line 1058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $90 = $data; //@line 1059 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $91 = $index_map; //@line 1059 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $92 = (($90) + ($91)|0); //@line 1059 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $93 = (($92) + 10|0); //@line 1059 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $94 = (_ttUSHORT($93)|0); //@line 1059 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $entrySelector = $94; //@line 1059 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $95 = $data; //@line 1060 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $96 = $index_map; //@line 1060 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $97 = (($95) + ($96)|0); //@line 1060 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $98 = (($97) + 12|0); //@line 1060 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $99 = (_ttUSHORT($98)|0); //@line 1060 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $100 = $99&65535; //@line 1060 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $101 = $100 >> 1; //@line 1060 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $102 = $101&65535; //@line 1060 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $rangeShift = $102; //@line 1060 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $103 = $index_map; //@line 1063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $104 = (($103) + 14)|0; //@line 1063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $endCount = $104; //@line 1063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $105 = $endCount; //@line 1064 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $search = $105; //@line 1064 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $106 = $2; //@line 1066 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $107 = ($106|0)>(65535); //@line 1066 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($107) {
   $0 = 0; //@line 1067 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $312 = $0; //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   STACKTOP = sp;return ($312|0); //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $108 = $2; //@line 1071 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $109 = $data; //@line 1071 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $110 = $search; //@line 1071 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $111 = (($109) + ($110)|0); //@line 1071 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $112 = $rangeShift; //@line 1071 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $113 = $112&65535; //@line 1071 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $114 = $113<<1; //@line 1071 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $115 = (($111) + ($114)|0); //@line 1071 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $116 = (_ttUSHORT($115)|0); //@line 1071 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $117 = $116&65535; //@line 1071 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $118 = ($108|0)>=($117|0); //@line 1071 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($118) {
   $119 = $rangeShift; //@line 1072 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $120 = $119&65535; //@line 1072 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $121 = $120<<1; //@line 1072 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $122 = $search; //@line 1072 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $123 = (($122) + ($121))|0; //@line 1072 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $search = $123; //@line 1072 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $124 = $search; //@line 1075 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $125 = (($124) - 2)|0; //@line 1075 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $search = $125; //@line 1075 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  while(1) {
   $126 = $entrySelector; //@line 1076 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $127 = ($126<<16>>16)!=(0); //@line 1076 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if (!($127)) {
    break;
   }
   $128 = $searchRange; //@line 1078 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $129 = $128&65535; //@line 1078 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $130 = $129 >> 1; //@line 1078 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $131 = $130&65535; //@line 1078 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $searchRange = $131; //@line 1078 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $132 = $data; //@line 1079 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $133 = $search; //@line 1079 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $134 = (($132) + ($133)|0); //@line 1079 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $135 = $searchRange; //@line 1079 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $136 = $135&65535; //@line 1079 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $137 = $136<<1; //@line 1079 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $138 = (($134) + ($137)|0); //@line 1079 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $139 = (_ttUSHORT($138)|0); //@line 1079 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $end = $139; //@line 1079 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $140 = $2; //@line 1080 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $141 = $end; //@line 1080 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $142 = $141&65535; //@line 1080 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $143 = ($140|0)>($142|0); //@line 1080 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if ($143) {
    $144 = $searchRange; //@line 1081 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $145 = $144&65535; //@line 1081 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $146 = $145<<1; //@line 1081 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $147 = $search; //@line 1081 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $148 = (($147) + ($146))|0; //@line 1081 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $search = $148; //@line 1081 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   }
   $149 = $entrySelector; //@line 1082 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $150 = (($149) + -1)<<16>>16; //@line 1082 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $entrySelector = $150; //@line 1082 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $151 = $search; //@line 1084 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $152 = (($151) + 2)|0; //@line 1084 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $search = $152; //@line 1084 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $153 = $search; //@line 1088 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $154 = $endCount; //@line 1088 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $155 = (($153) - ($154))|0; //@line 1088 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $156 = $155 >>> 1; //@line 1088 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $157 = $156&65535; //@line 1088 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $item = $157; //@line 1088 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $158 = $2; //@line 1090 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $159 = $data; //@line 1090 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $160 = $endCount; //@line 1090 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $161 = (($159) + ($160)|0); //@line 1090 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $162 = $item; //@line 1090 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $163 = $162&65535; //@line 1090 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $164 = $163<<1; //@line 1090 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $165 = (($161) + ($164)|0); //@line 1090 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $166 = (_ttUSHORT($165)|0); //@line 1090 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $167 = $166&65535; //@line 1090 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $168 = ($158|0)<=($167|0); //@line 1090 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if (!($168)) {
   ___assert_fail((7944|0),(7864|0),1090,(7920|0)); //@line 1090 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   // unreachable; //@line 1090 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $169 = $data; //@line 1091 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $170 = $index_map; //@line 1091 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $171 = (($169) + ($170)|0); //@line 1091 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $172 = (($171) + 14|0); //@line 1091 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $173 = $segcount; //@line 1091 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $174 = $173&65535; //@line 1091 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $175 = $174<<1; //@line 1091 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $176 = (($172) + ($175)|0); //@line 1091 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $177 = (($176) + 2|0); //@line 1091 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $178 = $item; //@line 1091 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $179 = $178&65535; //@line 1091 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $180 = $179<<1; //@line 1091 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $181 = (($177) + ($180)|0); //@line 1091 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $182 = (_ttUSHORT($181)|0); //@line 1091 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $start = $182; //@line 1091 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $183 = $2; //@line 1092 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $184 = $start; //@line 1092 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $185 = $184&65535; //@line 1092 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $186 = ($183|0)<($185|0); //@line 1092 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($186) {
   $0 = 0; //@line 1093 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $312 = $0; //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   STACKTOP = sp;return ($312|0); //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $187 = $data; //@line 1095 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $188 = $index_map; //@line 1095 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $189 = (($187) + ($188)|0); //@line 1095 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $190 = (($189) + 14|0); //@line 1095 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $191 = $segcount; //@line 1095 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $192 = $191&65535; //@line 1095 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $193 = ($192*6)|0; //@line 1095 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $194 = (($190) + ($193)|0); //@line 1095 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $195 = (($194) + 2|0); //@line 1095 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $196 = $item; //@line 1095 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $197 = $196&65535; //@line 1095 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $198 = $197<<1; //@line 1095 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $199 = (($195) + ($198)|0); //@line 1095 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $200 = (_ttUSHORT($199)|0); //@line 1095 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $offset = $200; //@line 1095 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $201 = $offset; //@line 1096 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $202 = $201&65535; //@line 1096 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $203 = ($202|0)==(0); //@line 1096 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($203) {
   $204 = $2; //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $205 = $data; //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $206 = $index_map; //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $207 = (($205) + ($206)|0); //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $208 = (($207) + 14|0); //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $209 = $segcount; //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $210 = $209&65535; //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $211 = $210<<2; //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $212 = (($208) + ($211)|0); //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $213 = (($212) + 2|0); //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $214 = $item; //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $215 = $214&65535; //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $216 = $215<<1; //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $217 = (($213) + ($216)|0); //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $218 = (_ttSHORT($217)|0); //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $219 = $218 << 16 >> 16; //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $220 = (($204) + ($219))|0; //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $221 = $220&65535; //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $222 = $221&65535; //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $0 = $222; //@line 1097 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $312 = $0; //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   STACKTOP = sp;return ($312|0); //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  } else {
   $223 = $data; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $224 = $offset; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $225 = $224&65535; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $226 = (($223) + ($225)|0); //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $227 = $2; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $228 = $start; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $229 = $228&65535; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $230 = (($227) - ($229))|0; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $231 = $230<<1; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $232 = (($226) + ($231)|0); //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $233 = $index_map; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $234 = (($232) + ($233)|0); //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $235 = (($234) + 14|0); //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $236 = $segcount; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $237 = $236&65535; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $238 = ($237*6)|0; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $239 = (($235) + ($238)|0); //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $240 = (($239) + 2|0); //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $241 = $item; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $242 = $241&65535; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $243 = $242<<1; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $244 = (($240) + ($243)|0); //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $245 = (_ttUSHORT($244)|0); //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $246 = $245&65535; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $0 = $246; //@line 1099 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $312 = $0; //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   STACKTOP = sp;return ($312|0); //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
 }
 $247 = $format; //@line 1101 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $248 = $247&65535; //@line 1101 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $249 = ($248|0)==(12); //@line 1101 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if (!($249)) {
  $250 = $format; //@line 1101 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $251 = $250&65535; //@line 1101 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $252 = ($251|0)==(13); //@line 1101 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if (!($252)) {
   ___assert_fail((7856|0),(7864|0),1125,(7920|0)); //@line 1125 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   // unreachable; //@line 1125 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
 }
 $253 = $data; //@line 1102 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $254 = $index_map; //@line 1102 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $255 = (($253) + ($254)|0); //@line 1102 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $256 = (($255) + 12|0); //@line 1102 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $257 = (_ttULONG($256)|0); //@line 1102 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $ngroups = $257; //@line 1102 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $low = 0; //@line 1104 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $258 = $ngroups; //@line 1104 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $high = $258; //@line 1104 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 while(1) {
  $259 = $low; //@line 1106 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $260 = $high; //@line 1106 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $261 = ($259|0)<($260|0); //@line 1106 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if (!($261)) {
   label = 42;
   break;
  }
  $262 = $low; //@line 1107 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $263 = $high; //@line 1107 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $264 = $low; //@line 1107 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $265 = (($263) - ($264))|0; //@line 1107 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $266 = $265 >> 1; //@line 1107 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $267 = (($262) + ($266))|0; //@line 1107 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $mid = $267; //@line 1107 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $268 = $data; //@line 1108 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $269 = $index_map; //@line 1108 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $270 = (($268) + ($269)|0); //@line 1108 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $271 = (($270) + 16|0); //@line 1108 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $272 = $mid; //@line 1108 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $273 = ($272*12)|0; //@line 1108 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $274 = (($271) + ($273)|0); //@line 1108 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $275 = (_ttULONG($274)|0); //@line 1108 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $start_char = $275; //@line 1108 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $276 = $data; //@line 1109 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $277 = $index_map; //@line 1109 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $278 = (($276) + ($277)|0); //@line 1109 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $279 = (($278) + 16|0); //@line 1109 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $280 = $mid; //@line 1109 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $281 = ($280*12)|0; //@line 1109 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $282 = (($279) + ($281)|0); //@line 1109 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $283 = (($282) + 4|0); //@line 1109 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $284 = (_ttULONG($283)|0); //@line 1109 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $end_char = $284; //@line 1109 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $285 = $2; //@line 1110 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $286 = $start_char; //@line 1110 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $287 = ($285>>>0)<($286>>>0); //@line 1110 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($287) {
   $288 = $mid; //@line 1111 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $high = $288; //@line 1111 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  } else {
   $289 = $2; //@line 1112 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $290 = $end_char; //@line 1112 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $291 = ($289>>>0)>($290>>>0); //@line 1112 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if (!($291)) {
    break;
   }
   $292 = $mid; //@line 1113 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $293 = (($292) + 1)|0; //@line 1113 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $low = $293; //@line 1113 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
 }
 if ((label|0) == 42) {
  $0 = 0; //@line 1122 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $312 = $0; //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($312|0); //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $294 = $data; //@line 1115 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $295 = $index_map; //@line 1115 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $296 = (($294) + ($295)|0); //@line 1115 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $297 = (($296) + 16|0); //@line 1115 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $298 = $mid; //@line 1115 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $299 = ($298*12)|0; //@line 1115 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $300 = (($297) + ($299)|0); //@line 1115 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $301 = (($300) + 8|0); //@line 1115 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $302 = (_ttULONG($301)|0); //@line 1115 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $start_glyph = $302; //@line 1115 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $303 = $format; //@line 1116 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $304 = $303&65535; //@line 1116 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $305 = ($304|0)==(12); //@line 1116 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($305) {
  $306 = $start_glyph; //@line 1117 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $307 = $2; //@line 1117 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $308 = (($306) + ($307))|0; //@line 1117 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $309 = $start_char; //@line 1117 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $310 = (($308) - ($309))|0; //@line 1117 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $0 = $310; //@line 1117 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $312 = $0; //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($312|0); //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 } else {
  $311 = $start_glyph; //@line 1119 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $0 = $311; //@line 1119 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $312 = $0; //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($312|0); //@line 1127 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 return (0)|0;
}
function _stbtt_GetGlyphShape($info,$glyph_index,$pvertices) {
 $info = $info|0;
 $glyph_index = $glyph_index|0;
 $pvertices = $pvertices|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0.0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0.0, $44 = 0;
 var $440 = 0.0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0.0, $463 = 0.0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0.0, $507 = 0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0.0;
 var $512 = 0.0, $513 = 0.0, $514 = 0, $515 = 0.0, $516 = 0, $517 = 0.0, $518 = 0.0, $519 = 0, $52 = 0, $520 = 0.0, $521 = 0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0.0, $546 = 0.0, $547 = 0, $548 = 0;
 var $549 = 0.0, $55 = 0, $550 = 0.0, $551 = 0, $552 = 0.0, $553 = 0, $554 = 0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0.0, $562 = 0, $563 = 0, $564 = 0.0, $565 = 0, $566 = 0.0;
 var $567 = 0, $568 = 0, $569 = 0.0, $57 = 0, $570 = 0.0, $571 = 0, $572 = 0.0, $573 = 0, $574 = 0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0, $579 = 0.0, $58 = 0, $580 = 0.0, $581 = 0.0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0.0, $592 = 0.0, $593 = 0, $594 = 0, $595 = 0.0, $596 = 0.0, $597 = 0, $598 = 0.0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0.0;
 var $602 = 0.0, $603 = 0.0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0, $613 = 0.0, $614 = 0, $615 = 0, $616 = 0.0, $617 = 0.0, $618 = 0, $619 = 0.0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0.0, $623 = 0.0, $624 = 0.0, $625 = 0, $626 = 0.0, $627 = 0.0, $628 = 0.0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $comp = 0, $comp_num_verts = 0, $comp_verts = 0;
 var $cx = 0, $cy = 0, $data = 0, $dx = 0, $dy = 0, $endPtsOfContours = 0, $flagcount = 0, $flags = 0, $flags1 = 0, $g = 0, $gidx = 0, $i = 0, $i2 = 0, $ins = 0, $j = 0, $m = 0, $m3 = 0.0, $more = 0, $mtx = 0, $n = 0;
 var $n4 = 0.0, $next_move = 0, $num_vertices = 0, $numberOfContours = 0, $off = 0, $points = 0, $scx = 0, $scy = 0, $start_off = 0, $sx = 0, $sy = 0, $tmp = 0, $v = 0, $vertices = 0, $was_off = 0, $x = 0, $x5 = 0, $y = 0, $y6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $comp_verts = sp + 44|0;
 $mtx = sp + 16|0;
 $1 = $info;
 $2 = $glyph_index;
 $3 = $pvertices;
 $4 = $1; //@line 1207 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $5 = (($4) + 4|0); //@line 1207 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $6 = HEAP32[$5>>2]|0; //@line 1207 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $data = $6; //@line 1207 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $vertices = 0; //@line 1208 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $num_vertices = 0; //@line 1209 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = $1; //@line 1210 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = $2; //@line 1210 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = (_stbtt__GetGlyfOffset($7,$8)|0); //@line 1210 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $g = $9; //@line 1210 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = $3; //@line 1212 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$10>>2] = 0; //@line 1212 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = $g; //@line 1214 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = ($11|0)<(0); //@line 1214 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($12) {
  $0 = 0; //@line 1214 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $676 = $0; //@line 1427 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($676|0); //@line 1427 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $13 = $data; //@line 1216 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = $g; //@line 1216 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = (($13) + ($14)|0); //@line 1216 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $16 = (_ttSHORT($15)|0); //@line 1216 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $numberOfContours = $16; //@line 1216 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $17 = $numberOfContours; //@line 1218 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = $17 << 16 >> 16; //@line 1218 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $19 = ($18|0)>(0); //@line 1218 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($19) {
  $flags = 0; //@line 1219 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $j = 0; //@line 1220 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $was_off = 0; //@line 1220 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $start_off = 0; //@line 1220 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $20 = $data; //@line 1223 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $21 = $g; //@line 1223 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $22 = (($20) + ($21)|0); //@line 1223 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $23 = (($22) + 10|0); //@line 1223 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $endPtsOfContours = $23; //@line 1223 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $24 = $data; //@line 1224 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $25 = $g; //@line 1224 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $26 = (($24) + ($25)|0); //@line 1224 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $27 = (($26) + 10|0); //@line 1224 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $28 = $numberOfContours; //@line 1224 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $29 = $28 << 16 >> 16; //@line 1224 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $30 = $29<<1; //@line 1224 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $31 = (($27) + ($30)|0); //@line 1224 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $32 = (_ttUSHORT($31)|0); //@line 1224 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $33 = $32&65535; //@line 1224 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $ins = $33; //@line 1224 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $34 = $data; //@line 1225 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $35 = $g; //@line 1225 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $36 = (($34) + ($35)|0); //@line 1225 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $37 = (($36) + 10|0); //@line 1225 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $38 = $numberOfContours; //@line 1225 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $39 = $38 << 16 >> 16; //@line 1225 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $40 = $39<<1; //@line 1225 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $41 = (($37) + ($40)|0); //@line 1225 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $42 = (($41) + 2|0); //@line 1225 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $43 = $ins; //@line 1225 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $44 = (($42) + ($43)|0); //@line 1225 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $points = $44; //@line 1225 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $45 = $endPtsOfContours; //@line 1227 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $46 = $numberOfContours; //@line 1227 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $47 = $46 << 16 >> 16; //@line 1227 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $48 = $47<<1; //@line 1227 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $49 = (($45) + ($48)|0); //@line 1227 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $50 = (($49) + -2|0); //@line 1227 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $51 = (_ttUSHORT($50)|0); //@line 1227 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $52 = $51&65535; //@line 1227 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $53 = (1 + ($52))|0; //@line 1227 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $n = $53; //@line 1227 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $54 = $n; //@line 1229 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $55 = $numberOfContours; //@line 1229 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $56 = $55 << 16 >> 16; //@line 1229 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $57 = $56<<1; //@line 1229 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $58 = (($54) + ($57))|0; //@line 1229 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $m = $58; //@line 1229 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $59 = $m; //@line 1230 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $60 = ($59*10)|0; //@line 1230 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $61 = (_malloc($60)|0); //@line 1230 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $vertices = $61; //@line 1230 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $62 = $vertices; //@line 1231 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $63 = ($62|0)==(0|0); //@line 1231 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($63) {
   $0 = 0; //@line 1232 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $676 = $0; //@line 1427 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   STACKTOP = sp;return ($676|0); //@line 1427 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $next_move = 0; //@line 1234 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $flagcount = 0; //@line 1235 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $64 = $m; //@line 1241 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $65 = $n; //@line 1241 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $66 = (($64) - ($65))|0; //@line 1241 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $off = $66; //@line 1241 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $i = 0; //@line 1245 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  while(1) {
   $67 = $i; //@line 1245 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $68 = $n; //@line 1245 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $69 = ($67|0)<($68|0); //@line 1245 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if (!($69)) {
    break;
   }
   $70 = $flagcount; //@line 1246 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $71 = $70&255; //@line 1246 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $72 = ($71|0)==(0); //@line 1246 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if ($72) {
    $73 = $points; //@line 1247 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $74 = (($73) + 1|0); //@line 1247 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $points = $74; //@line 1247 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $75 = HEAP8[$73>>0]|0; //@line 1247 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $flags = $75; //@line 1247 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $76 = $flags; //@line 1248 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $77 = $76&255; //@line 1248 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $78 = $77 & 8; //@line 1248 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $79 = ($78|0)!=(0); //@line 1248 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if ($79) {
     $80 = $points; //@line 1249 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $81 = (($80) + 1|0); //@line 1249 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $points = $81; //@line 1249 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $82 = HEAP8[$80>>0]|0; //@line 1249 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $flagcount = $82; //@line 1249 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    }
   } else {
    $83 = $flagcount; //@line 1251 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $84 = (($83) + -1)<<24>>24; //@line 1251 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $flagcount = $84; //@line 1251 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   }
   $85 = $flags; //@line 1252 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $86 = $off; //@line 1252 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $87 = $i; //@line 1252 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $88 = (($86) + ($87))|0; //@line 1252 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $89 = $vertices; //@line 1252 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $90 = (($89) + (($88*10)|0)|0); //@line 1252 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $91 = (($90) + 8|0); //@line 1252 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   HEAP8[$91>>0] = $85; //@line 1252 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $92 = $i; //@line 1245 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $93 = (($92) + 1)|0; //@line 1245 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $i = $93; //@line 1245 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $x = 0; //@line 1256 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $i = 0; //@line 1257 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  while(1) {
   $94 = $i; //@line 1257 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $95 = $n; //@line 1257 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $96 = ($94|0)<($95|0); //@line 1257 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if (!($96)) {
    break;
   }
   $97 = $off; //@line 1258 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $98 = $i; //@line 1258 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $99 = (($97) + ($98))|0; //@line 1258 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $100 = $vertices; //@line 1258 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $101 = (($100) + (($99*10)|0)|0); //@line 1258 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $102 = (($101) + 8|0); //@line 1258 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $103 = HEAP8[$102>>0]|0; //@line 1258 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $flags = $103; //@line 1258 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $104 = $flags; //@line 1259 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $105 = $104&255; //@line 1259 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $106 = $105 & 2; //@line 1259 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $107 = ($106|0)!=(0); //@line 1259 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if ($107) {
    $108 = $points; //@line 1260 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $109 = (($108) + 1|0); //@line 1260 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $points = $109; //@line 1260 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $110 = HEAP8[$108>>0]|0; //@line 1260 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $111 = $110&255; //@line 1260 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $dx = $111; //@line 1260 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $112 = $flags; //@line 1261 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $113 = $112&255; //@line 1261 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $114 = $113 & 16; //@line 1261 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $115 = ($114|0)!=(0); //@line 1261 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if ($115) {
     $116 = $dx; //@line 1261 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $117 = $116 << 16 >> 16; //@line 1261 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $123 = $117;
    } else {
     $118 = $dx; //@line 1261 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $119 = $118 << 16 >> 16; //@line 1261 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $120 = (0 - ($119))|0; //@line 1261 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $123 = $120;
    }
    $121 = $x; //@line 1261 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $122 = (($121) + ($123))|0; //@line 1261 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $x = $122; //@line 1261 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   } else {
    $124 = $flags; //@line 1263 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $125 = $124&255; //@line 1263 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $126 = $125 & 16; //@line 1263 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $127 = ($126|0)!=(0); //@line 1263 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if (!($127)) {
     $128 = $x; //@line 1264 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $129 = $points; //@line 1264 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $130 = HEAP8[$129>>0]|0; //@line 1264 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $131 = $130&255; //@line 1264 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $132 = $131<<8; //@line 1264 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $133 = $points; //@line 1264 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $134 = (($133) + 1|0); //@line 1264 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $135 = HEAP8[$134>>0]|0; //@line 1264 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $136 = $135&255; //@line 1264 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $137 = (($132) + ($136))|0; //@line 1264 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $138 = $137&65535; //@line 1264 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $139 = $138 << 16 >> 16; //@line 1264 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $140 = (($128) + ($139))|0; //@line 1264 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $x = $140; //@line 1264 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $141 = $points; //@line 1265 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $142 = (($141) + 2|0); //@line 1265 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $points = $142; //@line 1265 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    }
   }
   $143 = $x; //@line 1268 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $144 = $143&65535; //@line 1268 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $145 = $off; //@line 1268 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $146 = $i; //@line 1268 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $147 = (($145) + ($146))|0; //@line 1268 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $148 = $vertices; //@line 1268 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $149 = (($148) + (($147*10)|0)|0); //@line 1268 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   HEAP16[$149>>1] = $144; //@line 1268 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $150 = $i; //@line 1257 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $151 = (($150) + 1)|0; //@line 1257 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $i = $151; //@line 1257 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $y = 0; //@line 1272 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $i = 0; //@line 1273 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  while(1) {
   $152 = $i; //@line 1273 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $153 = $n; //@line 1273 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $154 = ($152|0)<($153|0); //@line 1273 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if (!($154)) {
    break;
   }
   $155 = $off; //@line 1274 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $156 = $i; //@line 1274 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $157 = (($155) + ($156))|0; //@line 1274 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $158 = $vertices; //@line 1274 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $159 = (($158) + (($157*10)|0)|0); //@line 1274 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $160 = (($159) + 8|0); //@line 1274 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $161 = HEAP8[$160>>0]|0; //@line 1274 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $flags = $161; //@line 1274 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $162 = $flags; //@line 1275 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $163 = $162&255; //@line 1275 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $164 = $163 & 4; //@line 1275 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $165 = ($164|0)!=(0); //@line 1275 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if ($165) {
    $166 = $points; //@line 1276 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $167 = (($166) + 1|0); //@line 1276 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $points = $167; //@line 1276 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $168 = HEAP8[$166>>0]|0; //@line 1276 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $169 = $168&255; //@line 1276 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $dy = $169; //@line 1276 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $170 = $flags; //@line 1277 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $171 = $170&255; //@line 1277 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $172 = $171 & 32; //@line 1277 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $173 = ($172|0)!=(0); //@line 1277 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if ($173) {
     $174 = $dy; //@line 1277 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $175 = $174 << 16 >> 16; //@line 1277 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $181 = $175;
    } else {
     $176 = $dy; //@line 1277 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $177 = $176 << 16 >> 16; //@line 1277 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $178 = (0 - ($177))|0; //@line 1277 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $181 = $178;
    }
    $179 = $y; //@line 1277 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $180 = (($179) + ($181))|0; //@line 1277 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $y = $180; //@line 1277 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   } else {
    $182 = $flags; //@line 1279 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $183 = $182&255; //@line 1279 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $184 = $183 & 32; //@line 1279 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $185 = ($184|0)!=(0); //@line 1279 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if (!($185)) {
     $186 = $y; //@line 1280 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $187 = $points; //@line 1280 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $188 = HEAP8[$187>>0]|0; //@line 1280 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $189 = $188&255; //@line 1280 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $190 = $189<<8; //@line 1280 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $191 = $points; //@line 1280 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $192 = (($191) + 1|0); //@line 1280 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $193 = HEAP8[$192>>0]|0; //@line 1280 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $194 = $193&255; //@line 1280 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $195 = (($190) + ($194))|0; //@line 1280 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $196 = $195&65535; //@line 1280 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $197 = $196 << 16 >> 16; //@line 1280 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $198 = (($186) + ($197))|0; //@line 1280 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $y = $198; //@line 1280 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $199 = $points; //@line 1281 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $200 = (($199) + 2|0); //@line 1281 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $points = $200; //@line 1281 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    }
   }
   $201 = $y; //@line 1284 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $202 = $201&65535; //@line 1284 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $203 = $off; //@line 1284 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $204 = $i; //@line 1284 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $205 = (($203) + ($204))|0; //@line 1284 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $206 = $vertices; //@line 1284 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $207 = (($206) + (($205*10)|0)|0); //@line 1284 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $208 = (($207) + 2|0); //@line 1284 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   HEAP16[$208>>1] = $202; //@line 1284 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $209 = $i; //@line 1273 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $210 = (($209) + 1)|0; //@line 1273 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $i = $210; //@line 1273 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $num_vertices = 0; //@line 1288 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $scy = 0; //@line 1289 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $scx = 0; //@line 1289 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $cy = 0; //@line 1289 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $cx = 0; //@line 1289 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $sy = 0; //@line 1289 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $sx = 0; //@line 1289 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $i = 0; //@line 1290 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  while(1) {
   $211 = $i; //@line 1290 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $212 = $n; //@line 1290 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $213 = ($211|0)<($212|0); //@line 1290 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if (!($213)) {
    break;
   }
   $214 = $off; //@line 1291 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $215 = $i; //@line 1291 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $216 = (($214) + ($215))|0; //@line 1291 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $217 = $vertices; //@line 1291 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $218 = (($217) + (($216*10)|0)|0); //@line 1291 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $219 = (($218) + 8|0); //@line 1291 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $220 = HEAP8[$219>>0]|0; //@line 1291 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $flags = $220; //@line 1291 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $221 = $off; //@line 1292 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $222 = $i; //@line 1292 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $223 = (($221) + ($222))|0; //@line 1292 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $224 = $vertices; //@line 1292 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $225 = (($224) + (($223*10)|0)|0); //@line 1292 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $226 = HEAP16[$225>>1]|0; //@line 1292 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $227 = $226 << 16 >> 16; //@line 1292 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $x = $227; //@line 1292 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $228 = $off; //@line 1293 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $229 = $i; //@line 1293 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $230 = (($228) + ($229))|0; //@line 1293 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $231 = $vertices; //@line 1293 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $232 = (($231) + (($230*10)|0)|0); //@line 1293 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $233 = (($232) + 2|0); //@line 1293 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $234 = HEAP16[$233>>1]|0; //@line 1293 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $235 = $234 << 16 >> 16; //@line 1293 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $y = $235; //@line 1293 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $236 = $next_move; //@line 1295 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $237 = $i; //@line 1295 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $238 = ($236|0)==($237|0); //@line 1295 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if ($238) {
    $239 = $i; //@line 1296 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $240 = ($239|0)!=(0); //@line 1296 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if ($240) {
     $241 = $vertices; //@line 1297 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $242 = $num_vertices; //@line 1297 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $243 = $was_off; //@line 1297 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $244 = $start_off; //@line 1297 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $245 = $sx; //@line 1297 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $246 = $sy; //@line 1297 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $247 = $scx; //@line 1297 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $248 = $scy; //@line 1297 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $249 = $cx; //@line 1297 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $250 = $cy; //@line 1297 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $251 = (_stbtt__close_shape($241,$242,$243,$244,$245,$246,$247,$248,$249,$250)|0); //@line 1297 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $num_vertices = $251; //@line 1297 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    }
    $252 = $flags; //@line 1300 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $253 = $252&255; //@line 1300 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $254 = $253 & 1; //@line 1300 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $255 = ($254|0)!=(0); //@line 1300 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $256 = $255 ^ 1; //@line 1300 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $257 = $256&1; //@line 1300 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $start_off = $257; //@line 1300 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $258 = $start_off; //@line 1301 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $259 = ($258|0)!=(0); //@line 1301 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if ($259) {
     $260 = $x; //@line 1304 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $scx = $260; //@line 1304 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $261 = $y; //@line 1305 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $scy = $261; //@line 1305 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $262 = $off; //@line 1306 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $263 = $i; //@line 1306 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $264 = (($262) + ($263))|0; //@line 1306 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $265 = (($264) + 1)|0; //@line 1306 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $266 = $vertices; //@line 1306 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $267 = (($266) + (($265*10)|0)|0); //@line 1306 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $268 = (($267) + 8|0); //@line 1306 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $269 = HEAP8[$268>>0]|0; //@line 1306 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $270 = $269&255; //@line 1306 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $271 = $270 & 1; //@line 1306 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $272 = ($271|0)!=(0); //@line 1306 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if ($272) {
      $296 = $off; //@line 1312 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $297 = $i; //@line 1312 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $298 = (($296) + ($297))|0; //@line 1312 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $299 = (($298) + 1)|0; //@line 1312 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $300 = $vertices; //@line 1312 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $301 = (($300) + (($299*10)|0)|0); //@line 1312 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $302 = HEAP16[$301>>1]|0; //@line 1312 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $303 = $302 << 16 >> 16; //@line 1312 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $sx = $303; //@line 1312 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $304 = $off; //@line 1313 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $305 = $i; //@line 1313 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $306 = (($304) + ($305))|0; //@line 1313 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $307 = (($306) + 1)|0; //@line 1313 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $308 = $vertices; //@line 1313 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $309 = (($308) + (($307*10)|0)|0); //@line 1313 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $310 = (($309) + 2|0); //@line 1313 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $311 = HEAP16[$310>>1]|0; //@line 1313 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $312 = $311 << 16 >> 16; //@line 1313 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $sy = $312; //@line 1313 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $313 = $i; //@line 1314 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $314 = (($313) + 1)|0; //@line 1314 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $i = $314; //@line 1314 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     } else {
      $273 = $x; //@line 1308 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $274 = $off; //@line 1308 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $275 = $i; //@line 1308 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $276 = (($274) + ($275))|0; //@line 1308 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $277 = (($276) + 1)|0; //@line 1308 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $278 = $vertices; //@line 1308 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $279 = (($278) + (($277*10)|0)|0); //@line 1308 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $280 = HEAP16[$279>>1]|0; //@line 1308 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $281 = $280 << 16 >> 16; //@line 1308 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $282 = (($273) + ($281))|0; //@line 1308 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $283 = $282 >> 1; //@line 1308 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $sx = $283; //@line 1308 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $284 = $y; //@line 1309 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $285 = $off; //@line 1309 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $286 = $i; //@line 1309 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $287 = (($285) + ($286))|0; //@line 1309 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $288 = (($287) + 1)|0; //@line 1309 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $289 = $vertices; //@line 1309 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $290 = (($289) + (($288*10)|0)|0); //@line 1309 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $291 = (($290) + 2|0); //@line 1309 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $292 = HEAP16[$291>>1]|0; //@line 1309 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $293 = $292 << 16 >> 16; //@line 1309 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $294 = (($284) + ($293))|0; //@line 1309 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $295 = $294 >> 1; //@line 1309 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $sy = $295; //@line 1309 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     }
    } else {
     $315 = $x; //@line 1317 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $sx = $315; //@line 1317 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $316 = $y; //@line 1318 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $sy = $316; //@line 1318 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    }
    $317 = $num_vertices; //@line 1320 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $318 = (($317) + 1)|0; //@line 1320 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $num_vertices = $318; //@line 1320 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $319 = $vertices; //@line 1320 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $320 = (($319) + (($317*10)|0)|0); //@line 1320 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $321 = $sx; //@line 1320 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $322 = $sy; //@line 1320 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    _stbtt_setvertex($320,1,$321,$322,0,0); //@line 1320 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $was_off = 0; //@line 1321 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $323 = $endPtsOfContours; //@line 1322 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $324 = $j; //@line 1322 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $325 = $324<<1; //@line 1322 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $326 = (($323) + ($325)|0); //@line 1322 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $327 = (_ttUSHORT($326)|0); //@line 1322 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $328 = $327&65535; //@line 1322 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $329 = (1 + ($328))|0; //@line 1322 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $next_move = $329; //@line 1322 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $330 = $j; //@line 1323 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $331 = (($330) + 1)|0; //@line 1323 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $j = $331; //@line 1323 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   } else {
    $332 = $flags; //@line 1325 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $333 = $332&255; //@line 1325 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $334 = $333 & 1; //@line 1325 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $335 = ($334|0)!=(0); //@line 1325 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if ($335) {
     $354 = $was_off; //@line 1332 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $355 = ($354|0)!=(0); //@line 1332 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if ($355) {
      $356 = $num_vertices; //@line 1333 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $357 = (($356) + 1)|0; //@line 1333 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $num_vertices = $357; //@line 1333 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $358 = $vertices; //@line 1333 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $359 = (($358) + (($356*10)|0)|0); //@line 1333 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $360 = $x; //@line 1333 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $361 = $y; //@line 1333 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $362 = $cx; //@line 1333 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $363 = $cy; //@line 1333 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      _stbtt_setvertex($359,3,$360,$361,$362,$363); //@line 1333 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     } else {
      $364 = $num_vertices; //@line 1335 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $365 = (($364) + 1)|0; //@line 1335 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $num_vertices = $365; //@line 1335 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $366 = $vertices; //@line 1335 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $367 = (($366) + (($364*10)|0)|0); //@line 1335 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $368 = $x; //@line 1335 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $369 = $y; //@line 1335 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      _stbtt_setvertex($367,2,$368,$369,0,0); //@line 1335 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     }
     $was_off = 0; //@line 1336 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    } else {
     $336 = $was_off; //@line 1326 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $337 = ($336|0)!=(0); //@line 1326 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if ($337) {
      $338 = $num_vertices; //@line 1327 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $339 = (($338) + 1)|0; //@line 1327 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $num_vertices = $339; //@line 1327 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $340 = $vertices; //@line 1327 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $341 = (($340) + (($338*10)|0)|0); //@line 1327 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $342 = $cx; //@line 1327 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $343 = $x; //@line 1327 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $344 = (($342) + ($343))|0; //@line 1327 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $345 = $344 >> 1; //@line 1327 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $346 = $cy; //@line 1327 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $347 = $y; //@line 1327 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $348 = (($346) + ($347))|0; //@line 1327 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $349 = $348 >> 1; //@line 1327 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $350 = $cx; //@line 1327 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $351 = $cy; //@line 1327 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      _stbtt_setvertex($341,3,$345,$349,$350,$351); //@line 1327 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     }
     $352 = $x; //@line 1328 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $cx = $352; //@line 1328 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $353 = $y; //@line 1329 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $cy = $353; //@line 1329 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $was_off = 1; //@line 1330 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    }
   }
   $370 = $i; //@line 1290 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $371 = (($370) + 1)|0; //@line 1290 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $i = $371; //@line 1290 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $372 = $vertices; //@line 1340 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $373 = $num_vertices; //@line 1340 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $374 = $was_off; //@line 1340 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $375 = $start_off; //@line 1340 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $376 = $sx; //@line 1340 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $377 = $sy; //@line 1340 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $378 = $scx; //@line 1340 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $379 = $scy; //@line 1340 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $380 = $cx; //@line 1340 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $381 = $cy; //@line 1340 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $382 = (_stbtt__close_shape($372,$373,$374,$375,$376,$377,$378,$379,$380,$381)|0); //@line 1340 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $num_vertices = $382; //@line 1340 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 } else {
  $383 = $numberOfContours; //@line 1341 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $384 = $383 << 16 >> 16; //@line 1341 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $385 = ($384|0)==(-1); //@line 1341 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  do {
   if ($385) {
    $more = 1; //@line 1343 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $386 = $data; //@line 1344 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $387 = $g; //@line 1344 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $388 = (($386) + ($387)|0); //@line 1344 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $389 = (($388) + 10|0); //@line 1344 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $comp = $389; //@line 1344 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $num_vertices = 0; //@line 1345 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $vertices = 0; //@line 1346 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    while(1) {
     $390 = $more; //@line 1347 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $391 = ($390|0)!=(0); //@line 1347 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if (!($391)) {
      label = 97;
      break;
     }
     $comp_num_verts = 0; //@line 1349 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     HEAP32[$comp_verts>>2] = 0; //@line 1350 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $tmp = 0; //@line 1350 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     ;HEAP32[$mtx+0>>2]=HEAP32[8000+0>>2]|0;HEAP32[$mtx+4>>2]=HEAP32[8000+4>>2]|0;HEAP32[$mtx+8>>2]=HEAP32[8000+8>>2]|0;HEAP32[$mtx+12>>2]=HEAP32[8000+12>>2]|0;HEAP32[$mtx+16>>2]=HEAP32[8000+16>>2]|0;HEAP32[$mtx+20>>2]=HEAP32[8000+20>>2]|0; //@line 1351 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $392 = $comp; //@line 1353 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $393 = (_ttSHORT($392)|0); //@line 1353 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $flags1 = $393; //@line 1353 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $394 = $comp; //@line 1353 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $395 = (($394) + 2|0); //@line 1353 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $comp = $395; //@line 1353 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $396 = $comp; //@line 1354 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $397 = (_ttSHORT($396)|0); //@line 1354 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $gidx = $397; //@line 1354 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $398 = $comp; //@line 1354 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $399 = (($398) + 2|0); //@line 1354 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $comp = $399; //@line 1354 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $400 = $flags1; //@line 1356 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $401 = $400&65535; //@line 1356 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $402 = $401 & 2; //@line 1356 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $403 = ($402|0)!=(0); //@line 1356 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if (!($403)) {
      label = 71;
      break;
     }
     $404 = $flags1; //@line 1357 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $405 = $404&65535; //@line 1357 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $406 = $405 & 1; //@line 1357 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $407 = ($406|0)!=(0); //@line 1357 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if ($407) {
      $408 = $comp; //@line 1358 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $409 = (_ttSHORT($408)|0); //@line 1358 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $410 = (+($409<<16>>16)); //@line 1358 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $411 = (($mtx) + 16|0); //@line 1358 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      HEAPF32[$411>>2] = $410; //@line 1358 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $412 = $comp; //@line 1358 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $413 = (($412) + 2|0); //@line 1358 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $comp = $413; //@line 1358 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $414 = $comp; //@line 1359 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $415 = (_ttSHORT($414)|0); //@line 1359 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $416 = (+($415<<16>>16)); //@line 1359 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $417 = (($mtx) + 20|0); //@line 1359 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      HEAPF32[$417>>2] = $416; //@line 1359 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $418 = $comp; //@line 1359 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $419 = (($418) + 2|0); //@line 1359 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $comp = $419; //@line 1359 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     } else {
      $420 = $comp; //@line 1361 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $421 = HEAP8[$420>>0]|0; //@line 1361 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $422 = (+($421<<24>>24)); //@line 1361 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $423 = (($mtx) + 16|0); //@line 1361 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      HEAPF32[$423>>2] = $422; //@line 1361 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $424 = $comp; //@line 1361 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $425 = (($424) + 1|0); //@line 1361 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $comp = $425; //@line 1361 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $426 = $comp; //@line 1362 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $427 = HEAP8[$426>>0]|0; //@line 1362 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $428 = (+($427<<24>>24)); //@line 1362 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $429 = (($mtx) + 20|0); //@line 1362 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      HEAPF32[$429>>2] = $428; //@line 1362 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $430 = $comp; //@line 1362 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $431 = (($430) + 1|0); //@line 1362 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $comp = $431; //@line 1362 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     }
     $432 = $flags1; //@line 1369 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $433 = $432&65535; //@line 1369 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $434 = $433 & 8; //@line 1369 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $435 = ($434|0)!=(0); //@line 1369 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if ($435) {
      $436 = $comp; //@line 1370 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $437 = (_ttSHORT($436)|0); //@line 1370 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $438 = $437 << 16 >> 16; //@line 1370 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $439 = (+($438|0)); //@line 1370 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $440 = $439 / 16384.0; //@line 1370 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $441 = (($mtx) + 12|0); //@line 1370 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      HEAPF32[$441>>2] = $440; //@line 1370 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      HEAPF32[$mtx>>2] = $440; //@line 1370 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $442 = $comp; //@line 1370 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $443 = (($442) + 2|0); //@line 1370 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $comp = $443; //@line 1370 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $444 = (($mtx) + 8|0); //@line 1371 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      HEAPF32[$444>>2] = 0.0; //@line 1371 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $445 = (($mtx) + 4|0); //@line 1371 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      HEAPF32[$445>>2] = 0.0; //@line 1371 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     } else {
      $446 = $flags1; //@line 1372 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $447 = $446&65535; //@line 1372 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $448 = $447 & 64; //@line 1372 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $449 = ($448|0)!=(0); //@line 1372 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      if ($449) {
       $450 = $comp; //@line 1373 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $451 = (_ttSHORT($450)|0); //@line 1373 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $452 = $451 << 16 >> 16; //@line 1373 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $453 = (+($452|0)); //@line 1373 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $454 = $453 / 16384.0; //@line 1373 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       HEAPF32[$mtx>>2] = $454; //@line 1373 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $455 = $comp; //@line 1373 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $456 = (($455) + 2|0); //@line 1373 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $comp = $456; //@line 1373 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $457 = (($mtx) + 8|0); //@line 1374 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       HEAPF32[$457>>2] = 0.0; //@line 1374 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $458 = (($mtx) + 4|0); //@line 1374 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       HEAPF32[$458>>2] = 0.0; //@line 1374 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $459 = $comp; //@line 1375 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $460 = (_ttSHORT($459)|0); //@line 1375 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $461 = $460 << 16 >> 16; //@line 1375 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $462 = (+($461|0)); //@line 1375 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $463 = $462 / 16384.0; //@line 1375 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $464 = (($mtx) + 12|0); //@line 1375 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       HEAPF32[$464>>2] = $463; //@line 1375 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $465 = $comp; //@line 1375 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $466 = (($465) + 2|0); //@line 1375 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $comp = $466; //@line 1375 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      } else {
       $467 = $flags1; //@line 1376 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $468 = $467&65535; //@line 1376 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $469 = $468 & 128; //@line 1376 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $470 = ($469|0)!=(0); //@line 1376 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       if ($470) {
        $471 = $comp; //@line 1377 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $472 = (_ttSHORT($471)|0); //@line 1377 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $473 = $472 << 16 >> 16; //@line 1377 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $474 = (+($473|0)); //@line 1377 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $475 = $474 / 16384.0; //@line 1377 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        HEAPF32[$mtx>>2] = $475; //@line 1377 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $476 = $comp; //@line 1377 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $477 = (($476) + 2|0); //@line 1377 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $comp = $477; //@line 1377 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $478 = $comp; //@line 1378 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $479 = (_ttSHORT($478)|0); //@line 1378 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $480 = $479 << 16 >> 16; //@line 1378 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $481 = (+($480|0)); //@line 1378 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $482 = $481 / 16384.0; //@line 1378 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $483 = (($mtx) + 4|0); //@line 1378 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        HEAPF32[$483>>2] = $482; //@line 1378 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $484 = $comp; //@line 1378 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $485 = (($484) + 2|0); //@line 1378 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $comp = $485; //@line 1378 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $486 = $comp; //@line 1379 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $487 = (_ttSHORT($486)|0); //@line 1379 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $488 = $487 << 16 >> 16; //@line 1379 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $489 = (+($488|0)); //@line 1379 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $490 = $489 / 16384.0; //@line 1379 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $491 = (($mtx) + 8|0); //@line 1379 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        HEAPF32[$491>>2] = $490; //@line 1379 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $492 = $comp; //@line 1379 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $493 = (($492) + 2|0); //@line 1379 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $comp = $493; //@line 1379 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $494 = $comp; //@line 1380 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $495 = (_ttSHORT($494)|0); //@line 1380 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $496 = $495 << 16 >> 16; //@line 1380 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $497 = (+($496|0)); //@line 1380 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $498 = $497 / 16384.0; //@line 1380 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $499 = (($mtx) + 12|0); //@line 1380 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        HEAPF32[$499>>2] = $498; //@line 1380 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $500 = $comp; //@line 1380 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $501 = (($500) + 2|0); //@line 1380 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $comp = $501; //@line 1380 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       }
      }
     }
     $502 = +HEAPF32[$mtx>>2]; //@line 1384 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $503 = +HEAPF32[$mtx>>2]; //@line 1384 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $504 = $502 * $503; //@line 1384 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $505 = (($mtx) + 4|0); //@line 1384 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $506 = +HEAPF32[$505>>2]; //@line 1384 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $507 = (($mtx) + 4|0); //@line 1384 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $508 = +HEAPF32[$507>>2]; //@line 1384 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $509 = $506 * $508; //@line 1384 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $510 = $504 + $509; //@line 1384 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $511 = $510; //@line 1384 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $512 = (+Math_sqrt((+$511))); //@line 1384 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $513 = $512; //@line 1384 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $m3 = $513; //@line 1384 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $514 = (($mtx) + 8|0); //@line 1385 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $515 = +HEAPF32[$514>>2]; //@line 1385 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $516 = (($mtx) + 8|0); //@line 1385 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $517 = +HEAPF32[$516>>2]; //@line 1385 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $518 = $515 * $517; //@line 1385 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $519 = (($mtx) + 12|0); //@line 1385 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $520 = +HEAPF32[$519>>2]; //@line 1385 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $521 = (($mtx) + 12|0); //@line 1385 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $522 = +HEAPF32[$521>>2]; //@line 1385 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $523 = $520 * $522; //@line 1385 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $524 = $518 + $523; //@line 1385 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $525 = $524; //@line 1385 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $526 = (+Math_sqrt((+$525))); //@line 1385 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $527 = $526; //@line 1385 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $n4 = $527; //@line 1385 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $528 = $1; //@line 1388 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $529 = $gidx; //@line 1388 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $530 = $529&65535; //@line 1388 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $531 = (_stbtt_GetGlyphShape($528,$530,$comp_verts)|0); //@line 1388 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $comp_num_verts = $531; //@line 1388 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $532 = $comp_num_verts; //@line 1389 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $533 = ($532|0)>(0); //@line 1389 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if ($533) {
      $i2 = 0; //@line 1391 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      while(1) {
       $534 = $i2; //@line 1391 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $535 = $comp_num_verts; //@line 1391 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $536 = ($534|0)<($535|0); //@line 1391 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       if (!($536)) {
        break;
       }
       $537 = $i2; //@line 1392 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $538 = HEAP32[$comp_verts>>2]|0; //@line 1392 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $539 = (($538) + (($537*10)|0)|0); //@line 1392 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $v = $539; //@line 1392 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $540 = $v; //@line 1394 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $541 = HEAP16[$540>>1]|0; //@line 1394 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $x5 = $541; //@line 1394 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $542 = $v; //@line 1394 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $543 = (($542) + 2|0); //@line 1394 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $544 = HEAP16[$543>>1]|0; //@line 1394 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $y6 = $544; //@line 1394 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $545 = $m3; //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $546 = +HEAPF32[$mtx>>2]; //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $547 = $x5; //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $548 = $547 << 16 >> 16; //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $549 = (+($548|0)); //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $550 = $546 * $549; //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $551 = (($mtx) + 8|0); //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $552 = +HEAPF32[$551>>2]; //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $553 = $y6; //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $554 = $553 << 16 >> 16; //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $555 = (+($554|0)); //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $556 = $552 * $555; //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $557 = $550 + $556; //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $558 = (($mtx) + 16|0); //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $559 = +HEAPF32[$558>>2]; //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $560 = $557 + $559; //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $561 = $545 * $560; //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $562 = (~~(($561))); //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $563 = $v; //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       HEAP16[$563>>1] = $562; //@line 1395 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $564 = $n4; //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $565 = (($mtx) + 4|0); //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $566 = +HEAPF32[$565>>2]; //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $567 = $x5; //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $568 = $567 << 16 >> 16; //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $569 = (+($568|0)); //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $570 = $566 * $569; //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $571 = (($mtx) + 12|0); //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $572 = +HEAPF32[$571>>2]; //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $573 = $y6; //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $574 = $573 << 16 >> 16; //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $575 = (+($574|0)); //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $576 = $572 * $575; //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $577 = $570 + $576; //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $578 = (($mtx) + 20|0); //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $579 = +HEAPF32[$578>>2]; //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $580 = $577 + $579; //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $581 = $564 * $580; //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $582 = (~~(($581))); //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $583 = $v; //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $584 = (($583) + 2|0); //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       HEAP16[$584>>1] = $582; //@line 1396 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $585 = $v; //@line 1397 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $586 = (($585) + 4|0); //@line 1397 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $587 = HEAP16[$586>>1]|0; //@line 1397 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $x5 = $587; //@line 1397 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $588 = $v; //@line 1397 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $589 = (($588) + 6|0); //@line 1397 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $590 = HEAP16[$589>>1]|0; //@line 1397 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $y6 = $590; //@line 1397 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $591 = $m3; //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $592 = +HEAPF32[$mtx>>2]; //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $593 = $x5; //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $594 = $593 << 16 >> 16; //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $595 = (+($594|0)); //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $596 = $592 * $595; //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $597 = (($mtx) + 8|0); //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $598 = +HEAPF32[$597>>2]; //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $599 = $y6; //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $600 = $599 << 16 >> 16; //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $601 = (+($600|0)); //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $602 = $598 * $601; //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $603 = $596 + $602; //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $604 = (($mtx) + 16|0); //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $605 = +HEAPF32[$604>>2]; //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $606 = $603 + $605; //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $607 = $591 * $606; //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $608 = (~~(($607))); //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $609 = $v; //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $610 = (($609) + 4|0); //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       HEAP16[$610>>1] = $608; //@line 1398 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $611 = $n4; //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $612 = (($mtx) + 4|0); //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $613 = +HEAPF32[$612>>2]; //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $614 = $x5; //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $615 = $614 << 16 >> 16; //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $616 = (+($615|0)); //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $617 = $613 * $616; //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $618 = (($mtx) + 12|0); //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $619 = +HEAPF32[$618>>2]; //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $620 = $y6; //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $621 = $620 << 16 >> 16; //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $622 = (+($621|0)); //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $623 = $619 * $622; //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $624 = $617 + $623; //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $625 = (($mtx) + 20|0); //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $626 = +HEAPF32[$625>>2]; //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $627 = $624 + $626; //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $628 = $611 * $627; //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $629 = (~~(($628))); //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $630 = $v; //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $631 = (($630) + 6|0); //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       HEAP16[$631>>1] = $629; //@line 1399 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $632 = $i2; //@line 1391 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $633 = (($632) + 1)|0; //@line 1391 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $i2 = $633; //@line 1391 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      }
      $634 = $num_vertices; //@line 1402 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $635 = $comp_num_verts; //@line 1402 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $636 = (($634) + ($635))|0; //@line 1402 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $637 = ($636*10)|0; //@line 1402 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $638 = (_malloc($637)|0); //@line 1402 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $tmp = $638; //@line 1402 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $639 = $tmp; //@line 1403 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $640 = ($639|0)!=(0|0); //@line 1403 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      if (!($640)) {
       label = 86;
       break;
      }
      $647 = $num_vertices; //@line 1408 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $648 = ($647|0)>(0); //@line 1408 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      if ($648) {
       $649 = $tmp; //@line 1408 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $650 = $vertices; //@line 1408 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $651 = $num_vertices; //@line 1408 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $652 = ($651*10)|0; //@line 1408 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       _memcpy(($649|0),($650|0),($652|0))|0; //@line 1408 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      }
      $653 = $tmp; //@line 1409 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $654 = $num_vertices; //@line 1409 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $655 = (($653) + (($654*10)|0)|0); //@line 1409 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $656 = HEAP32[$comp_verts>>2]|0; //@line 1409 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $657 = $comp_num_verts; //@line 1409 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $658 = ($657*10)|0; //@line 1409 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      _memcpy(($655|0),($656|0),($658|0))|0; //@line 1409 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $659 = $vertices; //@line 1410 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $660 = ($659|0)!=(0|0); //@line 1410 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      if ($660) {
       $661 = $vertices; //@line 1410 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       _free($661); //@line 1410 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      }
      $662 = $tmp; //@line 1411 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $vertices = $662; //@line 1411 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $663 = HEAP32[$comp_verts>>2]|0; //@line 1412 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      _free($663); //@line 1412 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $664 = $comp_num_verts; //@line 1413 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $665 = $num_vertices; //@line 1413 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $666 = (($665) + ($664))|0; //@line 1413 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $num_vertices = $666; //@line 1413 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     }
     $667 = $flags1; //@line 1416 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $668 = $667&65535; //@line 1416 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $669 = $668 & 32; //@line 1416 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $more = $669; //@line 1416 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    }
    if ((label|0) == 71) {
     ___assert_fail((7856|0),(7864|0),1367,(8024|0)); //@line 1367 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     // unreachable; //@line 1367 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    }
    else if ((label|0) == 86) {
     $641 = $vertices; //@line 1404 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $642 = ($641|0)!=(0|0); //@line 1404 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if ($642) {
      $643 = $vertices; //@line 1404 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      _free($643); //@line 1404 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     }
     $644 = HEAP32[$comp_verts>>2]|0; //@line 1405 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $645 = ($644|0)!=(0|0); //@line 1405 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if ($645) {
      $646 = HEAP32[$comp_verts>>2]|0; //@line 1405 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      _free($646); //@line 1405 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     }
     $0 = 0; //@line 1406 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $676 = $0; //@line 1427 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     STACKTOP = sp;return ($676|0); //@line 1427 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    }
    else if ((label|0) == 97) {
     break;
    }
   } else {
    $670 = $numberOfContours; //@line 1418 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $671 = $670 << 16 >> 16; //@line 1418 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $672 = ($671|0)<(0); //@line 1418 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if ($672) {
     ___assert_fail((7856|0),(7864|0),1420,(8024|0)); //@line 1420 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     // unreachable; //@line 1420 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    }
   }
  } while(0);
 }
 $673 = $vertices; //@line 1425 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $674 = $3; //@line 1425 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$674>>2] = $673; //@line 1425 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $675 = $num_vertices; //@line 1426 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $0 = $675; //@line 1426 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $676 = $0; //@line 1427 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return ($676|0); //@line 1427 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt_GetGlyphBox($info,$glyph_index,$x0,$y0,$x1,$y1) {
 $info = $info|0;
 $glyph_index = $glyph_index|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $x1 = $x1|0;
 $y1 = $y1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $info;
 $2 = $glyph_index;
 $3 = $x0;
 $4 = $y0;
 $5 = $x1;
 $6 = $y1;
 $7 = $1; //@line 1163 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = $2; //@line 1163 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = (_stbtt__GetGlyfOffset($7,$8)|0); //@line 1163 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $g = $9; //@line 1163 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = $g; //@line 1164 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = ($10|0)<(0); //@line 1164 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($11) {
  $0 = 0; //@line 1164 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $56 = $0; //@line 1171 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($56|0); //@line 1171 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $12 = $3; //@line 1166 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = ($12|0)!=(0|0); //@line 1166 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($13) {
  $14 = $1; //@line 1166 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $15 = (($14) + 4|0); //@line 1166 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $16 = HEAP32[$15>>2]|0; //@line 1166 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $17 = $g; //@line 1166 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $18 = (($16) + ($17)|0); //@line 1166 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $19 = (($18) + 2|0); //@line 1166 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $20 = (_ttSHORT($19)|0); //@line 1166 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $21 = $20 << 16 >> 16; //@line 1166 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $22 = $3; //@line 1166 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAP32[$22>>2] = $21; //@line 1166 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $23 = $4; //@line 1167 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $24 = ($23|0)!=(0|0); //@line 1167 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($24) {
  $25 = $1; //@line 1167 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $26 = (($25) + 4|0); //@line 1167 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $27 = HEAP32[$26>>2]|0; //@line 1167 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $28 = $g; //@line 1167 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $29 = (($27) + ($28)|0); //@line 1167 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $30 = (($29) + 4|0); //@line 1167 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $31 = (_ttSHORT($30)|0); //@line 1167 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $32 = $31 << 16 >> 16; //@line 1167 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $33 = $4; //@line 1167 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAP32[$33>>2] = $32; //@line 1167 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $34 = $5; //@line 1168 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $35 = ($34|0)!=(0|0); //@line 1168 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($35) {
  $36 = $1; //@line 1168 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $37 = (($36) + 4|0); //@line 1168 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $38 = HEAP32[$37>>2]|0; //@line 1168 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $39 = $g; //@line 1168 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $40 = (($38) + ($39)|0); //@line 1168 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $41 = (($40) + 6|0); //@line 1168 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $42 = (_ttSHORT($41)|0); //@line 1168 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $43 = $42 << 16 >> 16; //@line 1168 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $44 = $5; //@line 1168 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAP32[$44>>2] = $43; //@line 1168 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $45 = $6; //@line 1169 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $46 = ($45|0)!=(0|0); //@line 1169 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($46) {
  $47 = $1; //@line 1169 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $48 = (($47) + 4|0); //@line 1169 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $49 = HEAP32[$48>>2]|0; //@line 1169 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $50 = $g; //@line 1169 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $51 = (($49) + ($50)|0); //@line 1169 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $52 = (($51) + 8|0); //@line 1169 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $53 = (_ttSHORT($52)|0); //@line 1169 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $54 = $53 << 16 >> 16; //@line 1169 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $55 = $6; //@line 1169 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAP32[$55>>2] = $54; //@line 1169 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $0 = 1; //@line 1170 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $56 = $0; //@line 1171 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return ($56|0); //@line 1171 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt_GetGlyphHMetrics($info,$glyph_index,$advanceWidth,$leftSideBearing) {
 $info = $info|0;
 $glyph_index = $glyph_index|0;
 $advanceWidth = $advanceWidth|0;
 $leftSideBearing = $leftSideBearing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $numOfLongHorMetrics = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $info;
 $1 = $glyph_index;
 $2 = $advanceWidth;
 $3 = $leftSideBearing;
 $4 = $0; //@line 1431 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $5 = (($4) + 4|0); //@line 1431 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $6 = HEAP32[$5>>2]|0; //@line 1431 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = $0; //@line 1431 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = (($7) + 28|0); //@line 1431 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = HEAP32[$8>>2]|0; //@line 1431 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = (($6) + ($9)|0); //@line 1431 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = (($10) + 34|0); //@line 1431 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = (_ttUSHORT($11)|0); //@line 1431 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $numOfLongHorMetrics = $12; //@line 1431 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = $1; //@line 1432 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = $numOfLongHorMetrics; //@line 1432 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = $14&65535; //@line 1432 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $16 = ($13|0)<($15|0); //@line 1432 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($16) {
  $17 = $2; //@line 1433 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $18 = ($17|0)!=(0|0); //@line 1433 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($18) {
   $19 = $0; //@line 1433 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $20 = (($19) + 4|0); //@line 1433 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $21 = HEAP32[$20>>2]|0; //@line 1433 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $22 = $0; //@line 1433 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $23 = (($22) + 32|0); //@line 1433 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $24 = HEAP32[$23>>2]|0; //@line 1433 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $25 = (($21) + ($24)|0); //@line 1433 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $26 = $1; //@line 1433 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $27 = $26<<2; //@line 1433 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $28 = (($25) + ($27)|0); //@line 1433 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $29 = (_ttSHORT($28)|0); //@line 1433 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $30 = $29 << 16 >> 16; //@line 1433 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $31 = $2; //@line 1433 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   HEAP32[$31>>2] = $30; //@line 1433 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $32 = $3; //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $33 = ($32|0)!=(0|0); //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($33) {
   $34 = $0; //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $35 = (($34) + 4|0); //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $36 = HEAP32[$35>>2]|0; //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $37 = $0; //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $38 = (($37) + 32|0); //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $39 = HEAP32[$38>>2]|0; //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $40 = (($36) + ($39)|0); //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $41 = $1; //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $42 = $41<<2; //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $43 = (($40) + ($42)|0); //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $44 = (($43) + 2|0); //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $45 = (_ttSHORT($44)|0); //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $46 = $45 << 16 >> 16; //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $47 = $3; //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   HEAP32[$47>>2] = $46; //@line 1434 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  STACKTOP = sp;return; //@line 1439 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 } else {
  $48 = $2; //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $49 = ($48|0)!=(0|0); //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($49) {
   $50 = $0; //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $51 = (($50) + 4|0); //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $52 = HEAP32[$51>>2]|0; //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $53 = $0; //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $54 = (($53) + 32|0); //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $55 = HEAP32[$54>>2]|0; //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $56 = (($52) + ($55)|0); //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $57 = $numOfLongHorMetrics; //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $58 = $57&65535; //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $59 = (($58) - 1)|0; //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $60 = $59<<2; //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $61 = (($56) + ($60)|0); //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $62 = (_ttSHORT($61)|0); //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $63 = $62 << 16 >> 16; //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $64 = $2; //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   HEAP32[$64>>2] = $63; //@line 1436 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $65 = $3; //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $66 = ($65|0)!=(0|0); //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($66) {
   $67 = $0; //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $68 = (($67) + 4|0); //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $69 = HEAP32[$68>>2]|0; //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $70 = $0; //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $71 = (($70) + 32|0); //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $72 = HEAP32[$71>>2]|0; //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $73 = (($69) + ($72)|0); //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $74 = $numOfLongHorMetrics; //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $75 = $74&65535; //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $76 = $75<<2; //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $77 = (($73) + ($76)|0); //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $78 = $1; //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $79 = $numOfLongHorMetrics; //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $80 = $79&65535; //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $81 = (($78) - ($80))|0; //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $82 = $81<<1; //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $83 = (($77) + ($82)|0); //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $84 = (_ttSHORT($83)|0); //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $85 = $84 << 16 >> 16; //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $86 = $3; //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   HEAP32[$86>>2] = $85; //@line 1437 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  STACKTOP = sp;return; //@line 1439 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
}
function _stbtt_GetGlyphKernAdvance($info,$glyph1,$glyph2) {
 $info = $info|0;
 $glyph1 = $glyph1|0;
 $glyph2 = $glyph2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $l = 0, $m = 0, $needle = 0, $r = 0, $straw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $info;
 $2 = $glyph1;
 $3 = $glyph2;
 $4 = $1; //@line 1443 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $5 = (($4) + 4|0); //@line 1443 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $6 = HEAP32[$5>>2]|0; //@line 1443 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = $1; //@line 1443 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = (($7) + 36|0); //@line 1443 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = HEAP32[$8>>2]|0; //@line 1443 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = (($6) + ($9)|0); //@line 1443 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $data = $10; //@line 1443 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = $1; //@line 1448 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = (($11) + 36|0); //@line 1448 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = HEAP32[$12>>2]|0; //@line 1448 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = ($13|0)!=(0); //@line 1448 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if (!($14)) {
  $0 = 0; //@line 1449 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $64 = $0; //@line 1469 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($64|0); //@line 1469 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $15 = $data; //@line 1450 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $16 = (($15) + 2|0); //@line 1450 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $17 = (_ttUSHORT($16)|0); //@line 1450 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = $17&65535; //@line 1450 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $19 = ($18|0)<(1); //@line 1450 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($19) {
  $0 = 0; //@line 1451 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $64 = $0; //@line 1469 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($64|0); //@line 1469 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $20 = $data; //@line 1452 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $21 = (($20) + 8|0); //@line 1452 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $22 = (_ttUSHORT($21)|0); //@line 1452 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $23 = $22&65535; //@line 1452 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $24 = ($23|0)!=(1); //@line 1452 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($24) {
  $0 = 0; //@line 1453 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $64 = $0; //@line 1469 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($64|0); //@line 1469 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $l = 0; //@line 1455 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $25 = $data; //@line 1456 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $26 = (($25) + 10|0); //@line 1456 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $27 = (_ttUSHORT($26)|0); //@line 1456 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $28 = $27&65535; //@line 1456 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $29 = (($28) - 1)|0; //@line 1456 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $r = $29; //@line 1456 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $30 = $2; //@line 1457 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $31 = $30 << 16; //@line 1457 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $32 = $3; //@line 1457 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $33 = $31 | $32; //@line 1457 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $needle = $33; //@line 1457 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 while(1) {
  $34 = $l; //@line 1458 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $35 = $r; //@line 1458 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $36 = ($34|0)<=($35|0); //@line 1458 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if (!($36)) {
   label = 16;
   break;
  }
  $37 = $l; //@line 1459 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $38 = $r; //@line 1459 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $39 = (($37) + ($38))|0; //@line 1459 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $40 = $39 >> 1; //@line 1459 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $m = $40; //@line 1459 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $41 = $data; //@line 1460 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $42 = (($41) + 18|0); //@line 1460 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $43 = $m; //@line 1460 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $44 = ($43*6)|0; //@line 1460 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $45 = (($42) + ($44)|0); //@line 1460 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $46 = (_ttULONG($45)|0); //@line 1460 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $straw = $46; //@line 1460 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $47 = $needle; //@line 1461 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $48 = $straw; //@line 1461 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $49 = ($47>>>0)<($48>>>0); //@line 1461 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($49) {
   $50 = $m; //@line 1462 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $51 = (($50) - 1)|0; //@line 1462 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $r = $51; //@line 1462 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  } else {
   $52 = $needle; //@line 1463 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $53 = $straw; //@line 1463 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $54 = ($52>>>0)>($53>>>0); //@line 1463 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if (!($54)) {
    label = 13;
    break;
   }
   $55 = $m; //@line 1464 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $56 = (($55) + 1)|0; //@line 1464 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $l = $56; //@line 1464 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
 }
 if ((label|0) == 13) {
  $57 = $data; //@line 1466 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $58 = (($57) + 22|0); //@line 1466 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $59 = $m; //@line 1466 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $60 = ($59*6)|0; //@line 1466 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $61 = (($58) + ($60)|0); //@line 1466 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $62 = (_ttSHORT($61)|0); //@line 1466 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $63 = $62 << 16 >> 16; //@line 1466 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $0 = $63; //@line 1466 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $64 = $0; //@line 1469 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($64|0); //@line 1469 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 else if ((label|0) == 16) {
  $0 = 0; //@line 1468 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $64 = $0; //@line 1469 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($64|0); //@line 1469 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 return (0)|0;
}
function _stbtt_GetCodepointKernAdvance($info,$ch1,$ch2) {
 $info = $info|0;
 $ch1 = $ch1|0;
 $ch2 = $ch2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $info;
 $2 = $ch1;
 $3 = $ch2;
 $4 = $1; //@line 1473 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $5 = (($4) + 36|0); //@line 1473 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $6 = HEAP32[$5>>2]|0; //@line 1473 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = ($6|0)!=(0); //@line 1473 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($7) {
  $8 = $1; //@line 1475 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $9 = $1; //@line 1475 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $10 = $2; //@line 1475 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $11 = (_stbtt_FindGlyphIndex($9,$10)|0); //@line 1475 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $12 = $1; //@line 1475 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $13 = $3; //@line 1475 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $14 = (_stbtt_FindGlyphIndex($12,$13)|0); //@line 1475 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $15 = (_stbtt_GetGlyphKernAdvance($8,$11,$14)|0); //@line 1475 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $0 = $15; //@line 1475 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $16 = $0; //@line 1476 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($16|0); //@line 1476 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 } else {
  $0 = 0; //@line 1474 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $16 = $0; //@line 1476 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($16|0); //@line 1476 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 return (0)|0;
}
function _stbtt_GetCodepointHMetrics($info,$codepoint,$advanceWidth,$leftSideBearing) {
 $info = $info|0;
 $codepoint = $codepoint|0;
 $advanceWidth = $advanceWidth|0;
 $leftSideBearing = $leftSideBearing|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $info;
 $1 = $codepoint;
 $2 = $advanceWidth;
 $3 = $leftSideBearing;
 $4 = $0; //@line 1480 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $5 = $0; //@line 1480 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $6 = $1; //@line 1480 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = (_stbtt_FindGlyphIndex($5,$6)|0); //@line 1480 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = $2; //@line 1480 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = $3; //@line 1480 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _stbtt_GetGlyphHMetrics($4,$7,$8,$9); //@line 1480 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return; //@line 1481 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt_GetFontVMetrics($info,$ascent,$descent,$lineGap) {
 $info = $info|0;
 $ascent = $ascent|0;
 $descent = $descent|0;
 $lineGap = $lineGap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $info;
 $1 = $ascent;
 $2 = $descent;
 $3 = $lineGap;
 $4 = $1; //@line 1485 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $5 = ($4|0)!=(0|0); //@line 1485 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($5) {
  $6 = $0; //@line 1485 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $7 = (($6) + 4|0); //@line 1485 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $8 = HEAP32[$7>>2]|0; //@line 1485 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $9 = $0; //@line 1485 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $10 = (($9) + 28|0); //@line 1485 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $11 = HEAP32[$10>>2]|0; //@line 1485 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $12 = (($8) + ($11)|0); //@line 1485 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $13 = (($12) + 4|0); //@line 1485 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $14 = (_ttSHORT($13)|0); //@line 1485 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $15 = $14 << 16 >> 16; //@line 1485 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $16 = $1; //@line 1485 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAP32[$16>>2] = $15; //@line 1485 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $17 = $2; //@line 1486 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = ($17|0)!=(0|0); //@line 1486 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($18) {
  $19 = $0; //@line 1486 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $20 = (($19) + 4|0); //@line 1486 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $21 = HEAP32[$20>>2]|0; //@line 1486 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $22 = $0; //@line 1486 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $23 = (($22) + 28|0); //@line 1486 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $24 = HEAP32[$23>>2]|0; //@line 1486 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $25 = (($21) + ($24)|0); //@line 1486 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $26 = (($25) + 6|0); //@line 1486 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $27 = (_ttSHORT($26)|0); //@line 1486 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $28 = $27 << 16 >> 16; //@line 1486 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $29 = $2; //@line 1486 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAP32[$29>>2] = $28; //@line 1486 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $30 = $3; //@line 1487 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $31 = ($30|0)!=(0|0); //@line 1487 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if (!($31)) {
  STACKTOP = sp;return; //@line 1488 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $32 = $0; //@line 1487 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $33 = (($32) + 4|0); //@line 1487 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $34 = HEAP32[$33>>2]|0; //@line 1487 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $35 = $0; //@line 1487 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $36 = (($35) + 28|0); //@line 1487 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $37 = HEAP32[$36>>2]|0; //@line 1487 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $38 = (($34) + ($37)|0); //@line 1487 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $39 = (($38) + 8|0); //@line 1487 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $40 = (_ttSHORT($39)|0); //@line 1487 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $41 = $40 << 16 >> 16; //@line 1487 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $42 = $3; //@line 1487 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$42>>2] = $41; //@line 1487 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return; //@line 1488 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt_ScaleForPixelHeight($info,$height) {
 $info = $info|0;
 $height = +$height;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fheight = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $info;
 $1 = $height;
 $2 = $0; //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $3 = (($2) + 4|0); //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $4 = HEAP32[$3>>2]|0; //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $5 = $0; //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $6 = (($5) + 28|0); //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = HEAP32[$6>>2]|0; //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = (($4) + ($7)|0); //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = (($8) + 4|0); //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = (_ttSHORT($9)|0); //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = $10 << 16 >> 16; //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = $0; //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = (($12) + 4|0); //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = HEAP32[$13>>2]|0; //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = $0; //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $16 = (($15) + 28|0); //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $17 = HEAP32[$16>>2]|0; //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = (($14) + ($17)|0); //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $19 = (($18) + 6|0); //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $20 = (_ttSHORT($19)|0); //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $21 = $20 << 16 >> 16; //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $22 = (($11) - ($21))|0; //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $fheight = $22; //@line 1500 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $23 = $1; //@line 1501 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $24 = $fheight; //@line 1501 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $25 = (+($24|0)); //@line 1501 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $26 = $23 / $25; //@line 1501 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return (+$26); //@line 1501 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt_GetGlyphBitmapBoxSubpixel($font,$glyph,$scale_x,$scale_y,$shift_x,$shift_y,$ix0,$iy0,$ix1,$iy1) {
 $font = $font|0;
 $glyph = $glyph|0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $ix0 = $ix0|0;
 $iy0 = $iy0|0;
 $ix1 = $ix1|0;
 $iy1 = $iy1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $x0 = 0, $x1 = 0, $y0 = 0, $y1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x0 = sp + 12|0;
 $y0 = sp + 8|0;
 $x1 = sp + 4|0;
 $y1 = sp;
 $0 = $font;
 $1 = $glyph;
 $2 = $scale_x;
 $3 = $scale_y;
 $4 = $shift_x;
 $5 = $shift_y;
 $6 = $ix0;
 $7 = $iy0;
 $8 = $ix1;
 $9 = $iy1;
 $10 = $0; //@line 1523 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = $1; //@line 1523 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = (_stbtt_GetGlyphBox($10,$11,$x0,$y0,$x1,$y1)|0); //@line 1523 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = ($12|0)!=(0); //@line 1523 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($13) {
  $26 = $6; //@line 1531 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $27 = ($26|0)!=(0|0); //@line 1531 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($27) {
   $28 = HEAP32[$x0>>2]|0; //@line 1531 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $29 = (+($28|0)); //@line 1531 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $30 = $2; //@line 1531 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $31 = $29 * $30; //@line 1531 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $32 = $4; //@line 1531 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $33 = $31 + $32; //@line 1531 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $34 = $33; //@line 1531 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $35 = (+Math_floor((+$34))); //@line 1531 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $36 = (~~(($35))); //@line 1531 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $37 = $6; //@line 1531 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   HEAP32[$37>>2] = $36; //@line 1531 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $38 = $7; //@line 1532 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $39 = ($38|0)!=(0|0); //@line 1532 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($39) {
   $40 = HEAP32[$y1>>2]|0; //@line 1532 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $41 = (0 - ($40))|0; //@line 1532 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $42 = (+($41|0)); //@line 1532 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $43 = $3; //@line 1532 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $44 = $42 * $43; //@line 1532 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $45 = $5; //@line 1532 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $46 = $44 + $45; //@line 1532 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $47 = $46; //@line 1532 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $48 = (+Math_floor((+$47))); //@line 1532 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $49 = (~~(($48))); //@line 1532 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $50 = $7; //@line 1532 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   HEAP32[$50>>2] = $49; //@line 1532 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $51 = $8; //@line 1533 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $52 = ($51|0)!=(0|0); //@line 1533 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($52) {
   $53 = HEAP32[$x1>>2]|0; //@line 1533 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $54 = (+($53|0)); //@line 1533 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $55 = $2; //@line 1533 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $56 = $54 * $55; //@line 1533 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $57 = $4; //@line 1533 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $58 = $56 + $57; //@line 1533 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $59 = $58; //@line 1533 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $60 = (+Math_ceil((+$59))); //@line 1533 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $61 = (~~(($60))); //@line 1533 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $62 = $8; //@line 1533 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   HEAP32[$62>>2] = $61; //@line 1533 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $63 = $9; //@line 1534 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $64 = ($63|0)!=(0|0); //@line 1534 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($64) {
   $65 = HEAP32[$y0>>2]|0; //@line 1534 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $66 = (0 - ($65))|0; //@line 1534 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $67 = (+($66|0)); //@line 1534 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $68 = $3; //@line 1534 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $69 = $67 * $68; //@line 1534 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $70 = $5; //@line 1534 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $71 = $69 + $70; //@line 1534 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $72 = $71; //@line 1534 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $73 = (+Math_ceil((+$72))); //@line 1534 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $74 = (~~(($73))); //@line 1534 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $75 = $9; //@line 1534 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   HEAP32[$75>>2] = $74; //@line 1534 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  STACKTOP = sp;return; //@line 1536 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 } else {
  $14 = $6; //@line 1525 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $15 = ($14|0)!=(0|0); //@line 1525 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($15) {
   $16 = $6; //@line 1525 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   HEAP32[$16>>2] = 0; //@line 1525 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $17 = $7; //@line 1526 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $18 = ($17|0)!=(0|0); //@line 1526 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($18) {
   $19 = $7; //@line 1526 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   HEAP32[$19>>2] = 0; //@line 1526 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $20 = $8; //@line 1527 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $21 = ($20|0)!=(0|0); //@line 1527 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($21) {
   $22 = $8; //@line 1527 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   HEAP32[$22>>2] = 0; //@line 1527 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $23 = $9; //@line 1528 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $24 = ($23|0)!=(0|0); //@line 1528 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($24) {
   $25 = $9; //@line 1528 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   HEAP32[$25>>2] = 0; //@line 1528 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  STACKTOP = sp;return; //@line 1536 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
}
function _stbtt_GetGlyphBitmapBox($font,$glyph,$scale_x,$scale_y,$ix0,$iy0,$ix1,$iy1) {
 $font = $font|0;
 $glyph = $glyph|0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $ix0 = $ix0|0;
 $iy0 = $iy0|0;
 $ix1 = $ix1|0;
 $iy1 = $iy1|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $font;
 $1 = $glyph;
 $2 = $scale_x;
 $3 = $scale_y;
 $4 = $ix0;
 $5 = $iy0;
 $6 = $ix1;
 $7 = $iy1;
 $8 = $0; //@line 1540 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = $1; //@line 1540 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = $2; //@line 1540 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = $3; //@line 1540 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = $4; //@line 1540 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = $5; //@line 1540 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = $6; //@line 1540 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = $7; //@line 1540 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _stbtt_GetGlyphBitmapBoxSubpixel($8,$9,$10,$11,0.0,0.0,$12,$13,$14,$15); //@line 1540 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return; //@line 1541 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt_Rasterize($result,$flatness_in_pixels,$vertices,$num_verts,$scale_x,$scale_y,$shift_x,$shift_y,$x_off,$y_off,$invert,$userdata) {
 $result = $result|0;
 $flatness_in_pixels = +$flatness_in_pixels;
 $vertices = $vertices|0;
 $num_verts = $num_verts|0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $x_off = $x_off|0;
 $y_off = $y_off|0;
 $invert = $invert|0;
 $userdata = $userdata|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0;
 var $9 = 0, $scale = 0.0, $winding_count = 0, $winding_lengths = 0, $windings = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $winding_count = sp + 8|0;
 $winding_lengths = sp + 4|0;
 $0 = $result;
 $1 = $flatness_in_pixels;
 $2 = $vertices;
 $3 = $num_verts;
 $4 = $scale_x;
 $5 = $scale_y;
 $6 = $shift_x;
 $7 = $shift_y;
 $8 = $x_off;
 $9 = $y_off;
 $10 = $invert;
 $11 = $userdata;
 $12 = $4; //@line 1900 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = $5; //@line 1900 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = $12 > $13; //@line 1900 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($14) {
  $15 = $5; //@line 1900 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $17 = $15;
 } else {
  $16 = $4; //@line 1900 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $17 = $16;
 }
 $scale = $17; //@line 1900 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = $2; //@line 1902 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $19 = $3; //@line 1902 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $20 = $1; //@line 1902 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $21 = $scale; //@line 1902 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $22 = $20 / $21; //@line 1902 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $23 = $11; //@line 1902 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $24 = (_stbtt_FlattenCurves($18,$19,$22,$winding_lengths,$winding_count,$23)|0); //@line 1902 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $windings = $24; //@line 1902 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $25 = $windings; //@line 1903 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $26 = ($25|0)!=(0|0); //@line 1903 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if (!($26)) {
  STACKTOP = sp;return; //@line 1908 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $27 = $0; //@line 1904 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $28 = $windings; //@line 1904 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $29 = HEAP32[$winding_lengths>>2]|0; //@line 1904 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $30 = HEAP32[$winding_count>>2]|0; //@line 1904 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $31 = $4; //@line 1904 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $32 = $5; //@line 1904 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $33 = $6; //@line 1904 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $34 = $7; //@line 1904 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $35 = $8; //@line 1904 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $36 = $9; //@line 1904 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $37 = $10; //@line 1904 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $38 = $11; //@line 1904 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _stbtt__rasterize($27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38); //@line 1904 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $39 = HEAP32[$winding_lengths>>2]|0; //@line 1905 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _free($39); //@line 1905 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $40 = $windings; //@line 1906 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _free($40); //@line 1906 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return; //@line 1908 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt_MakeGlyphBitmapSubpixel($info,$output,$out_w,$out_h,$out_stride,$scale_x,$scale_y,$shift_x,$shift_y,$glyph) {
 $info = $info|0;
 $output = $output|0;
 $out_w = $out_w|0;
 $out_h = $out_h|0;
 $out_stride = $out_stride|0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $glyph = $glyph|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0, $gbm = 0, $ix0 = 0, $iy0 = 0, $num_verts = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ix0 = sp + 28|0;
 $iy0 = sp + 24|0;
 $vertices = sp + 20|0;
 $gbm = sp;
 $0 = $info;
 $1 = $output;
 $2 = $out_w;
 $3 = $out_h;
 $4 = $out_stride;
 $5 = $scale_x;
 $6 = $scale_y;
 $7 = $shift_x;
 $8 = $shift_y;
 $9 = $glyph;
 $10 = $0; //@line 1961 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = $9; //@line 1961 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = (_stbtt_GetGlyphShape($10,$11,$vertices)|0); //@line 1961 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $num_verts = $12; //@line 1961 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = $0; //@line 1964 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = $9; //@line 1964 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = $5; //@line 1964 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $16 = $6; //@line 1964 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $17 = $7; //@line 1964 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = $8; //@line 1964 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _stbtt_GetGlyphBitmapBoxSubpixel($13,$14,$15,$16,$17,$18,$ix0,$iy0,0,0); //@line 1964 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $19 = $1; //@line 1965 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $20 = (($gbm) + 12|0); //@line 1965 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$20>>2] = $19; //@line 1965 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $21 = $2; //@line 1966 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$gbm>>2] = $21; //@line 1966 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $22 = $3; //@line 1967 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $23 = (($gbm) + 4|0); //@line 1967 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$23>>2] = $22; //@line 1967 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $24 = $4; //@line 1968 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $25 = (($gbm) + 8|0); //@line 1968 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$25>>2] = $24; //@line 1968 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $26 = HEAP32[$gbm>>2]|0; //@line 1970 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $27 = ($26|0)!=(0); //@line 1970 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if (!($27)) {
  $41 = HEAP32[$vertices>>2]|0; //@line 1973 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  _free($41); //@line 1973 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return; //@line 1974 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $28 = (($gbm) + 4|0); //@line 1970 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $29 = HEAP32[$28>>2]|0; //@line 1970 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $30 = ($29|0)!=(0); //@line 1970 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if (!($30)) {
  $41 = HEAP32[$vertices>>2]|0; //@line 1973 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  _free($41); //@line 1973 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return; //@line 1974 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $31 = HEAP32[$vertices>>2]|0; //@line 1971 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $32 = $num_verts; //@line 1971 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $33 = $5; //@line 1971 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $34 = $6; //@line 1971 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $35 = $7; //@line 1971 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $36 = $8; //@line 1971 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $37 = HEAP32[$ix0>>2]|0; //@line 1971 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $38 = HEAP32[$iy0>>2]|0; //@line 1971 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $39 = $0; //@line 1971 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $40 = HEAP32[$39>>2]|0; //@line 1971 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _stbtt_Rasterize($gbm,0.34999999403953552,$31,$32,$33,$34,$35,$36,$37,$38,1,$40); //@line 1971 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $41 = HEAP32[$vertices>>2]|0; //@line 1973 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _free($41); //@line 1973 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return; //@line 1974 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt_MakeGlyphBitmap($info,$output,$out_w,$out_h,$out_stride,$scale_x,$scale_y,$glyph) {
 $info = $info|0;
 $output = $output|0;
 $out_w = $out_w|0;
 $out_h = $out_h|0;
 $out_stride = $out_stride|0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $glyph = $glyph|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $info;
 $1 = $output;
 $2 = $out_w;
 $3 = $out_h;
 $4 = $out_stride;
 $5 = $scale_x;
 $6 = $scale_y;
 $7 = $glyph;
 $8 = $0; //@line 1978 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = $1; //@line 1978 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = $2; //@line 1978 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = $3; //@line 1978 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = $4; //@line 1978 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = $5; //@line 1978 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = $6; //@line 1978 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = $7; //@line 1978 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _stbtt_MakeGlyphBitmapSubpixel($8,$9,$10,$11,$12,$13,$14,0.0,0.0,$15); //@line 1978 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return; //@line 1979 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt_MakeCodepointBitmapSubpixel($info,$output,$out_w,$out_h,$out_stride,$scale_x,$scale_y,$shift_x,$shift_y,$codepoint) {
 $info = $info|0;
 $output = $output|0;
 $out_w = $out_w|0;
 $out_h = $out_h|0;
 $out_stride = $out_stride|0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $codepoint = $codepoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $info;
 $1 = $output;
 $2 = $out_w;
 $3 = $out_h;
 $4 = $out_stride;
 $5 = $scale_x;
 $6 = $scale_y;
 $7 = $shift_x;
 $8 = $shift_y;
 $9 = $codepoint;
 $10 = $0; //@line 1988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = $1; //@line 1988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = $2; //@line 1988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = $3; //@line 1988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = $4; //@line 1988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = $5; //@line 1988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $16 = $6; //@line 1988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $17 = $7; //@line 1988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = $8; //@line 1988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $19 = $0; //@line 1988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $20 = $9; //@line 1988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $21 = (_stbtt_FindGlyphIndex($19,$20)|0); //@line 1988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _stbtt_MakeGlyphBitmapSubpixel($10,$11,$12,$13,$14,$15,$16,$17,$18,$21); //@line 1988 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return; //@line 1989 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt_MakeCodepointBitmap($info,$output,$out_w,$out_h,$out_stride,$scale_x,$scale_y,$codepoint) {
 $info = $info|0;
 $output = $output|0;
 $out_w = $out_w|0;
 $out_h = $out_h|0;
 $out_stride = $out_stride|0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $codepoint = $codepoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $info;
 $1 = $output;
 $2 = $out_w;
 $3 = $out_h;
 $4 = $out_stride;
 $5 = $scale_x;
 $6 = $scale_y;
 $7 = $codepoint;
 $8 = $0; //@line 1998 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = $1; //@line 1998 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = $2; //@line 1998 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = $3; //@line 1998 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = $4; //@line 1998 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = $5; //@line 1998 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = $6; //@line 1998 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = $7; //@line 1998 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _stbtt_MakeCodepointBitmapSubpixel($8,$9,$10,$11,$12,$13,$14,0.0,0.0,$15); //@line 1998 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return; //@line 1999 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt_BakeFontBitmap($data,$offset,$pixel_height,$pixels,$pw,$ph,$first_char,$num_chars,$chardata) {
 $data = $data|0;
 $offset = $offset|0;
 $pixel_height = +$pixel_height;
 $pixels = $pixels|0;
 $pw = $pw|0;
 $ph = $ph|0;
 $first_char = $first_char|0;
 $num_chars = $num_chars|0;
 $chardata = $chardata|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $advance = 0, $bottom_y = 0, $f = 0, $g = 0, $gh = 0, $gw = 0, $i = 0, $lsb = 0, $scale = 0.0, $x = 0, $x0 = 0, $x1 = 0, $y = 0, $y0 = 0, $y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp + 40|0;
 $advance = sp + 32|0;
 $lsb = sp + 28|0;
 $x0 = sp + 24|0;
 $y0 = sp + 20|0;
 $x1 = sp + 16|0;
 $y1 = sp + 12|0;
 $1 = $data;
 $2 = $offset;
 $3 = $pixel_height;
 $4 = $pixels;
 $5 = $pw;
 $6 = $ph;
 $7 = $first_char;
 $8 = $num_chars;
 $9 = $chardata;
 $10 = $1; //@line 2016 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = $2; //@line 2016 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = (_stbtt_InitFont($f,$10,$11)|0); //@line 2016 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = ($12|0)!=(0); //@line 2016 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if (!($13)) {
  $0 = -1; //@line 2017 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $139 = $0; //@line 2050 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($139|0); //@line 2050 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $14 = $4; //@line 2018 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = $5; //@line 2018 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $16 = $6; //@line 2018 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $17 = Math_imul($15, $16)|0; //@line 2018 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _memset(($14|0),0,($17|0))|0; //@line 2018 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $y = 1; //@line 2019 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $x = 1; //@line 2019 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $bottom_y = 1; //@line 2020 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = $3; //@line 2022 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $19 = (+_stbtt_ScaleForPixelHeight($f,$18)); //@line 2022 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $scale = $19; //@line 2022 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $i = 0; //@line 2024 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 while(1) {
  $20 = $i; //@line 2024 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $21 = $8; //@line 2024 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $22 = ($20|0)<($21|0); //@line 2024 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if (!($22)) {
   label = 17;
   break;
  }
  $23 = $7; //@line 2026 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $24 = $i; //@line 2026 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $25 = (($23) + ($24))|0; //@line 2026 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $26 = (_stbtt_FindGlyphIndex($f,$25)|0); //@line 2026 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $g = $26; //@line 2026 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $27 = $g; //@line 2027 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  _stbtt_GetGlyphHMetrics($f,$27,$advance,$lsb); //@line 2027 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $28 = $g; //@line 2028 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $29 = $scale; //@line 2028 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $30 = $scale; //@line 2028 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  _stbtt_GetGlyphBitmapBox($f,$28,$29,$30,$x0,$y0,$x1,$y1); //@line 2028 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $31 = HEAP32[$x1>>2]|0; //@line 2029 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $32 = HEAP32[$x0>>2]|0; //@line 2029 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $33 = (($31) - ($32))|0; //@line 2029 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $gw = $33; //@line 2029 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $34 = HEAP32[$y1>>2]|0; //@line 2030 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $35 = HEAP32[$y0>>2]|0; //@line 2030 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $36 = (($34) - ($35))|0; //@line 2030 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $gh = $36; //@line 2030 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $37 = $x; //@line 2031 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $38 = $gw; //@line 2031 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $39 = (($37) + ($38))|0; //@line 2031 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $40 = (($39) + 1)|0; //@line 2031 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $41 = $5; //@line 2031 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $42 = ($40|0)>=($41|0); //@line 2031 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($42) {
   $43 = $bottom_y; //@line 2032 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $y = $43; //@line 2032 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $x = 1; //@line 2032 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $44 = $y; //@line 2033 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $45 = $gh; //@line 2033 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $46 = (($44) + ($45))|0; //@line 2033 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $47 = (($46) + 1)|0; //@line 2033 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $48 = $6; //@line 2033 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $49 = ($47|0)>=($48|0); //@line 2033 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($49) {
   label = 8;
   break;
  }
  $52 = $x; //@line 2035 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $53 = $gw; //@line 2035 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $54 = (($52) + ($53))|0; //@line 2035 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $55 = $5; //@line 2035 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $56 = ($54|0)<($55|0); //@line 2035 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if (!($56)) {
   label = 10;
   break;
  }
  $57 = $y; //@line 2036 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $58 = $gh; //@line 2036 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $59 = (($57) + ($58))|0; //@line 2036 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $60 = $6; //@line 2036 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $61 = ($59|0)<($60|0); //@line 2036 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if (!($61)) {
   label = 12;
   break;
  }
  $62 = $4; //@line 2037 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $63 = $x; //@line 2037 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $64 = (($62) + ($63)|0); //@line 2037 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $65 = $y; //@line 2037 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $66 = $5; //@line 2037 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $67 = Math_imul($65, $66)|0; //@line 2037 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $68 = (($64) + ($67)|0); //@line 2037 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $69 = $gw; //@line 2037 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $70 = $gh; //@line 2037 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $71 = $5; //@line 2037 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $72 = $scale; //@line 2037 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $73 = $scale; //@line 2037 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $74 = $g; //@line 2037 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  _stbtt_MakeGlyphBitmap($f,$68,$69,$70,$71,$72,$73,$74); //@line 2037 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $75 = $x; //@line 2038 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $76 = $75&65535; //@line 2038 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $77 = $i; //@line 2038 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $78 = $9; //@line 2038 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $79 = (($78) + (($77*20)|0)|0); //@line 2038 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAP16[$79>>1] = $76; //@line 2038 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $80 = $y; //@line 2039 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $81 = $80&65535; //@line 2039 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $82 = $i; //@line 2039 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $83 = $9; //@line 2039 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $84 = (($83) + (($82*20)|0)|0); //@line 2039 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $85 = (($84) + 2|0); //@line 2039 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAP16[$85>>1] = $81; //@line 2039 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $86 = $x; //@line 2040 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $87 = $gw; //@line 2040 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $88 = (($86) + ($87))|0; //@line 2040 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $89 = $88&65535; //@line 2040 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $90 = $i; //@line 2040 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $91 = $9; //@line 2040 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $92 = (($91) + (($90*20)|0)|0); //@line 2040 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $93 = (($92) + 4|0); //@line 2040 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAP16[$93>>1] = $89; //@line 2040 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $94 = $y; //@line 2041 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $95 = $gh; //@line 2041 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $96 = (($94) + ($95))|0; //@line 2041 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $97 = $96&65535; //@line 2041 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $98 = $i; //@line 2041 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $99 = $9; //@line 2041 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $100 = (($99) + (($98*20)|0)|0); //@line 2041 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $101 = (($100) + 6|0); //@line 2041 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAP16[$101>>1] = $97; //@line 2041 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $102 = $scale; //@line 2042 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $103 = HEAP32[$advance>>2]|0; //@line 2042 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $104 = (+($103|0)); //@line 2042 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $105 = $102 * $104; //@line 2042 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $106 = $i; //@line 2042 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $107 = $9; //@line 2042 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $108 = (($107) + (($106*20)|0)|0); //@line 2042 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $109 = (($108) + 16|0); //@line 2042 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAPF32[$109>>2] = $105; //@line 2042 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $110 = HEAP32[$x0>>2]|0; //@line 2043 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $111 = (+($110|0)); //@line 2043 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $112 = $i; //@line 2043 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $113 = $9; //@line 2043 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $114 = (($113) + (($112*20)|0)|0); //@line 2043 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $115 = (($114) + 8|0); //@line 2043 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAPF32[$115>>2] = $111; //@line 2043 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $116 = HEAP32[$y0>>2]|0; //@line 2044 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $117 = (+($116|0)); //@line 2044 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $118 = $i; //@line 2044 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $119 = $9; //@line 2044 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $120 = (($119) + (($118*20)|0)|0); //@line 2044 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $121 = (($120) + 12|0); //@line 2044 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAPF32[$121>>2] = $117; //@line 2044 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $122 = $x; //@line 2045 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $123 = $gw; //@line 2045 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $124 = (($122) + ($123))|0; //@line 2045 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $125 = (($124) + 1)|0; //@line 2045 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $x = $125; //@line 2045 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $126 = $y; //@line 2046 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $127 = $gh; //@line 2046 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $128 = (($126) + ($127))|0; //@line 2046 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $129 = (($128) + 1)|0; //@line 2046 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $130 = $bottom_y; //@line 2046 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $131 = ($129|0)>($130|0); //@line 2046 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($131) {
   $132 = $y; //@line 2047 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $133 = $gh; //@line 2047 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $134 = (($132) + ($133))|0; //@line 2047 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $135 = (($134) + 1)|0; //@line 2047 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $bottom_y = $135; //@line 2047 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $136 = $i; //@line 2024 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $137 = (($136) + 1)|0; //@line 2024 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $i = $137; //@line 2024 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 if ((label|0) == 8) {
  $50 = $i; //@line 2034 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $51 = (0 - ($50))|0; //@line 2034 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $0 = $51; //@line 2034 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $139 = $0; //@line 2050 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($139|0); //@line 2050 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 else if ((label|0) == 10) {
  ___assert_fail((8048|0),(7864|0),2035,(8064|0)); //@line 2035 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  // unreachable; //@line 2035 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 else if ((label|0) == 12) {
  ___assert_fail((8088|0),(7864|0),2036,(8064|0)); //@line 2036 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  // unreachable; //@line 2036 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 else if ((label|0) == 17) {
  $138 = $bottom_y; //@line 2049 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $0 = $138; //@line 2049 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $139 = $0; //@line 2050 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($139|0); //@line 2050 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 return (0)|0;
}
function _stbtt_GetBakedQuad($chardata,$pw,$ph,$char_index,$xpos,$ypos,$q,$opengl_fillrule) {
 $chardata = $chardata|0;
 $pw = $pw|0;
 $ph = $ph|0;
 $char_index = $char_index|0;
 $xpos = $xpos|0;
 $ypos = $ypos|0;
 $q = $q|0;
 $opengl_fillrule = $opengl_fillrule|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0;
 var $97 = 0, $98 = 0, $99 = 0, $b = 0, $d3d_bias = 0.0, $iph = 0.0, $ipw = 0.0, $round_x = 0, $round_y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $chardata;
 $1 = $pw;
 $2 = $ph;
 $3 = $char_index;
 $4 = $xpos;
 $5 = $ypos;
 $6 = $q;
 $7 = $opengl_fillrule;
 $8 = $7; //@line 2054 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = ($8|0)!=(0); //@line 2054 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = $9 ? 0.0 : -0.5; //@line 2054 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $d3d_bias = $10; //@line 2054 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = $1; //@line 2055 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = (+($11|0)); //@line 2055 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = 1.0 / $12; //@line 2055 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $ipw = $13; //@line 2055 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = $2; //@line 2055 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = (+($14|0)); //@line 2055 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $16 = 1.0 / $15; //@line 2055 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $iph = $16; //@line 2055 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $17 = $0; //@line 2056 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = $3; //@line 2056 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $19 = (($17) + (($18*20)|0)|0); //@line 2056 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $b = $19; //@line 2056 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $20 = $4; //@line 2057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $21 = +HEAPF32[$20>>2]; //@line 2057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $22 = $b; //@line 2057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $23 = (($22) + 8|0); //@line 2057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $24 = +HEAPF32[$23>>2]; //@line 2057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $25 = $21 + $24; //@line 2057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $26 = $25 + 0.5; //@line 2057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $27 = $26; //@line 2057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $28 = (+Math_floor((+$27))); //@line 2057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $29 = (~~(($28))); //@line 2057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $round_x = $29; //@line 2057 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $30 = $5; //@line 2058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $31 = +HEAPF32[$30>>2]; //@line 2058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $32 = $b; //@line 2058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $33 = (($32) + 12|0); //@line 2058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $34 = +HEAPF32[$33>>2]; //@line 2058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $35 = $31 + $34; //@line 2058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $36 = $35 + 0.5; //@line 2058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $37 = $36; //@line 2058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $38 = (+Math_floor((+$37))); //@line 2058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $39 = (~~(($38))); //@line 2058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $round_y = $39; //@line 2058 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $40 = $round_x; //@line 2060 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $41 = (+($40|0)); //@line 2060 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $42 = $d3d_bias; //@line 2060 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $43 = $41 + $42; //@line 2060 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $44 = $6; //@line 2060 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAPF32[$44>>2] = $43; //@line 2060 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $45 = $round_y; //@line 2061 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $46 = (+($45|0)); //@line 2061 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $47 = $d3d_bias; //@line 2061 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $48 = $46 + $47; //@line 2061 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $49 = $6; //@line 2061 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $50 = (($49) + 4|0); //@line 2061 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAPF32[$50>>2] = $48; //@line 2061 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $51 = $round_x; //@line 2062 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $52 = $b; //@line 2062 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $53 = (($52) + 4|0); //@line 2062 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $54 = HEAP16[$53>>1]|0; //@line 2062 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $55 = $54&65535; //@line 2062 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $56 = (($51) + ($55))|0; //@line 2062 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $57 = $b; //@line 2062 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $58 = HEAP16[$57>>1]|0; //@line 2062 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $59 = $58&65535; //@line 2062 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $60 = (($56) - ($59))|0; //@line 2062 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $61 = (+($60|0)); //@line 2062 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $62 = $d3d_bias; //@line 2062 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $63 = $61 + $62; //@line 2062 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $64 = $6; //@line 2062 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $65 = (($64) + 16|0); //@line 2062 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAPF32[$65>>2] = $63; //@line 2062 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $66 = $round_y; //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $67 = $b; //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $68 = (($67) + 6|0); //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $69 = HEAP16[$68>>1]|0; //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $70 = $69&65535; //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $71 = (($66) + ($70))|0; //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $72 = $b; //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $73 = (($72) + 2|0); //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $74 = HEAP16[$73>>1]|0; //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $75 = $74&65535; //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $76 = (($71) - ($75))|0; //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $77 = (+($76|0)); //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $78 = $d3d_bias; //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $79 = $77 + $78; //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $80 = $6; //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $81 = (($80) + 20|0); //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAPF32[$81>>2] = $79; //@line 2063 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $82 = $b; //@line 2065 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $83 = HEAP16[$82>>1]|0; //@line 2065 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $84 = $83&65535; //@line 2065 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $85 = (+($84|0)); //@line 2065 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $86 = $ipw; //@line 2065 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $87 = $85 * $86; //@line 2065 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $88 = $6; //@line 2065 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $89 = (($88) + 8|0); //@line 2065 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAPF32[$89>>2] = $87; //@line 2065 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $90 = $b; //@line 2066 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $91 = (($90) + 2|0); //@line 2066 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $92 = HEAP16[$91>>1]|0; //@line 2066 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $93 = $92&65535; //@line 2066 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $94 = (+($93|0)); //@line 2066 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $95 = $iph; //@line 2066 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $96 = $94 * $95; //@line 2066 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $97 = $6; //@line 2066 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $98 = (($97) + 12|0); //@line 2066 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAPF32[$98>>2] = $96; //@line 2066 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $99 = $b; //@line 2067 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $100 = (($99) + 4|0); //@line 2067 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $101 = HEAP16[$100>>1]|0; //@line 2067 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $102 = $101&65535; //@line 2067 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $103 = (+($102|0)); //@line 2067 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $104 = $ipw; //@line 2067 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $105 = $103 * $104; //@line 2067 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $106 = $6; //@line 2067 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $107 = (($106) + 24|0); //@line 2067 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAPF32[$107>>2] = $105; //@line 2067 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $108 = $b; //@line 2068 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $109 = (($108) + 6|0); //@line 2068 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $110 = HEAP16[$109>>1]|0; //@line 2068 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $111 = $110&65535; //@line 2068 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $112 = (+($111|0)); //@line 2068 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $113 = $iph; //@line 2068 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $114 = $112 * $113; //@line 2068 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $115 = $6; //@line 2068 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $116 = (($115) + 28|0); //@line 2068 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAPF32[$116>>2] = $114; //@line 2068 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $117 = $b; //@line 2070 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $118 = (($117) + 16|0); //@line 2070 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $119 = +HEAPF32[$118>>2]; //@line 2070 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $120 = $4; //@line 2070 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $121 = +HEAPF32[$120>>2]; //@line 2070 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $122 = $121 + $119; //@line 2070 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAPF32[$120>>2] = $122; //@line 2070 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return; //@line 2071 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _initTextStyle($agg$result,$font_pos,$pixels,$color) {
 $agg$result = $agg$result|0;
 $font_pos = $font_pos|0;
 $pixels = +$pixels;
 $color = $color|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $data = 0, $font = 0, $fs = 0, $s = 0, $vs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 12|0;
 $vs = sp + 351|0;
 $fs = sp + 36|0;
 $0 = $font_pos;
 $1 = $pixels;
 $2 = $color;
 ;HEAP32[$s+0>>2]=0|0;HEAP32[$s+4>>2]=0|0;HEAP32[$s+8>>2]=0|0; //@line 10 "src/texttest/../puun/gf/text.c"
 $3 = (_malloc(48)|0); //@line 12 "src/texttest/../puun/gf/text.c"
 $font = $3; //@line 12 "src/texttest/../puun/gf/text.c"
 $4 = (_malloc(1000000)|0); //@line 13 "src/texttest/../puun/gf/text.c"
 $buffer = $4; //@line 13 "src/texttest/../puun/gf/text.c"
 $5 = $buffer; //@line 14 "src/texttest/../puun/gf/text.c"
 $6 = $0; //@line 14 "src/texttest/../puun/gf/text.c"
 $7 = (_fopen(($6|0),(8104|0))|0); //@line 14 "src/texttest/../puun/gf/text.c"
 (_fread(($5|0),1,1000000,($7|0))|0); //@line 14 "src/texttest/../puun/gf/text.c"
 $8 = $font; //@line 15 "src/texttest/../puun/gf/text.c"
 $9 = $buffer; //@line 15 "src/texttest/../puun/gf/text.c"
 (_stbtt_InitFont($8,$9,0)|0); //@line 15 "src/texttest/../puun/gf/text.c"
 $10 = HEAP8[7784>>0]|0; //@line 17 "src/texttest/../puun/gf/text.c"
 $11 = (($10) + 1)<<24>>24; //@line 17 "src/texttest/../puun/gf/text.c"
 HEAP8[7784>>0] = $11; //@line 17 "src/texttest/../puun/gf/text.c"
 HEAP8[$s>>0] = $11; //@line 17 "src/texttest/../puun/gf/text.c"
 $12 = $1; //@line 18 "src/texttest/../puun/gf/text.c"
 $13 = (($s) + 4|0); //@line 18 "src/texttest/../puun/gf/text.c"
 HEAPF32[$13>>2] = $12; //@line 18 "src/texttest/../puun/gf/text.c"
 $14 = $2; //@line 19 "src/texttest/../puun/gf/text.c"
 $15 = (($s) + 8|0); //@line 19 "src/texttest/../puun/gf/text.c"
 HEAP32[$15>>2] = $14; //@line 19 "src/texttest/../puun/gf/text.c"
 $16 = HEAP8[$s>>0]|0; //@line 21 "src/texttest/../puun/gf/text.c"
 $17 = $16&255; //@line 21 "src/texttest/../puun/gf/text.c"
 $18 = (1664 + (($17*24)|0)|0); //@line 21 "src/texttest/../puun/gf/text.c"
 $data = $18; //@line 21 "src/texttest/../puun/gf/text.c"
 $19 = $font; //@line 22 "src/texttest/../puun/gf/text.c"
 $20 = $data; //@line 22 "src/texttest/../puun/gf/text.c"
 HEAP32[$20>>2] = $19; //@line 22 "src/texttest/../puun/gf/text.c"
 $21 = (_malloc(1048576)|0); //@line 23 "src/texttest/../puun/gf/text.c"
 $22 = $data; //@line 23 "src/texttest/../puun/gf/text.c"
 $23 = (($22) + 4|0); //@line 23 "src/texttest/../puun/gf/text.c"
 HEAP32[$23>>2] = $21; //@line 23 "src/texttest/../puun/gf/text.c"
 $24 = (_malloc(1920)|0); //@line 24 "src/texttest/../puun/gf/text.c"
 $25 = $data; //@line 24 "src/texttest/../puun/gf/text.c"
 $26 = (($25) + 8|0); //@line 24 "src/texttest/../puun/gf/text.c"
 HEAP32[$26>>2] = $24; //@line 24 "src/texttest/../puun/gf/text.c"
 $27 = $buffer; //@line 26 "src/texttest/../puun/gf/text.c"
 $28 = (($s) + 4|0); //@line 26 "src/texttest/../puun/gf/text.c"
 $29 = +HEAPF32[$28>>2]; //@line 26 "src/texttest/../puun/gf/text.c"
 $30 = $data; //@line 26 "src/texttest/../puun/gf/text.c"
 $31 = (($30) + 4|0); //@line 26 "src/texttest/../puun/gf/text.c"
 $32 = HEAP32[$31>>2]|0; //@line 26 "src/texttest/../puun/gf/text.c"
 $33 = $data; //@line 26 "src/texttest/../puun/gf/text.c"
 $34 = (($33) + 8|0); //@line 26 "src/texttest/../puun/gf/text.c"
 $35 = HEAP32[$34>>2]|0; //@line 26 "src/texttest/../puun/gf/text.c"
 (_stbtt_BakeFontBitmap($27,0,$29,$32,1024,1024,32,96,$35)|0); //@line 26 "src/texttest/../puun/gf/text.c"
 $36 = $data; //@line 31 "src/texttest/../puun/gf/text.c"
 $37 = (($36) + 12|0); //@line 31 "src/texttest/../puun/gf/text.c"
 _glGenTextures(1,($37|0)); //@line 31 "src/texttest/../puun/gf/text.c"
 $38 = $data; //@line 32 "src/texttest/../puun/gf/text.c"
 $39 = (($38) + 12|0); //@line 32 "src/texttest/../puun/gf/text.c"
 $40 = HEAP32[$39>>2]|0; //@line 32 "src/texttest/../puun/gf/text.c"
 _glBindTexture(3553,($40|0)); //@line 32 "src/texttest/../puun/gf/text.c"
 $41 = $data; //@line 33 "src/texttest/../puun/gf/text.c"
 $42 = (($41) + 4|0); //@line 33 "src/texttest/../puun/gf/text.c"
 $43 = HEAP32[$42>>2]|0; //@line 33 "src/texttest/../puun/gf/text.c"
 _glTexImage2D(3553,0,6406,1024,1024,0,6406,5121,($43|0)); //@line 33 "src/texttest/../puun/gf/text.c"
 _glTexParameteri(3553,10241,9729); //@line 36 "src/texttest/../puun/gf/text.c"
 _memcpy(($vs|0),(8112|0),191)|0; //@line 38 "src/texttest/../puun/gf/text.c"
 _memcpy(($fs|0),(8304|0),315)|0; //@line 42 "src/texttest/../puun/gf/text.c"
 $44 = (_strlen(($vs|0))|0); //@line 51 "src/texttest/../puun/gf/text.c"
 $45 = (_strlen(($fs|0))|0); //@line 51 "src/texttest/../puun/gf/text.c"
 $46 = (_setupProgram($vs,$44,$fs,$45)|0); //@line 51 "src/texttest/../puun/gf/text.c"
 $47 = $data; //@line 51 "src/texttest/../puun/gf/text.c"
 $48 = (($47) + 16|0); //@line 51 "src/texttest/../puun/gf/text.c"
 HEAP32[$48>>2] = $46; //@line 51 "src/texttest/../puun/gf/text.c"
 $49 = $data; //@line 53 "src/texttest/../puun/gf/text.c"
 $50 = (($49) + 20|0); //@line 53 "src/texttest/../puun/gf/text.c"
 _glGenBuffers(1,($50|0)); //@line 53 "src/texttest/../puun/gf/text.c"
 ;HEAP32[$agg$result+0>>2]=HEAP32[$s+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$s+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$s+8>>2]|0; //@line 54 "src/texttest/../puun/gf/text.c"
 STACKTOP = sp;return; //@line 54 "src/texttest/../puun/gf/text.c"
}
function _gfTextFit($gfText) {
 $gfText = $gfText|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $advance = 0, $ascent = 0, $bbox = 0, $ch = 0, $descent = 0, $font = 0, $lineGap = 0, $lsb = 0, $scale = 0.0, $style = 0, $text = 0, $x_shift = 0.0, $xpos = 0.0, $ypos = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 76|0;
 $style = sp + 64|0;
 $bbox = sp + 48|0;
 $ascent = sp + 32|0;
 $descent = sp + 28|0;
 $lineGap = sp + 24|0;
 $advance = sp + 8|0;
 $lsb = sp + 4|0;
 $1 = (($gfText) + 20|0); //@line 58 "src/texttest/../puun/gf/text.c"
 ;HEAP32[$style+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$style+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$style+8>>2]=HEAP32[$1+8>>2]|0; //@line 58 "src/texttest/../puun/gf/text.c"
 ;HEAP32[$bbox+0>>2]=HEAP32[$gfText+0>>2]|0;HEAP32[$bbox+4>>2]=HEAP32[$gfText+4>>2]|0;HEAP32[$bbox+8>>2]=HEAP32[$gfText+8>>2]|0;HEAP32[$bbox+12>>2]=HEAP32[$gfText+12>>2]|0; //@line 59 "src/texttest/../puun/gf/text.c"
 $2 = (($gfText) + 16|0); //@line 60 "src/texttest/../puun/gf/text.c"
 $3 = HEAP32[$2>>2]|0; //@line 60 "src/texttest/../puun/gf/text.c"
 $text = $3; //@line 60 "src/texttest/../puun/gf/text.c"
 $4 = HEAP8[$style>>0]|0; //@line 61 "src/texttest/../puun/gf/text.c"
 $5 = $4&255; //@line 61 "src/texttest/../puun/gf/text.c"
 $6 = (1664 + (($5*24)|0)|0); //@line 61 "src/texttest/../puun/gf/text.c"
 $7 = HEAP32[$6>>2]|0; //@line 61 "src/texttest/../puun/gf/text.c"
 $font = $7; //@line 61 "src/texttest/../puun/gf/text.c"
 $8 = $font; //@line 63 "src/texttest/../puun/gf/text.c"
 $9 = (($style) + 4|0); //@line 63 "src/texttest/../puun/gf/text.c"
 $10 = +HEAPF32[$9>>2]; //@line 63 "src/texttest/../puun/gf/text.c"
 $11 = (+_stbtt_ScaleForPixelHeight($8,$10)); //@line 63 "src/texttest/../puun/gf/text.c"
 $scale = $11; //@line 63 "src/texttest/../puun/gf/text.c"
 $ch = 0; //@line 65 "src/texttest/../puun/gf/text.c"
 $12 = $font; //@line 67 "src/texttest/../puun/gf/text.c"
 _stbtt_GetFontVMetrics($12,$ascent,$descent,$lineGap); //@line 67 "src/texttest/../puun/gf/text.c"
 $xpos = 0.0; //@line 68 "src/texttest/../puun/gf/text.c"
 $ypos = 0.0; //@line 68 "src/texttest/../puun/gf/text.c"
 while(1) {
  $13 = $ch; //@line 70 "src/texttest/../puun/gf/text.c"
  $14 = $text; //@line 70 "src/texttest/../puun/gf/text.c"
  $15 = (($14) + ($13)|0); //@line 70 "src/texttest/../puun/gf/text.c"
  $16 = HEAP8[$15>>0]|0; //@line 70 "src/texttest/../puun/gf/text.c"
  $17 = ($16<<24>>24)!=(0); //@line 70 "src/texttest/../puun/gf/text.c"
  if (!($17)) {
   label = 12;
   break;
  }
  $18 = $xpos; //@line 72 "src/texttest/../puun/gf/text.c"
  $19 = $xpos; //@line 72 "src/texttest/../puun/gf/text.c"
  $20 = $19; //@line 72 "src/texttest/../puun/gf/text.c"
  $21 = (+Math_floor((+$20))); //@line 72 "src/texttest/../puun/gf/text.c"
  $22 = $21; //@line 72 "src/texttest/../puun/gf/text.c"
  $23 = $18 - $22; //@line 72 "src/texttest/../puun/gf/text.c"
  $x_shift = $23; //@line 72 "src/texttest/../puun/gf/text.c"
  $24 = $font; //@line 73 "src/texttest/../puun/gf/text.c"
  $25 = $ch; //@line 73 "src/texttest/../puun/gf/text.c"
  $26 = $text; //@line 73 "src/texttest/../puun/gf/text.c"
  $27 = (($26) + ($25)|0); //@line 73 "src/texttest/../puun/gf/text.c"
  $28 = HEAP8[$27>>0]|0; //@line 73 "src/texttest/../puun/gf/text.c"
  $29 = $28 << 24 >> 24; //@line 73 "src/texttest/../puun/gf/text.c"
  _stbtt_GetCodepointHMetrics($24,$29,$advance,$lsb); //@line 73 "src/texttest/../puun/gf/text.c"
  $30 = HEAP32[$advance>>2]|0; //@line 75 "src/texttest/../puun/gf/text.c"
  $31 = (+($30|0)); //@line 75 "src/texttest/../puun/gf/text.c"
  $32 = $scale; //@line 75 "src/texttest/../puun/gf/text.c"
  $33 = $31 * $32; //@line 75 "src/texttest/../puun/gf/text.c"
  $34 = $xpos; //@line 75 "src/texttest/../puun/gf/text.c"
  $35 = $34 + $33; //@line 75 "src/texttest/../puun/gf/text.c"
  $xpos = $35; //@line 75 "src/texttest/../puun/gf/text.c"
  $36 = $ch; //@line 76 "src/texttest/../puun/gf/text.c"
  $37 = (($36) + 1)|0; //@line 76 "src/texttest/../puun/gf/text.c"
  $38 = $text; //@line 76 "src/texttest/../puun/gf/text.c"
  $39 = (($38) + ($37)|0); //@line 76 "src/texttest/../puun/gf/text.c"
  $40 = HEAP8[$39>>0]|0; //@line 76 "src/texttest/../puun/gf/text.c"
  $41 = ($40<<24>>24)!=(0); //@line 76 "src/texttest/../puun/gf/text.c"
  if ($41) {
   $42 = $scale; //@line 77 "src/texttest/../puun/gf/text.c"
   $43 = $font; //@line 77 "src/texttest/../puun/gf/text.c"
   $44 = $ch; //@line 77 "src/texttest/../puun/gf/text.c"
   $45 = $text; //@line 77 "src/texttest/../puun/gf/text.c"
   $46 = (($45) + ($44)|0); //@line 77 "src/texttest/../puun/gf/text.c"
   $47 = HEAP8[$46>>0]|0; //@line 77 "src/texttest/../puun/gf/text.c"
   $48 = $47 << 24 >> 24; //@line 77 "src/texttest/../puun/gf/text.c"
   $49 = $ch; //@line 77 "src/texttest/../puun/gf/text.c"
   $50 = (($49) + 1)|0; //@line 77 "src/texttest/../puun/gf/text.c"
   $51 = $text; //@line 77 "src/texttest/../puun/gf/text.c"
   $52 = (($51) + ($50)|0); //@line 77 "src/texttest/../puun/gf/text.c"
   $53 = HEAP8[$52>>0]|0; //@line 77 "src/texttest/../puun/gf/text.c"
   $54 = $53 << 24 >> 24; //@line 77 "src/texttest/../puun/gf/text.c"
   $55 = (_stbtt_GetCodepointKernAdvance($43,$48,$54)|0); //@line 77 "src/texttest/../puun/gf/text.c"
   $56 = (+($55|0)); //@line 77 "src/texttest/../puun/gf/text.c"
   $57 = $42 * $56; //@line 77 "src/texttest/../puun/gf/text.c"
   $58 = $xpos; //@line 77 "src/texttest/../puun/gf/text.c"
   $59 = $58 + $57; //@line 77 "src/texttest/../puun/gf/text.c"
   $xpos = $59; //@line 77 "src/texttest/../puun/gf/text.c"
  }
  $60 = $xpos; //@line 79 "src/texttest/../puun/gf/text.c"
  $61 = (($bbox) + 8|0); //@line 79 "src/texttest/../puun/gf/text.c"
  $62 = HEAP32[$61>>2]|0; //@line 79 "src/texttest/../puun/gf/text.c"
  $63 = (+($62>>>0)); //@line 79 "src/texttest/../puun/gf/text.c"
  $64 = $60 > $63; //@line 79 "src/texttest/../puun/gf/text.c"
  if ($64) {
   $65 = HEAP32[$ascent>>2]|0; //@line 80 "src/texttest/../puun/gf/text.c"
   $66 = HEAP32[$descent>>2]|0; //@line 80 "src/texttest/../puun/gf/text.c"
   $67 = (($65) - ($66))|0; //@line 80 "src/texttest/../puun/gf/text.c"
   $68 = HEAP32[$lineGap>>2]|0; //@line 80 "src/texttest/../puun/gf/text.c"
   $69 = (($67) + ($68))|0; //@line 80 "src/texttest/../puun/gf/text.c"
   $70 = (+($69|0)); //@line 80 "src/texttest/../puun/gf/text.c"
   $71 = $ypos; //@line 80 "src/texttest/../puun/gf/text.c"
   $72 = $71 + $70; //@line 80 "src/texttest/../puun/gf/text.c"
   $ypos = $72; //@line 80 "src/texttest/../puun/gf/text.c"
   $xpos = 0.0; //@line 81 "src/texttest/../puun/gf/text.c"
   $73 = $font; //@line 83 "src/texttest/../puun/gf/text.c"
   $74 = $ch; //@line 83 "src/texttest/../puun/gf/text.c"
   $75 = $text; //@line 83 "src/texttest/../puun/gf/text.c"
   $76 = (($75) + ($74)|0); //@line 83 "src/texttest/../puun/gf/text.c"
   $77 = HEAP8[$76>>0]|0; //@line 83 "src/texttest/../puun/gf/text.c"
   $78 = $77 << 24 >> 24; //@line 83 "src/texttest/../puun/gf/text.c"
   _stbtt_GetCodepointHMetrics($73,$78,$advance,$lsb); //@line 83 "src/texttest/../puun/gf/text.c"
   $79 = HEAP32[$advance>>2]|0; //@line 85 "src/texttest/../puun/gf/text.c"
   $80 = (+($79|0)); //@line 85 "src/texttest/../puun/gf/text.c"
   $81 = $scale; //@line 85 "src/texttest/../puun/gf/text.c"
   $82 = $80 * $81; //@line 85 "src/texttest/../puun/gf/text.c"
   $83 = $xpos; //@line 85 "src/texttest/../puun/gf/text.c"
   $84 = $83 + $82; //@line 85 "src/texttest/../puun/gf/text.c"
   $xpos = $84; //@line 85 "src/texttest/../puun/gf/text.c"
   $85 = $ch; //@line 86 "src/texttest/../puun/gf/text.c"
   $86 = (($85) + 1)|0; //@line 86 "src/texttest/../puun/gf/text.c"
   $87 = $text; //@line 86 "src/texttest/../puun/gf/text.c"
   $88 = (($87) + ($86)|0); //@line 86 "src/texttest/../puun/gf/text.c"
   $89 = HEAP8[$88>>0]|0; //@line 86 "src/texttest/../puun/gf/text.c"
   $90 = ($89<<24>>24)!=(0); //@line 86 "src/texttest/../puun/gf/text.c"
   if ($90) {
    $91 = $scale; //@line 87 "src/texttest/../puun/gf/text.c"
    $92 = $font; //@line 87 "src/texttest/../puun/gf/text.c"
    $93 = $ch; //@line 87 "src/texttest/../puun/gf/text.c"
    $94 = $text; //@line 87 "src/texttest/../puun/gf/text.c"
    $95 = (($94) + ($93)|0); //@line 87 "src/texttest/../puun/gf/text.c"
    $96 = HEAP8[$95>>0]|0; //@line 87 "src/texttest/../puun/gf/text.c"
    $97 = $96 << 24 >> 24; //@line 87 "src/texttest/../puun/gf/text.c"
    $98 = $ch; //@line 87 "src/texttest/../puun/gf/text.c"
    $99 = (($98) + 1)|0; //@line 87 "src/texttest/../puun/gf/text.c"
    $100 = $text; //@line 87 "src/texttest/../puun/gf/text.c"
    $101 = (($100) + ($99)|0); //@line 87 "src/texttest/../puun/gf/text.c"
    $102 = HEAP8[$101>>0]|0; //@line 87 "src/texttest/../puun/gf/text.c"
    $103 = $102 << 24 >> 24; //@line 87 "src/texttest/../puun/gf/text.c"
    $104 = (_stbtt_GetCodepointKernAdvance($92,$97,$103)|0); //@line 87 "src/texttest/../puun/gf/text.c"
    $105 = (+($104|0)); //@line 87 "src/texttest/../puun/gf/text.c"
    $106 = $91 * $105; //@line 87 "src/texttest/../puun/gf/text.c"
    $107 = $xpos; //@line 87 "src/texttest/../puun/gf/text.c"
    $108 = $107 + $106; //@line 87 "src/texttest/../puun/gf/text.c"
    $xpos = $108; //@line 87 "src/texttest/../puun/gf/text.c"
   }
  }
  $109 = $ypos; //@line 90 "src/texttest/../puun/gf/text.c"
  $110 = (($bbox) + 12|0); //@line 90 "src/texttest/../puun/gf/text.c"
  $111 = HEAP32[$110>>2]|0; //@line 90 "src/texttest/../puun/gf/text.c"
  $112 = (+($111>>>0)); //@line 90 "src/texttest/../puun/gf/text.c"
  $113 = $109 > $112; //@line 90 "src/texttest/../puun/gf/text.c"
  if ($113) {
   label = 10;
   break;
  }
  $114 = $ch; //@line 91 "src/texttest/../puun/gf/text.c"
  $115 = (($114) + 1)|0; //@line 91 "src/texttest/../puun/gf/text.c"
  $ch = $115; //@line 91 "src/texttest/../puun/gf/text.c"
 }
 if ((label|0) == 10) {
  $$expand_i1_val = 0; //@line 90 "src/texttest/../puun/gf/text.c"
  HEAP8[$0>>0] = $$expand_i1_val; //@line 90 "src/texttest/../puun/gf/text.c"
  $$pre_trunc = HEAP8[$0>>0]|0; //@line 95 "src/texttest/../puun/gf/text.c"
  $116 = $$pre_trunc&1; //@line 95 "src/texttest/../puun/gf/text.c"
  STACKTOP = sp;return ($116|0); //@line 95 "src/texttest/../puun/gf/text.c"
 }
 else if ((label|0) == 12) {
  $$expand_i1_val2 = 1; //@line 93 "src/texttest/../puun/gf/text.c"
  HEAP8[$0>>0] = $$expand_i1_val2; //@line 93 "src/texttest/../puun/gf/text.c"
  $$pre_trunc = HEAP8[$0>>0]|0; //@line 95 "src/texttest/../puun/gf/text.c"
  $116 = $$pre_trunc&1; //@line 95 "src/texttest/../puun/gf/text.c"
  STACKTOP = sp;return ($116|0); //@line 95 "src/texttest/../puun/gf/text.c"
 }
 return (0)|0;
}
function _gfTextRender($gfText) {
 $gfText = $gfText|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $bbox = 0, $ch = 0, $fontData = 0, $i = 0, $length = 0, $pos = 0, $quad = 0, $stride = 0, $style = 0, $text = 0, $uv = 0, $vertex = 0, $xpos = 0, $ypos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $style = sp + 112|0;
 $bbox = sp + 96|0;
 $fontData = sp + 64|0;
 $xpos = sp + 56|0;
 $ypos = sp + 52|0;
 $quad = sp + 8|0;
 $0 = (($gfText) + 20|0); //@line 98 "src/texttest/../puun/gf/text.c"
 ;HEAP32[$style+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$style+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$style+8>>2]=HEAP32[$0+8>>2]|0; //@line 98 "src/texttest/../puun/gf/text.c"
 ;HEAP32[$bbox+0>>2]=HEAP32[$gfText+0>>2]|0;HEAP32[$bbox+4>>2]=HEAP32[$gfText+4>>2]|0;HEAP32[$bbox+8>>2]=HEAP32[$gfText+8>>2]|0;HEAP32[$bbox+12>>2]=HEAP32[$gfText+12>>2]|0; //@line 99 "src/texttest/../puun/gf/text.c"
 $1 = (($gfText) + 16|0); //@line 100 "src/texttest/../puun/gf/text.c"
 $2 = HEAP32[$1>>2]|0; //@line 100 "src/texttest/../puun/gf/text.c"
 $text = $2; //@line 100 "src/texttest/../puun/gf/text.c"
 $3 = HEAP8[$style>>0]|0; //@line 111 "src/texttest/../puun/gf/text.c"
 $4 = $3&255; //@line 111 "src/texttest/../puun/gf/text.c"
 $5 = (1664 + (($4*24)|0)|0); //@line 111 "src/texttest/../puun/gf/text.c"
 ;HEAP32[$fontData+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$fontData+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$fontData+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$fontData+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$fontData+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[$fontData+20>>2]=HEAP32[$5+20>>2]|0; //@line 111 "src/texttest/../puun/gf/text.c"
 _glEnable(3553); //@line 112 "src/texttest/../puun/gf/text.c"
 $6 = (($fontData) + 12|0); //@line 113 "src/texttest/../puun/gf/text.c"
 $7 = HEAP32[$6>>2]|0; //@line 113 "src/texttest/../puun/gf/text.c"
 _glBindTexture(3553,($7|0)); //@line 113 "src/texttest/../puun/gf/text.c"
 $8 = (($fontData) + 16|0); //@line 115 "src/texttest/../puun/gf/text.c"
 $9 = HEAP32[$8>>2]|0; //@line 115 "src/texttest/../puun/gf/text.c"
 _glUseProgram(($9|0)); //@line 115 "src/texttest/../puun/gf/text.c"
 $ch = 0; //@line 118 "src/texttest/../puun/gf/text.c"
 HEAPF32[$xpos>>2] = -256.0; //@line 119 "src/texttest/../puun/gf/text.c"
 HEAPF32[$ypos>>2] = 0.0; //@line 119 "src/texttest/../puun/gf/text.c"
 $10 = $text; //@line 120 "src/texttest/../puun/gf/text.c"
 $11 = (_strlen(($10|0))|0); //@line 120 "src/texttest/../puun/gf/text.c"
 $length = $11; //@line 120 "src/texttest/../puun/gf/text.c"
 $12 = $length; //@line 121 "src/texttest/../puun/gf/text.c"
 $13 = $12<<2; //@line 121 "src/texttest/../puun/gf/text.c"
 $14 = ($13*6)|0; //@line 121 "src/texttest/../puun/gf/text.c"
 $15 = $14<<2; //@line 121 "src/texttest/../puun/gf/text.c"
 $16 = (_malloc($15)|0); //@line 121 "src/texttest/../puun/gf/text.c"
 $vertex = $16; //@line 121 "src/texttest/../puun/gf/text.c"
 $i = 0; //@line 122 "src/texttest/../puun/gf/text.c"
 while(1) {
  $17 = $ch; //@line 124 "src/texttest/../puun/gf/text.c"
  $18 = $text; //@line 124 "src/texttest/../puun/gf/text.c"
  $19 = (($18) + ($17)|0); //@line 124 "src/texttest/../puun/gf/text.c"
  $20 = HEAP8[$19>>0]|0; //@line 124 "src/texttest/../puun/gf/text.c"
  $21 = ($20<<24>>24)!=(0); //@line 124 "src/texttest/../puun/gf/text.c"
  if (!($21)) {
   break;
  }
  $22 = (($fontData) + 8|0); //@line 126 "src/texttest/../puun/gf/text.c"
  $23 = HEAP32[$22>>2]|0; //@line 126 "src/texttest/../puun/gf/text.c"
  $24 = $ch; //@line 126 "src/texttest/../puun/gf/text.c"
  $25 = $text; //@line 126 "src/texttest/../puun/gf/text.c"
  $26 = (($25) + ($24)|0); //@line 126 "src/texttest/../puun/gf/text.c"
  $27 = HEAP8[$26>>0]|0; //@line 126 "src/texttest/../puun/gf/text.c"
  $28 = $27 << 24 >> 24; //@line 126 "src/texttest/../puun/gf/text.c"
  $29 = (($28) - 32)|0; //@line 126 "src/texttest/../puun/gf/text.c"
  _stbtt_GetBakedQuad($23,1024,1024,$29,$xpos,$ypos,$quad,1); //@line 126 "src/texttest/../puun/gf/text.c"
  $30 = +HEAPF32[$quad>>2]; //@line 131 "src/texttest/../puun/gf/text.c"
  $31 = $i; //@line 131 "src/texttest/../puun/gf/text.c"
  $32 = $vertex; //@line 131 "src/texttest/../puun/gf/text.c"
  $33 = (($32) + ($31<<2)|0); //@line 131 "src/texttest/../puun/gf/text.c"
  HEAPF32[$33>>2] = $30; //@line 131 "src/texttest/../puun/gf/text.c"
  $34 = $i; //@line 131 "src/texttest/../puun/gf/text.c"
  $35 = (($34) + 1)|0; //@line 131 "src/texttest/../puun/gf/text.c"
  $i = $35; //@line 131 "src/texttest/../puun/gf/text.c"
  $36 = (($quad) + 4|0); //@line 132 "src/texttest/../puun/gf/text.c"
  $37 = +HEAPF32[$36>>2]; //@line 132 "src/texttest/../puun/gf/text.c"
  $38 = $i; //@line 132 "src/texttest/../puun/gf/text.c"
  $39 = $vertex; //@line 132 "src/texttest/../puun/gf/text.c"
  $40 = (($39) + ($38<<2)|0); //@line 132 "src/texttest/../puun/gf/text.c"
  HEAPF32[$40>>2] = $37; //@line 132 "src/texttest/../puun/gf/text.c"
  $41 = $i; //@line 132 "src/texttest/../puun/gf/text.c"
  $42 = (($41) + 1)|0; //@line 132 "src/texttest/../puun/gf/text.c"
  $i = $42; //@line 132 "src/texttest/../puun/gf/text.c"
  $43 = (($quad) + 8|0); //@line 133 "src/texttest/../puun/gf/text.c"
  $44 = +HEAPF32[$43>>2]; //@line 133 "src/texttest/../puun/gf/text.c"
  $45 = $i; //@line 133 "src/texttest/../puun/gf/text.c"
  $46 = $vertex; //@line 133 "src/texttest/../puun/gf/text.c"
  $47 = (($46) + ($45<<2)|0); //@line 133 "src/texttest/../puun/gf/text.c"
  HEAPF32[$47>>2] = $44; //@line 133 "src/texttest/../puun/gf/text.c"
  $48 = $i; //@line 133 "src/texttest/../puun/gf/text.c"
  $49 = (($48) + 1)|0; //@line 133 "src/texttest/../puun/gf/text.c"
  $i = $49; //@line 133 "src/texttest/../puun/gf/text.c"
  $50 = (($quad) + 28|0); //@line 134 "src/texttest/../puun/gf/text.c"
  $51 = +HEAPF32[$50>>2]; //@line 134 "src/texttest/../puun/gf/text.c"
  $52 = $i; //@line 134 "src/texttest/../puun/gf/text.c"
  $53 = $vertex; //@line 134 "src/texttest/../puun/gf/text.c"
  $54 = (($53) + ($52<<2)|0); //@line 134 "src/texttest/../puun/gf/text.c"
  HEAPF32[$54>>2] = $51; //@line 134 "src/texttest/../puun/gf/text.c"
  $55 = $i; //@line 134 "src/texttest/../puun/gf/text.c"
  $56 = (($55) + 1)|0; //@line 134 "src/texttest/../puun/gf/text.c"
  $i = $56; //@line 134 "src/texttest/../puun/gf/text.c"
  $57 = (($quad) + 16|0); //@line 136 "src/texttest/../puun/gf/text.c"
  $58 = +HEAPF32[$57>>2]; //@line 136 "src/texttest/../puun/gf/text.c"
  $59 = $i; //@line 136 "src/texttest/../puun/gf/text.c"
  $60 = $vertex; //@line 136 "src/texttest/../puun/gf/text.c"
  $61 = (($60) + ($59<<2)|0); //@line 136 "src/texttest/../puun/gf/text.c"
  HEAPF32[$61>>2] = $58; //@line 136 "src/texttest/../puun/gf/text.c"
  $62 = $i; //@line 136 "src/texttest/../puun/gf/text.c"
  $63 = (($62) + 1)|0; //@line 136 "src/texttest/../puun/gf/text.c"
  $i = $63; //@line 136 "src/texttest/../puun/gf/text.c"
  $64 = (($quad) + 4|0); //@line 137 "src/texttest/../puun/gf/text.c"
  $65 = +HEAPF32[$64>>2]; //@line 137 "src/texttest/../puun/gf/text.c"
  $66 = $i; //@line 137 "src/texttest/../puun/gf/text.c"
  $67 = $vertex; //@line 137 "src/texttest/../puun/gf/text.c"
  $68 = (($67) + ($66<<2)|0); //@line 137 "src/texttest/../puun/gf/text.c"
  HEAPF32[$68>>2] = $65; //@line 137 "src/texttest/../puun/gf/text.c"
  $69 = $i; //@line 137 "src/texttest/../puun/gf/text.c"
  $70 = (($69) + 1)|0; //@line 137 "src/texttest/../puun/gf/text.c"
  $i = $70; //@line 137 "src/texttest/../puun/gf/text.c"
  $71 = (($quad) + 24|0); //@line 138 "src/texttest/../puun/gf/text.c"
  $72 = +HEAPF32[$71>>2]; //@line 138 "src/texttest/../puun/gf/text.c"
  $73 = $i; //@line 138 "src/texttest/../puun/gf/text.c"
  $74 = $vertex; //@line 138 "src/texttest/../puun/gf/text.c"
  $75 = (($74) + ($73<<2)|0); //@line 138 "src/texttest/../puun/gf/text.c"
  HEAPF32[$75>>2] = $72; //@line 138 "src/texttest/../puun/gf/text.c"
  $76 = $i; //@line 138 "src/texttest/../puun/gf/text.c"
  $77 = (($76) + 1)|0; //@line 138 "src/texttest/../puun/gf/text.c"
  $i = $77; //@line 138 "src/texttest/../puun/gf/text.c"
  $78 = (($quad) + 28|0); //@line 139 "src/texttest/../puun/gf/text.c"
  $79 = +HEAPF32[$78>>2]; //@line 139 "src/texttest/../puun/gf/text.c"
  $80 = $i; //@line 139 "src/texttest/../puun/gf/text.c"
  $81 = $vertex; //@line 139 "src/texttest/../puun/gf/text.c"
  $82 = (($81) + ($80<<2)|0); //@line 139 "src/texttest/../puun/gf/text.c"
  HEAPF32[$82>>2] = $79; //@line 139 "src/texttest/../puun/gf/text.c"
  $83 = $i; //@line 139 "src/texttest/../puun/gf/text.c"
  $84 = (($83) + 1)|0; //@line 139 "src/texttest/../puun/gf/text.c"
  $i = $84; //@line 139 "src/texttest/../puun/gf/text.c"
  $85 = (($quad) + 16|0); //@line 141 "src/texttest/../puun/gf/text.c"
  $86 = +HEAPF32[$85>>2]; //@line 141 "src/texttest/../puun/gf/text.c"
  $87 = $i; //@line 141 "src/texttest/../puun/gf/text.c"
  $88 = $vertex; //@line 141 "src/texttest/../puun/gf/text.c"
  $89 = (($88) + ($87<<2)|0); //@line 141 "src/texttest/../puun/gf/text.c"
  HEAPF32[$89>>2] = $86; //@line 141 "src/texttest/../puun/gf/text.c"
  $90 = $i; //@line 141 "src/texttest/../puun/gf/text.c"
  $91 = (($90) + 1)|0; //@line 141 "src/texttest/../puun/gf/text.c"
  $i = $91; //@line 141 "src/texttest/../puun/gf/text.c"
  $92 = (($quad) + 20|0); //@line 142 "src/texttest/../puun/gf/text.c"
  $93 = +HEAPF32[$92>>2]; //@line 142 "src/texttest/../puun/gf/text.c"
  $94 = $i; //@line 142 "src/texttest/../puun/gf/text.c"
  $95 = $vertex; //@line 142 "src/texttest/../puun/gf/text.c"
  $96 = (($95) + ($94<<2)|0); //@line 142 "src/texttest/../puun/gf/text.c"
  HEAPF32[$96>>2] = $93; //@line 142 "src/texttest/../puun/gf/text.c"
  $97 = $i; //@line 142 "src/texttest/../puun/gf/text.c"
  $98 = (($97) + 1)|0; //@line 142 "src/texttest/../puun/gf/text.c"
  $i = $98; //@line 142 "src/texttest/../puun/gf/text.c"
  $99 = (($quad) + 24|0); //@line 143 "src/texttest/../puun/gf/text.c"
  $100 = +HEAPF32[$99>>2]; //@line 143 "src/texttest/../puun/gf/text.c"
  $101 = $i; //@line 143 "src/texttest/../puun/gf/text.c"
  $102 = $vertex; //@line 143 "src/texttest/../puun/gf/text.c"
  $103 = (($102) + ($101<<2)|0); //@line 143 "src/texttest/../puun/gf/text.c"
  HEAPF32[$103>>2] = $100; //@line 143 "src/texttest/../puun/gf/text.c"
  $104 = $i; //@line 143 "src/texttest/../puun/gf/text.c"
  $105 = (($104) + 1)|0; //@line 143 "src/texttest/../puun/gf/text.c"
  $i = $105; //@line 143 "src/texttest/../puun/gf/text.c"
  $106 = (($quad) + 12|0); //@line 144 "src/texttest/../puun/gf/text.c"
  $107 = +HEAPF32[$106>>2]; //@line 144 "src/texttest/../puun/gf/text.c"
  $108 = $i; //@line 144 "src/texttest/../puun/gf/text.c"
  $109 = $vertex; //@line 144 "src/texttest/../puun/gf/text.c"
  $110 = (($109) + ($108<<2)|0); //@line 144 "src/texttest/../puun/gf/text.c"
  HEAPF32[$110>>2] = $107; //@line 144 "src/texttest/../puun/gf/text.c"
  $111 = $i; //@line 144 "src/texttest/../puun/gf/text.c"
  $112 = (($111) + 1)|0; //@line 144 "src/texttest/../puun/gf/text.c"
  $i = $112; //@line 144 "src/texttest/../puun/gf/text.c"
  $113 = (($quad) + 16|0); //@line 146 "src/texttest/../puun/gf/text.c"
  $114 = +HEAPF32[$113>>2]; //@line 146 "src/texttest/../puun/gf/text.c"
  $115 = $i; //@line 146 "src/texttest/../puun/gf/text.c"
  $116 = $vertex; //@line 146 "src/texttest/../puun/gf/text.c"
  $117 = (($116) + ($115<<2)|0); //@line 146 "src/texttest/../puun/gf/text.c"
  HEAPF32[$117>>2] = $114; //@line 146 "src/texttest/../puun/gf/text.c"
  $118 = $i; //@line 146 "src/texttest/../puun/gf/text.c"
  $119 = (($118) + 1)|0; //@line 146 "src/texttest/../puun/gf/text.c"
  $i = $119; //@line 146 "src/texttest/../puun/gf/text.c"
  $120 = (($quad) + 20|0); //@line 147 "src/texttest/../puun/gf/text.c"
  $121 = +HEAPF32[$120>>2]; //@line 147 "src/texttest/../puun/gf/text.c"
  $122 = $i; //@line 147 "src/texttest/../puun/gf/text.c"
  $123 = $vertex; //@line 147 "src/texttest/../puun/gf/text.c"
  $124 = (($123) + ($122<<2)|0); //@line 147 "src/texttest/../puun/gf/text.c"
  HEAPF32[$124>>2] = $121; //@line 147 "src/texttest/../puun/gf/text.c"
  $125 = $i; //@line 147 "src/texttest/../puun/gf/text.c"
  $126 = (($125) + 1)|0; //@line 147 "src/texttest/../puun/gf/text.c"
  $i = $126; //@line 147 "src/texttest/../puun/gf/text.c"
  $127 = (($quad) + 24|0); //@line 148 "src/texttest/../puun/gf/text.c"
  $128 = +HEAPF32[$127>>2]; //@line 148 "src/texttest/../puun/gf/text.c"
  $129 = $i; //@line 148 "src/texttest/../puun/gf/text.c"
  $130 = $vertex; //@line 148 "src/texttest/../puun/gf/text.c"
  $131 = (($130) + ($129<<2)|0); //@line 148 "src/texttest/../puun/gf/text.c"
  HEAPF32[$131>>2] = $128; //@line 148 "src/texttest/../puun/gf/text.c"
  $132 = $i; //@line 148 "src/texttest/../puun/gf/text.c"
  $133 = (($132) + 1)|0; //@line 148 "src/texttest/../puun/gf/text.c"
  $i = $133; //@line 148 "src/texttest/../puun/gf/text.c"
  $134 = (($quad) + 12|0); //@line 149 "src/texttest/../puun/gf/text.c"
  $135 = +HEAPF32[$134>>2]; //@line 149 "src/texttest/../puun/gf/text.c"
  $136 = $i; //@line 149 "src/texttest/../puun/gf/text.c"
  $137 = $vertex; //@line 149 "src/texttest/../puun/gf/text.c"
  $138 = (($137) + ($136<<2)|0); //@line 149 "src/texttest/../puun/gf/text.c"
  HEAPF32[$138>>2] = $135; //@line 149 "src/texttest/../puun/gf/text.c"
  $139 = $i; //@line 149 "src/texttest/../puun/gf/text.c"
  $140 = (($139) + 1)|0; //@line 149 "src/texttest/../puun/gf/text.c"
  $i = $140; //@line 149 "src/texttest/../puun/gf/text.c"
  $141 = +HEAPF32[$quad>>2]; //@line 151 "src/texttest/../puun/gf/text.c"
  $142 = $i; //@line 151 "src/texttest/../puun/gf/text.c"
  $143 = $vertex; //@line 151 "src/texttest/../puun/gf/text.c"
  $144 = (($143) + ($142<<2)|0); //@line 151 "src/texttest/../puun/gf/text.c"
  HEAPF32[$144>>2] = $141; //@line 151 "src/texttest/../puun/gf/text.c"
  $145 = $i; //@line 151 "src/texttest/../puun/gf/text.c"
  $146 = (($145) + 1)|0; //@line 151 "src/texttest/../puun/gf/text.c"
  $i = $146; //@line 151 "src/texttest/../puun/gf/text.c"
  $147 = (($quad) + 20|0); //@line 152 "src/texttest/../puun/gf/text.c"
  $148 = +HEAPF32[$147>>2]; //@line 152 "src/texttest/../puun/gf/text.c"
  $149 = $i; //@line 152 "src/texttest/../puun/gf/text.c"
  $150 = $vertex; //@line 152 "src/texttest/../puun/gf/text.c"
  $151 = (($150) + ($149<<2)|0); //@line 152 "src/texttest/../puun/gf/text.c"
  HEAPF32[$151>>2] = $148; //@line 152 "src/texttest/../puun/gf/text.c"
  $152 = $i; //@line 152 "src/texttest/../puun/gf/text.c"
  $153 = (($152) + 1)|0; //@line 152 "src/texttest/../puun/gf/text.c"
  $i = $153; //@line 152 "src/texttest/../puun/gf/text.c"
  $154 = (($quad) + 8|0); //@line 153 "src/texttest/../puun/gf/text.c"
  $155 = +HEAPF32[$154>>2]; //@line 153 "src/texttest/../puun/gf/text.c"
  $156 = $i; //@line 153 "src/texttest/../puun/gf/text.c"
  $157 = $vertex; //@line 153 "src/texttest/../puun/gf/text.c"
  $158 = (($157) + ($156<<2)|0); //@line 153 "src/texttest/../puun/gf/text.c"
  HEAPF32[$158>>2] = $155; //@line 153 "src/texttest/../puun/gf/text.c"
  $159 = $i; //@line 153 "src/texttest/../puun/gf/text.c"
  $160 = (($159) + 1)|0; //@line 153 "src/texttest/../puun/gf/text.c"
  $i = $160; //@line 153 "src/texttest/../puun/gf/text.c"
  $161 = (($quad) + 12|0); //@line 154 "src/texttest/../puun/gf/text.c"
  $162 = +HEAPF32[$161>>2]; //@line 154 "src/texttest/../puun/gf/text.c"
  $163 = $i; //@line 154 "src/texttest/../puun/gf/text.c"
  $164 = $vertex; //@line 154 "src/texttest/../puun/gf/text.c"
  $165 = (($164) + ($163<<2)|0); //@line 154 "src/texttest/../puun/gf/text.c"
  HEAPF32[$165>>2] = $162; //@line 154 "src/texttest/../puun/gf/text.c"
  $166 = $i; //@line 154 "src/texttest/../puun/gf/text.c"
  $167 = (($166) + 1)|0; //@line 154 "src/texttest/../puun/gf/text.c"
  $i = $167; //@line 154 "src/texttest/../puun/gf/text.c"
  $168 = +HEAPF32[$quad>>2]; //@line 156 "src/texttest/../puun/gf/text.c"
  $169 = $i; //@line 156 "src/texttest/../puun/gf/text.c"
  $170 = $vertex; //@line 156 "src/texttest/../puun/gf/text.c"
  $171 = (($170) + ($169<<2)|0); //@line 156 "src/texttest/../puun/gf/text.c"
  HEAPF32[$171>>2] = $168; //@line 156 "src/texttest/../puun/gf/text.c"
  $172 = $i; //@line 156 "src/texttest/../puun/gf/text.c"
  $173 = (($172) + 1)|0; //@line 156 "src/texttest/../puun/gf/text.c"
  $i = $173; //@line 156 "src/texttest/../puun/gf/text.c"
  $174 = (($quad) + 4|0); //@line 157 "src/texttest/../puun/gf/text.c"
  $175 = +HEAPF32[$174>>2]; //@line 157 "src/texttest/../puun/gf/text.c"
  $176 = $i; //@line 157 "src/texttest/../puun/gf/text.c"
  $177 = $vertex; //@line 157 "src/texttest/../puun/gf/text.c"
  $178 = (($177) + ($176<<2)|0); //@line 157 "src/texttest/../puun/gf/text.c"
  HEAPF32[$178>>2] = $175; //@line 157 "src/texttest/../puun/gf/text.c"
  $179 = $i; //@line 157 "src/texttest/../puun/gf/text.c"
  $180 = (($179) + 1)|0; //@line 157 "src/texttest/../puun/gf/text.c"
  $i = $180; //@line 157 "src/texttest/../puun/gf/text.c"
  $181 = (($quad) + 8|0); //@line 158 "src/texttest/../puun/gf/text.c"
  $182 = +HEAPF32[$181>>2]; //@line 158 "src/texttest/../puun/gf/text.c"
  $183 = $i; //@line 158 "src/texttest/../puun/gf/text.c"
  $184 = $vertex; //@line 158 "src/texttest/../puun/gf/text.c"
  $185 = (($184) + ($183<<2)|0); //@line 158 "src/texttest/../puun/gf/text.c"
  HEAPF32[$185>>2] = $182; //@line 158 "src/texttest/../puun/gf/text.c"
  $186 = $i; //@line 158 "src/texttest/../puun/gf/text.c"
  $187 = (($186) + 1)|0; //@line 158 "src/texttest/../puun/gf/text.c"
  $i = $187; //@line 158 "src/texttest/../puun/gf/text.c"
  $188 = (($quad) + 28|0); //@line 159 "src/texttest/../puun/gf/text.c"
  $189 = +HEAPF32[$188>>2]; //@line 159 "src/texttest/../puun/gf/text.c"
  $190 = $i; //@line 159 "src/texttest/../puun/gf/text.c"
  $191 = $vertex; //@line 159 "src/texttest/../puun/gf/text.c"
  $192 = (($191) + ($190<<2)|0); //@line 159 "src/texttest/../puun/gf/text.c"
  HEAPF32[$192>>2] = $189; //@line 159 "src/texttest/../puun/gf/text.c"
  $193 = $i; //@line 159 "src/texttest/../puun/gf/text.c"
  $194 = (($193) + 1)|0; //@line 159 "src/texttest/../puun/gf/text.c"
  $i = $194; //@line 159 "src/texttest/../puun/gf/text.c"
  $195 = $ch; //@line 184 "src/texttest/../puun/gf/text.c"
  $196 = (($195) + 1)|0; //@line 184 "src/texttest/../puun/gf/text.c"
  $ch = $196; //@line 184 "src/texttest/../puun/gf/text.c"
 }
 $197 = (($fontData) + 16|0); //@line 187 "src/texttest/../puun/gf/text.c"
 $198 = HEAP32[$197>>2]|0; //@line 187 "src/texttest/../puun/gf/text.c"
 $199 = (_glGetAttribLocation(($198|0),(1632|0))|0); //@line 187 "src/texttest/../puun/gf/text.c"
 $pos = $199; //@line 187 "src/texttest/../puun/gf/text.c"
 $200 = (($fontData) + 16|0); //@line 188 "src/texttest/../puun/gf/text.c"
 $201 = HEAP32[$200>>2]|0; //@line 188 "src/texttest/../puun/gf/text.c"
 $202 = (_glGetAttribLocation(($201|0),(1648|0))|0); //@line 188 "src/texttest/../puun/gf/text.c"
 $uv = $202; //@line 188 "src/texttest/../puun/gf/text.c"
 $stride = 16; //@line 190 "src/texttest/../puun/gf/text.c"
 $203 = (($fontData) + 20|0); //@line 192 "src/texttest/../puun/gf/text.c"
 $204 = HEAP32[$203>>2]|0; //@line 192 "src/texttest/../puun/gf/text.c"
 _glBindBuffer(34962,($204|0)); //@line 192 "src/texttest/../puun/gf/text.c"
 $205 = $length; //@line 193 "src/texttest/../puun/gf/text.c"
 $206 = ($205*6)|0; //@line 193 "src/texttest/../puun/gf/text.c"
 $207 = $stride; //@line 193 "src/texttest/../puun/gf/text.c"
 $208 = $207&255; //@line 193 "src/texttest/../puun/gf/text.c"
 $209 = Math_imul($206, $208)|0; //@line 193 "src/texttest/../puun/gf/text.c"
 $210 = $vertex; //@line 193 "src/texttest/../puun/gf/text.c"
 _glBufferData(34962,($209|0),($210|0),35048); //@line 193 "src/texttest/../puun/gf/text.c"
 $211 = $pos; //@line 195 "src/texttest/../puun/gf/text.c"
 $212 = $stride; //@line 195 "src/texttest/../puun/gf/text.c"
 $213 = $212&255; //@line 195 "src/texttest/../puun/gf/text.c"
 _glVertexAttribPointer(($211|0),2,5126,0,($213|0),(0|0)); //@line 195 "src/texttest/../puun/gf/text.c"
 $214 = $pos; //@line 197 "src/texttest/../puun/gf/text.c"
 _glEnableVertexAttribArray(($214|0)); //@line 197 "src/texttest/../puun/gf/text.c"
 $215 = $uv; //@line 198 "src/texttest/../puun/gf/text.c"
 $216 = $stride; //@line 198 "src/texttest/../puun/gf/text.c"
 $217 = $216&255; //@line 198 "src/texttest/../puun/gf/text.c"
 _glVertexAttribPointer(($215|0),2,5126,0,($217|0),((8)|0)); //@line 198 "src/texttest/../puun/gf/text.c"
 $218 = $uv; //@line 200 "src/texttest/../puun/gf/text.c"
 _glEnableVertexAttribArray(($218|0)); //@line 200 "src/texttest/../puun/gf/text.c"
 $219 = $length; //@line 202 "src/texttest/../puun/gf/text.c"
 $220 = ($219*6)|0; //@line 202 "src/texttest/../puun/gf/text.c"
 _glDrawArrays(4,0,($220|0)); //@line 202 "src/texttest/../puun/gf/text.c"
 STACKTOP = sp;return; //@line 203 "src/texttest/../puun/gf/text.c"
}
function _init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $Image = 0, $ImageHeight = 0, $ImageWidth = 0, $Texts$byval_copy = 0, $bbox = 0, $buffer = 0, $font = 0, $fragmentSource = 0, $program = 0, $scale = 0.0;
 var $style = 0, $text$byval_copy = 0, $text$byval_copy6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vertexSource = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $Texts$byval_copy = sp + 200|0;
 $text$byval_copy6 = sp + 168|0;
 $text$byval_copy = sp + 136|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $vertexSource = sp + 624|0;
 $fragmentSource = sp + 224|0;
 $style = sp + 112|0;
 $bbox = sp + 96|0;
 $font = sp + 48|0;
 $0 = sp + 24|0;
 $1 = (_malloc(262144)|0); //@line 18 "src/texttest/tt.c"
 $Image = $1; //@line 18 "src/texttest/tt.c"
 HEAP8[8624>>0] = 1; //@line 20 "src/texttest/tt.c"
 _memcpy(($vertexSource|0),(8632|0),356)|0; //@line 22 "src/texttest/tt.c"
 _memcpy(($fragmentSource|0),(8992|0),400)|0; //@line 30 "src/texttest/tt.c"
 _initTextStyle($style,9392,35.0,0); //@line 40 "src/texttest/tt.c"
 ;HEAP32[$bbox+0>>2]=HEAP32[9416+0>>2]|0;HEAP32[$bbox+4>>2]=HEAP32[9416+4>>2]|0;HEAP32[$bbox+8>>2]=HEAP32[9416+8>>2]|0;HEAP32[$bbox+12>>2]=HEAP32[9416+12>>2]|0; //@line 41 "src/texttest/tt.c"
 ;HEAP32[9432+0>>2]=HEAP32[$bbox+0>>2]|0;HEAP32[9432+4>>2]=HEAP32[$bbox+4>>2]|0;HEAP32[9432+8>>2]=HEAP32[$bbox+8>>2]|0;HEAP32[9432+12>>2]=HEAP32[$bbox+12>>2]|0; //@line 43 "src/texttest/tt.c"
 HEAP32[((9432 + 16|0))>>2] = 9464; //@line 44 "src/texttest/tt.c"
 ;HEAP32[((9432 + 20|0))+0>>2]=HEAP32[$style+0>>2]|0;HEAP32[((9432 + 20|0))+4>>2]=HEAP32[$style+4>>2]|0;HEAP32[((9432 + 20|0))+8>>2]=HEAP32[$style+8>>2]|0; //@line 45 "src/texttest/tt.c"
 ;HEAP32[$text$byval_copy+0>>2]=HEAP32[9432+0>>2]|0;HEAP32[$text$byval_copy+4>>2]=HEAP32[9432+4>>2]|0;HEAP32[$text$byval_copy+8>>2]=HEAP32[9432+8>>2]|0;HEAP32[$text$byval_copy+12>>2]=HEAP32[9432+12>>2]|0;HEAP32[$text$byval_copy+16>>2]=HEAP32[9432+16>>2]|0;HEAP32[$text$byval_copy+20>>2]=HEAP32[9432+20>>2]|0;HEAP32[$text$byval_copy+24>>2]=HEAP32[9432+24>>2]|0;HEAP32[$text$byval_copy+28>>2]=HEAP32[9432+28>>2]|0; //@line 48 "src/texttest/tt.c"
 $2 = (_gfTextFit($text$byval_copy)|0); //@line 48 "src/texttest/tt.c"
 $3 = $2&1; //@line 48 "src/texttest/tt.c"
 HEAP32[$vararg_buffer>>2] = $3; //@line 48 "src/texttest/tt.c"
 (_printf((9496|0),($vararg_buffer|0))|0); //@line 48 "src/texttest/tt.c"
 _glClearColor(1.0,1.0,1.0,1.0); //@line 50 "src/texttest/tt.c"
 _glClear(16640); //@line 51 "src/texttest/tt.c"
 ;HEAP32[$text$byval_copy6+0>>2]=HEAP32[9432+0>>2]|0;HEAP32[$text$byval_copy6+4>>2]=HEAP32[9432+4>>2]|0;HEAP32[$text$byval_copy6+8>>2]=HEAP32[9432+8>>2]|0;HEAP32[$text$byval_copy6+12>>2]=HEAP32[9432+12>>2]|0;HEAP32[$text$byval_copy6+16>>2]=HEAP32[9432+16>>2]|0;HEAP32[$text$byval_copy6+20>>2]=HEAP32[9432+20>>2]|0;HEAP32[$text$byval_copy6+24>>2]=HEAP32[9432+24>>2]|0;HEAP32[$text$byval_copy6+28>>2]=HEAP32[9432+28>>2]|0; //@line 52 "src/texttest/tt.c"
 _gfTextRender($text$byval_copy6); //@line 52 "src/texttest/tt.c"
 $4 = (_malloc(1000000)|0); //@line 55 "src/texttest/tt.c"
 $buffer = $4; //@line 55 "src/texttest/tt.c"
 $5 = $buffer; //@line 56 "src/texttest/tt.c"
 $6 = (_fopen((9392|0),(8104|0))|0); //@line 56 "src/texttest/tt.c"
 (_fread(($5|0),1,1000000,($6|0))|0); //@line 56 "src/texttest/tt.c"
 $7 = $buffer; //@line 57 "src/texttest/tt.c"
 (_stbtt_InitFont($font,$7,0)|0); //@line 57 "src/texttest/tt.c"
 $ImageWidth = 512; //@line 58 "src/texttest/tt.c"
 $ImageHeight = 512; //@line 58 "src/texttest/tt.c"
 $8 = (+_stbtt_ScaleForPixelHeight($font,35.0)); //@line 59 "src/texttest/tt.c"
 $scale = $8; //@line 59 "src/texttest/tt.c"
 $9 = $Image; //@line 60 "src/texttest/tt.c"
 $10 = $ImageWidth; //@line 60 "src/texttest/tt.c"
 $11 = $ImageHeight; //@line 60 "src/texttest/tt.c"
 $12 = $ImageHeight; //@line 60 "src/texttest/tt.c"
 $13 = $scale; //@line 60 "src/texttest/tt.c"
 $14 = $scale; //@line 60 "src/texttest/tt.c"
 _stbtt_MakeCodepointBitmap($font,$9,$10,$11,$12,$13,$14,106); //@line 60 "src/texttest/tt.c"
 $15 = $ImageWidth; //@line 62 "src/texttest/tt.c"
 $16 = $ImageHeight; //@line 62 "src/texttest/tt.c"
 $17 = $Image; //@line 62 "src/texttest/tt.c"
 $18 = $ImageWidth; //@line 62 "src/texttest/tt.c"
 (_stbi_write_png(9512,$15,$16,1,$17,$18)|0); //@line 62 "src/texttest/tt.c"
 $19 = $scale; //@line 63 "src/texttest/tt.c"
 $20 = $19; //@line 63 "src/texttest/tt.c"
 $21 = $ImageWidth; //@line 63 "src/texttest/tt.c"
 $22 = $ImageHeight; //@line 63 "src/texttest/tt.c"
 HEAPF64[tempDoublePtr>>3]=$20;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2]; //@line 63 "src/texttest/tt.c"
 $vararg_ptr4 = (($vararg_buffer1) + 8|0); //@line 63 "src/texttest/tt.c"
 HEAP32[$vararg_ptr4>>2] = $21; //@line 63 "src/texttest/tt.c"
 $vararg_ptr5 = (($vararg_buffer1) + 12|0); //@line 63 "src/texttest/tt.c"
 HEAP32[$vararg_ptr5>>2] = $22; //@line 63 "src/texttest/tt.c"
 (_printf((9520|0),($vararg_buffer1|0))|0); //@line 63 "src/texttest/tt.c"
 $23 = (_setupProgram($vertexSource,356,$fragmentSource,400)|0); //@line 64 "src/texttest/tt.c"
 $24 = $23&255; //@line 64 "src/texttest/tt.c"
 $program = $24; //@line 64 "src/texttest/tt.c"
 _glGenTextures(1,(9536|0)); //@line 67 "src/texttest/tt.c"
 $25 = HEAP32[9536>>2]|0; //@line 69 "src/texttest/tt.c"
 _glBindTexture(3553,($25|0)); //@line 69 "src/texttest/tt.c"
 $26 = $ImageWidth; //@line 70 "src/texttest/tt.c"
 $27 = $ImageHeight; //@line 70 "src/texttest/tt.c"
 $28 = $Image; //@line 70 "src/texttest/tt.c"
 _glTexImage2D(3553,0,6406,($26|0),($27|0),0,6406,5121,($28|0)); //@line 70 "src/texttest/tt.c"
 _glGenerateMipmap(3553); //@line 75 "src/texttest/tt.c"
 $29 = $program; //@line 76 "src/texttest/tt.c"
 $30 = (_calloc(1,40)|0); //@line 76 "src/texttest/tt.c"
 _create_square_list($0,$29,$30); //@line 76 "src/texttest/tt.c"
 ;HEAP32[9544+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[9544+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[9544+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[9544+12>>2]=HEAP32[$0+12>>2]|0; //@line 76 "src/texttest/tt.c"
 $31 = $program; //@line 77 "src/texttest/tt.c"
 HEAP8[((9544 + 8|0))>>0] = $31; //@line 77 "src/texttest/tt.c"
 HEAP32[((9544 + 4|0))>>2] = 1; //@line 78 "src/texttest/tt.c"
 $32 = HEAP32[9544>>2]|0; //@line 79 "src/texttest/tt.c"
 HEAPF32[$32>>2] = 0.0; //@line 79 "src/texttest/tt.c"
 $33 = HEAP32[9544>>2]|0; //@line 79 "src/texttest/tt.c"
 $34 = (($33) + 4|0); //@line 79 "src/texttest/tt.c"
 HEAPF32[$34>>2] = 0.0; //@line 79 "src/texttest/tt.c"
 $35 = HEAP32[9544>>2]|0; //@line 79 "src/texttest/tt.c"
 $36 = (($35) + 8|0); //@line 79 "src/texttest/tt.c"
 HEAPF32[$36>>2] = 0.0; //@line 79 "src/texttest/tt.c"
 $37 = HEAP32[9544>>2]|0; //@line 80 "src/texttest/tt.c"
 $38 = (($37) + 16|0); //@line 80 "src/texttest/tt.c"
 HEAPF32[$38>>2] = 1.0; //@line 80 "src/texttest/tt.c"
 $39 = HEAP32[9544>>2]|0; //@line 81 "src/texttest/tt.c"
 $40 = (($39) + 20|0); //@line 81 "src/texttest/tt.c"
 HEAPF32[$40>>2] = 1.0; //@line 81 "src/texttest/tt.c"
 $41 = HEAP32[9544>>2]|0; //@line 82 "src/texttest/tt.c"
 $42 = (($41) + 24|0); //@line 82 "src/texttest/tt.c"
 HEAPF32[$42>>2] = 0.0; //@line 82 "src/texttest/tt.c"
 $43 = HEAP32[9544>>2]|0; //@line 82 "src/texttest/tt.c"
 $44 = (($43) + 32|0); //@line 82 "src/texttest/tt.c"
 HEAPF32[$44>>2] = 1.0; //@line 82 "src/texttest/tt.c"
 $45 = HEAP32[9544>>2]|0; //@line 83 "src/texttest/tt.c"
 $46 = (($45) + 28|0); //@line 83 "src/texttest/tt.c"
 HEAPF32[$46>>2] = 0.0; //@line 83 "src/texttest/tt.c"
 $47 = HEAP32[9544>>2]|0; //@line 83 "src/texttest/tt.c"
 $48 = (($47) + 36|0); //@line 83 "src/texttest/tt.c"
 HEAPF32[$48>>2] = 1.0; //@line 83 "src/texttest/tt.c"
 $49 = $buffer; //@line 85 "src/texttest/tt.c"
 ;HEAP32[$Texts$byval_copy+0>>2]=HEAP32[9544+0>>2]|0;HEAP32[$Texts$byval_copy+4>>2]=HEAP32[9544+4>>2]|0;HEAP32[$Texts$byval_copy+8>>2]=HEAP32[9544+8>>2]|0;HEAP32[$Texts$byval_copy+12>>2]=HEAP32[9544+12>>2]|0; //@line 85 "src/texttest/tt.c"
 _squareList_update_pos($Texts$byval_copy,$49); //@line 85 "src/texttest/tt.c"
 STACKTOP = sp;return; //@line 86 "src/texttest/tt.c"
}
function _update() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 90 "src/texttest/tt.c"
}
function _render() {
 var $text$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $text$byval_copy = sp;
 _glClearColor(1.0,1.0,1.0,1.0); //@line 97 "src/texttest/tt.c"
 _glClear(16640); //@line 98 "src/texttest/tt.c"
 ;HEAP32[$text$byval_copy+0>>2]=HEAP32[9432+0>>2]|0;HEAP32[$text$byval_copy+4>>2]=HEAP32[9432+4>>2]|0;HEAP32[$text$byval_copy+8>>2]=HEAP32[9432+8>>2]|0;HEAP32[$text$byval_copy+12>>2]=HEAP32[9432+12>>2]|0;HEAP32[$text$byval_copy+16>>2]=HEAP32[9432+16>>2]|0;HEAP32[$text$byval_copy+20>>2]=HEAP32[9432+20>>2]|0;HEAP32[$text$byval_copy+24>>2]=HEAP32[9432+24>>2]|0;HEAP32[$text$byval_copy+28>>2]=HEAP32[9432+28>>2]|0; //@line 100 "src/texttest/tt.c"
 _gfTextRender($text$byval_copy); //@line 100 "src/texttest/tt.c"
 _SDL_GL_SwapBuffers(); //@line 113 "src/texttest/tt.c"
 STACKTOP = sp;return; //@line 114 "src/texttest/tt.c"
}
function _die() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[8624>>0] = 0; //@line 117 "src/texttest/tt.c"
 return; //@line 118 "src/texttest/tt.c"
}
function _stbiw__sbgrowf($arr,$increment,$itemsize) {
 $arr = $arr|0;
 $increment = $increment|0;
 $itemsize = $itemsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $arr;
 $1 = $increment;
 $2 = $itemsize;
 $3 = $0; //@line 404 "src/texttest/../other/stb_image_write.h"
 $4 = HEAP32[$3>>2]|0; //@line 404 "src/texttest/../other/stb_image_write.h"
 $5 = ($4|0)!=(0|0); //@line 404 "src/texttest/../other/stb_image_write.h"
 if ($5) {
  $6 = $0; //@line 404 "src/texttest/../other/stb_image_write.h"
  $7 = HEAP32[$6>>2]|0; //@line 404 "src/texttest/../other/stb_image_write.h"
  $8 = (($7) + -8|0); //@line 404 "src/texttest/../other/stb_image_write.h"
  $9 = HEAP32[$8>>2]|0; //@line 404 "src/texttest/../other/stb_image_write.h"
  $10 = $9<<1; //@line 404 "src/texttest/../other/stb_image_write.h"
  $11 = $1; //@line 404 "src/texttest/../other/stb_image_write.h"
  $12 = (($10) + ($11))|0; //@line 404 "src/texttest/../other/stb_image_write.h"
  $15 = $12;
 } else {
  $13 = $1; //@line 404 "src/texttest/../other/stb_image_write.h"
  $14 = (($13) + 1)|0; //@line 404 "src/texttest/../other/stb_image_write.h"
  $15 = $14;
 }
 $m = $15; //@line 404 "src/texttest/../other/stb_image_write.h"
 $16 = $0; //@line 405 "src/texttest/../other/stb_image_write.h"
 $17 = HEAP32[$16>>2]|0; //@line 405 "src/texttest/../other/stb_image_write.h"
 $18 = ($17|0)!=(0|0); //@line 405 "src/texttest/../other/stb_image_write.h"
 if ($18) {
  $19 = $0; //@line 405 "src/texttest/../other/stb_image_write.h"
  $20 = HEAP32[$19>>2]|0; //@line 405 "src/texttest/../other/stb_image_write.h"
  $21 = (($20) + -8|0); //@line 405 "src/texttest/../other/stb_image_write.h"
  $26 = $21;
 } else {
  $26 = 0;
 }
 $22 = $2; //@line 405 "src/texttest/../other/stb_image_write.h"
 $23 = $m; //@line 405 "src/texttest/../other/stb_image_write.h"
 $24 = Math_imul($22, $23)|0; //@line 405 "src/texttest/../other/stb_image_write.h"
 $25 = (($24) + 8)|0; //@line 405 "src/texttest/../other/stb_image_write.h"
 $27 = (_realloc($26,$25)|0); //@line 405 "src/texttest/../other/stb_image_write.h"
 $p = $27; //@line 405 "src/texttest/../other/stb_image_write.h"
 $28 = $p; //@line 406 "src/texttest/../other/stb_image_write.h"
 $29 = ($28|0)!=(0|0); //@line 406 "src/texttest/../other/stb_image_write.h"
 if (!($29)) {
  ___assert_fail((9664|0),(48|0),406,(9672|0)); //@line 406 "src/texttest/../other/stb_image_write.h"
  // unreachable; //@line 406 "src/texttest/../other/stb_image_write.h"
 }
 $30 = $p; //@line 407 "src/texttest/../other/stb_image_write.h"
 $31 = ($30|0)!=(0|0); //@line 407 "src/texttest/../other/stb_image_write.h"
 if (!($31)) {
  $44 = $0; //@line 412 "src/texttest/../other/stb_image_write.h"
  $45 = HEAP32[$44>>2]|0; //@line 412 "src/texttest/../other/stb_image_write.h"
  STACKTOP = sp;return ($45|0); //@line 412 "src/texttest/../other/stb_image_write.h"
 }
 $32 = $0; //@line 408 "src/texttest/../other/stb_image_write.h"
 $33 = HEAP32[$32>>2]|0; //@line 408 "src/texttest/../other/stb_image_write.h"
 $34 = ($33|0)!=(0|0); //@line 408 "src/texttest/../other/stb_image_write.h"
 if (!($34)) {
  $35 = $p; //@line 408 "src/texttest/../other/stb_image_write.h"
  $36 = (($35) + 4|0); //@line 408 "src/texttest/../other/stb_image_write.h"
  HEAP32[$36>>2] = 0; //@line 408 "src/texttest/../other/stb_image_write.h"
 }
 $37 = $p; //@line 409 "src/texttest/../other/stb_image_write.h"
 $38 = (($37) + 8|0); //@line 409 "src/texttest/../other/stb_image_write.h"
 $39 = $0; //@line 409 "src/texttest/../other/stb_image_write.h"
 HEAP32[$39>>2] = $38; //@line 409 "src/texttest/../other/stb_image_write.h"
 $40 = $m; //@line 410 "src/texttest/../other/stb_image_write.h"
 $41 = $0; //@line 410 "src/texttest/../other/stb_image_write.h"
 $42 = HEAP32[$41>>2]|0; //@line 410 "src/texttest/../other/stb_image_write.h"
 $43 = (($42) + -8|0); //@line 410 "src/texttest/../other/stb_image_write.h"
 HEAP32[$43>>2] = $40; //@line 410 "src/texttest/../other/stb_image_write.h"
 $44 = $0; //@line 412 "src/texttest/../other/stb_image_write.h"
 $45 = HEAP32[$44>>2]|0; //@line 412 "src/texttest/../other/stb_image_write.h"
 STACKTOP = sp;return ($45|0); //@line 412 "src/texttest/../other/stb_image_write.h"
}
function _stbiw__zlib_flushf($data,$bitbuffer,$bitcount) {
 $data = $data|0;
 $bitbuffer = $bitbuffer|0;
 $bitcount = $bitcount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $data;
 $1 = $bitbuffer;
 $2 = $bitcount;
 while(1) {
  $3 = $2; //@line 417 "src/texttest/../other/stb_image_write.h"
  $4 = HEAP32[$3>>2]|0; //@line 417 "src/texttest/../other/stb_image_write.h"
  $5 = ($4|0)>=(8); //@line 417 "src/texttest/../other/stb_image_write.h"
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$0>>2]|0; //@line 418 "src/texttest/../other/stb_image_write.h"
  $7 = ($6|0)==(0|0); //@line 418 "src/texttest/../other/stb_image_write.h"
  if ($7) {
   label = 5;
  } else {
   $8 = HEAP32[$0>>2]|0; //@line 418 "src/texttest/../other/stb_image_write.h"
   $9 = (($8) + -8|0); //@line 418 "src/texttest/../other/stb_image_write.h"
   $10 = (($9) + 4|0); //@line 418 "src/texttest/../other/stb_image_write.h"
   $11 = HEAP32[$10>>2]|0; //@line 418 "src/texttest/../other/stb_image_write.h"
   $12 = (($11) + 1)|0; //@line 418 "src/texttest/../other/stb_image_write.h"
   $13 = HEAP32[$0>>2]|0; //@line 418 "src/texttest/../other/stb_image_write.h"
   $14 = (($13) + -8|0); //@line 418 "src/texttest/../other/stb_image_write.h"
   $15 = HEAP32[$14>>2]|0; //@line 418 "src/texttest/../other/stb_image_write.h"
   $16 = ($12|0)>=($15|0); //@line 418 "src/texttest/../other/stb_image_write.h"
   if ($16) {
    label = 5;
   } else {
   }
  }
  if ((label|0) == 5) {
   label = 0;
   (_stbiw__sbgrowf($0,1,1)|0); //@line 418 "src/texttest/../other/stb_image_write.h"
  }
  $17 = $1; //@line 418 "src/texttest/../other/stb_image_write.h"
  $18 = HEAP32[$17>>2]|0; //@line 418 "src/texttest/../other/stb_image_write.h"
  $19 = $18&255; //@line 418 "src/texttest/../other/stb_image_write.h"
  $20 = HEAP32[$0>>2]|0; //@line 418 "src/texttest/../other/stb_image_write.h"
  $21 = (($20) + -8|0); //@line 418 "src/texttest/../other/stb_image_write.h"
  $22 = (($21) + 4|0); //@line 418 "src/texttest/../other/stb_image_write.h"
  $23 = HEAP32[$22>>2]|0; //@line 418 "src/texttest/../other/stb_image_write.h"
  $24 = (($23) + 1)|0; //@line 418 "src/texttest/../other/stb_image_write.h"
  HEAP32[$22>>2] = $24; //@line 418 "src/texttest/../other/stb_image_write.h"
  $25 = HEAP32[$0>>2]|0; //@line 418 "src/texttest/../other/stb_image_write.h"
  $26 = (($25) + ($23)|0); //@line 418 "src/texttest/../other/stb_image_write.h"
  HEAP8[$26>>0] = $19; //@line 418 "src/texttest/../other/stb_image_write.h"
  $27 = $1; //@line 419 "src/texttest/../other/stb_image_write.h"
  $28 = HEAP32[$27>>2]|0; //@line 419 "src/texttest/../other/stb_image_write.h"
  $29 = $28 >>> 8; //@line 419 "src/texttest/../other/stb_image_write.h"
  HEAP32[$27>>2] = $29; //@line 419 "src/texttest/../other/stb_image_write.h"
  $30 = $2; //@line 420 "src/texttest/../other/stb_image_write.h"
  $31 = HEAP32[$30>>2]|0; //@line 420 "src/texttest/../other/stb_image_write.h"
  $32 = (($31) - 8)|0; //@line 420 "src/texttest/../other/stb_image_write.h"
  HEAP32[$30>>2] = $32; //@line 420 "src/texttest/../other/stb_image_write.h"
 }
 $33 = HEAP32[$0>>2]|0; //@line 422 "src/texttest/../other/stb_image_write.h"
 STACKTOP = sp;return ($33|0); //@line 422 "src/texttest/../other/stb_image_write.h"
}
function _stbiw__zhash($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0; //@line 445 "src/texttest/../other/stb_image_write.h"
 $2 = HEAP8[$1>>0]|0; //@line 445 "src/texttest/../other/stb_image_write.h"
 $3 = $2&255; //@line 445 "src/texttest/../other/stb_image_write.h"
 $4 = $0; //@line 445 "src/texttest/../other/stb_image_write.h"
 $5 = (($4) + 1|0); //@line 445 "src/texttest/../other/stb_image_write.h"
 $6 = HEAP8[$5>>0]|0; //@line 445 "src/texttest/../other/stb_image_write.h"
 $7 = $6&255; //@line 445 "src/texttest/../other/stb_image_write.h"
 $8 = $7 << 8; //@line 445 "src/texttest/../other/stb_image_write.h"
 $9 = (($3) + ($8))|0; //@line 445 "src/texttest/../other/stb_image_write.h"
 $10 = $0; //@line 445 "src/texttest/../other/stb_image_write.h"
 $11 = (($10) + 2|0); //@line 445 "src/texttest/../other/stb_image_write.h"
 $12 = HEAP8[$11>>0]|0; //@line 445 "src/texttest/../other/stb_image_write.h"
 $13 = $12&255; //@line 445 "src/texttest/../other/stb_image_write.h"
 $14 = $13 << 16; //@line 445 "src/texttest/../other/stb_image_write.h"
 $15 = (($9) + ($14))|0; //@line 445 "src/texttest/../other/stb_image_write.h"
 $hash = $15; //@line 445 "src/texttest/../other/stb_image_write.h"
 $16 = $hash; //@line 446 "src/texttest/../other/stb_image_write.h"
 $17 = $16 << 3; //@line 446 "src/texttest/../other/stb_image_write.h"
 $18 = $hash; //@line 446 "src/texttest/../other/stb_image_write.h"
 $19 = $18 ^ $17; //@line 446 "src/texttest/../other/stb_image_write.h"
 $hash = $19; //@line 446 "src/texttest/../other/stb_image_write.h"
 $20 = $hash; //@line 447 "src/texttest/../other/stb_image_write.h"
 $21 = $20 >>> 5; //@line 447 "src/texttest/../other/stb_image_write.h"
 $22 = $hash; //@line 447 "src/texttest/../other/stb_image_write.h"
 $23 = (($22) + ($21))|0; //@line 447 "src/texttest/../other/stb_image_write.h"
 $hash = $23; //@line 447 "src/texttest/../other/stb_image_write.h"
 $24 = $hash; //@line 448 "src/texttest/../other/stb_image_write.h"
 $25 = $24 << 4; //@line 448 "src/texttest/../other/stb_image_write.h"
 $26 = $hash; //@line 448 "src/texttest/../other/stb_image_write.h"
 $27 = $26 ^ $25; //@line 448 "src/texttest/../other/stb_image_write.h"
 $hash = $27; //@line 448 "src/texttest/../other/stb_image_write.h"
 $28 = $hash; //@line 449 "src/texttest/../other/stb_image_write.h"
 $29 = $28 >>> 17; //@line 449 "src/texttest/../other/stb_image_write.h"
 $30 = $hash; //@line 449 "src/texttest/../other/stb_image_write.h"
 $31 = (($30) + ($29))|0; //@line 449 "src/texttest/../other/stb_image_write.h"
 $hash = $31; //@line 449 "src/texttest/../other/stb_image_write.h"
 $32 = $hash; //@line 450 "src/texttest/../other/stb_image_write.h"
 $33 = $32 << 25; //@line 450 "src/texttest/../other/stb_image_write.h"
 $34 = $hash; //@line 450 "src/texttest/../other/stb_image_write.h"
 $35 = $34 ^ $33; //@line 450 "src/texttest/../other/stb_image_write.h"
 $hash = $35; //@line 450 "src/texttest/../other/stb_image_write.h"
 $36 = $hash; //@line 451 "src/texttest/../other/stb_image_write.h"
 $37 = $36 >>> 6; //@line 451 "src/texttest/../other/stb_image_write.h"
 $38 = $hash; //@line 451 "src/texttest/../other/stb_image_write.h"
 $39 = (($38) + ($37))|0; //@line 451 "src/texttest/../other/stb_image_write.h"
 $hash = $39; //@line 451 "src/texttest/../other/stb_image_write.h"
 $40 = $hash; //@line 452 "src/texttest/../other/stb_image_write.h"
 STACKTOP = sp;return ($40|0); //@line 452 "src/texttest/../other/stb_image_write.h"
}
function _stbiw__zlib_countm($a,$b,$limit) {
 $a = $a|0;
 $b = $b|0;
 $limit = $limit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $limit;
 $i = 0; //@line 438 "src/texttest/../other/stb_image_write.h"
 while(1) {
  $3 = $i; //@line 438 "src/texttest/../other/stb_image_write.h"
  $4 = $2; //@line 438 "src/texttest/../other/stb_image_write.h"
  $5 = ($3|0)<($4|0); //@line 438 "src/texttest/../other/stb_image_write.h"
  if ($5) {
   $6 = $i; //@line 438 "src/texttest/../other/stb_image_write.h"
   $7 = ($6|0)<(258); //@line 438 "src/texttest/../other/stb_image_write.h"
   $22 = $7;
  } else {
   $22 = 0;
  }
  if (!($22)) {
   label = 9;
   break;
  }
  $8 = $i; //@line 439 "src/texttest/../other/stb_image_write.h"
  $9 = $0; //@line 439 "src/texttest/../other/stb_image_write.h"
  $10 = (($9) + ($8)|0); //@line 439 "src/texttest/../other/stb_image_write.h"
  $11 = HEAP8[$10>>0]|0; //@line 439 "src/texttest/../other/stb_image_write.h"
  $12 = $11&255; //@line 439 "src/texttest/../other/stb_image_write.h"
  $13 = $i; //@line 439 "src/texttest/../other/stb_image_write.h"
  $14 = $1; //@line 439 "src/texttest/../other/stb_image_write.h"
  $15 = (($14) + ($13)|0); //@line 439 "src/texttest/../other/stb_image_write.h"
  $16 = HEAP8[$15>>0]|0; //@line 439 "src/texttest/../other/stb_image_write.h"
  $17 = $16&255; //@line 439 "src/texttest/../other/stb_image_write.h"
  $18 = ($12|0)!=($17|0); //@line 439 "src/texttest/../other/stb_image_write.h"
  if ($18) {
   break;
  }
  $19 = $i; //@line 438 "src/texttest/../other/stb_image_write.h"
  $20 = (($19) + 1)|0; //@line 438 "src/texttest/../other/stb_image_write.h"
  $i = $20; //@line 438 "src/texttest/../other/stb_image_write.h"
 }
 if ((label|0) == 9) {
  $21 = $i; //@line 440 "src/texttest/../other/stb_image_write.h"
  STACKTOP = sp;return ($21|0); //@line 440 "src/texttest/../other/stb_image_write.h"
 }
 $21 = $i; //@line 440 "src/texttest/../other/stb_image_write.h"
 STACKTOP = sp;return ($21|0); //@line 440 "src/texttest/../other/stb_image_write.h"
}
function _stbiw__zlib_bitrev($code,$codebits) {
 $code = $code|0;
 $codebits = $codebits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $code;
 $1 = $codebits;
 $res = 0; //@line 427 "src/texttest/../other/stb_image_write.h"
 while(1) {
  $2 = $1; //@line 428 "src/texttest/../other/stb_image_write.h"
  $3 = (($2) + -1)|0; //@line 428 "src/texttest/../other/stb_image_write.h"
  $1 = $3; //@line 428 "src/texttest/../other/stb_image_write.h"
  $4 = ($2|0)!=(0); //@line 428 "src/texttest/../other/stb_image_write.h"
  if (!($4)) {
   break;
  }
  $5 = $res; //@line 429 "src/texttest/../other/stb_image_write.h"
  $6 = $5 << 1; //@line 429 "src/texttest/../other/stb_image_write.h"
  $7 = $0; //@line 429 "src/texttest/../other/stb_image_write.h"
  $8 = $7 & 1; //@line 429 "src/texttest/../other/stb_image_write.h"
  $9 = $6 | $8; //@line 429 "src/texttest/../other/stb_image_write.h"
  $res = $9; //@line 429 "src/texttest/../other/stb_image_write.h"
  $10 = $0; //@line 430 "src/texttest/../other/stb_image_write.h"
  $11 = $10 >> 1; //@line 430 "src/texttest/../other/stb_image_write.h"
  $0 = $11; //@line 430 "src/texttest/../other/stb_image_write.h"
 }
 $12 = $res; //@line 432 "src/texttest/../other/stb_image_write.h"
 STACKTOP = sp;return ($12|0); //@line 432 "src/texttest/../other/stb_image_write.h"
}
function _stbiw__paeth($a,$b,$c) {
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $pa = 0, $pb = 0;
 var $pc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $1; //@line 598 "src/texttest/../other/stb_image_write.h"
 $5 = $2; //@line 598 "src/texttest/../other/stb_image_write.h"
 $6 = (($4) + ($5))|0; //@line 598 "src/texttest/../other/stb_image_write.h"
 $7 = $3; //@line 598 "src/texttest/../other/stb_image_write.h"
 $8 = (($6) - ($7))|0; //@line 598 "src/texttest/../other/stb_image_write.h"
 $p = $8; //@line 598 "src/texttest/../other/stb_image_write.h"
 $9 = $p; //@line 598 "src/texttest/../other/stb_image_write.h"
 $10 = $1; //@line 598 "src/texttest/../other/stb_image_write.h"
 $11 = (($9) - ($10))|0; //@line 598 "src/texttest/../other/stb_image_write.h"
 $12 = (Math_abs(($11|0))|0); //@line 598 "src/texttest/../other/stb_image_write.h"
 $pa = $12; //@line 598 "src/texttest/../other/stb_image_write.h"
 $13 = $p; //@line 598 "src/texttest/../other/stb_image_write.h"
 $14 = $2; //@line 598 "src/texttest/../other/stb_image_write.h"
 $15 = (($13) - ($14))|0; //@line 598 "src/texttest/../other/stb_image_write.h"
 $16 = (Math_abs(($15|0))|0); //@line 598 "src/texttest/../other/stb_image_write.h"
 $pb = $16; //@line 598 "src/texttest/../other/stb_image_write.h"
 $17 = $p; //@line 598 "src/texttest/../other/stb_image_write.h"
 $18 = $3; //@line 598 "src/texttest/../other/stb_image_write.h"
 $19 = (($17) - ($18))|0; //@line 598 "src/texttest/../other/stb_image_write.h"
 $20 = (Math_abs(($19|0))|0); //@line 598 "src/texttest/../other/stb_image_write.h"
 $pc = $20; //@line 598 "src/texttest/../other/stb_image_write.h"
 $21 = $pa; //@line 599 "src/texttest/../other/stb_image_write.h"
 $22 = $pb; //@line 599 "src/texttest/../other/stb_image_write.h"
 $23 = ($21|0)<=($22|0); //@line 599 "src/texttest/../other/stb_image_write.h"
 if ($23) {
  $24 = $pa; //@line 599 "src/texttest/../other/stb_image_write.h"
  $25 = $pc; //@line 599 "src/texttest/../other/stb_image_write.h"
  $26 = ($24|0)<=($25|0); //@line 599 "src/texttest/../other/stb_image_write.h"
  if ($26) {
   $27 = $1; //@line 599 "src/texttest/../other/stb_image_write.h"
   $28 = $27&255; //@line 599 "src/texttest/../other/stb_image_write.h"
   $0 = $28; //@line 599 "src/texttest/../other/stb_image_write.h"
   $36 = $0; //@line 602 "src/texttest/../other/stb_image_write.h"
   STACKTOP = sp;return ($36|0); //@line 602 "src/texttest/../other/stb_image_write.h"
  }
 }
 $29 = $pb; //@line 600 "src/texttest/../other/stb_image_write.h"
 $30 = $pc; //@line 600 "src/texttest/../other/stb_image_write.h"
 $31 = ($29|0)<=($30|0); //@line 600 "src/texttest/../other/stb_image_write.h"
 if ($31) {
  $32 = $2; //@line 600 "src/texttest/../other/stb_image_write.h"
  $33 = $32&255; //@line 600 "src/texttest/../other/stb_image_write.h"
  $0 = $33; //@line 600 "src/texttest/../other/stb_image_write.h"
  $36 = $0; //@line 602 "src/texttest/../other/stb_image_write.h"
  STACKTOP = sp;return ($36|0); //@line 602 "src/texttest/../other/stb_image_write.h"
 } else {
  $34 = $3; //@line 601 "src/texttest/../other/stb_image_write.h"
  $35 = $34&255; //@line 601 "src/texttest/../other/stb_image_write.h"
  $0 = $35; //@line 601 "src/texttest/../other/stb_image_write.h"
  $36 = $0; //@line 602 "src/texttest/../other/stb_image_write.h"
  STACKTOP = sp;return ($36|0); //@line 602 "src/texttest/../other/stb_image_write.h"
 }
 return (0)|0;
}
function _stbiw__wpcrc($data,$len) {
 $data = $data|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $crc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $len;
 $2 = $0; //@line 592 "src/texttest/../other/stb_image_write.h"
 $3 = HEAP32[$2>>2]|0; //@line 592 "src/texttest/../other/stb_image_write.h"
 $4 = $1; //@line 592 "src/texttest/../other/stb_image_write.h"
 $5 = (0 - ($4))|0; //@line 592 "src/texttest/../other/stb_image_write.h"
 $6 = (($3) + ($5)|0); //@line 592 "src/texttest/../other/stb_image_write.h"
 $7 = (($6) + -4|0); //@line 592 "src/texttest/../other/stb_image_write.h"
 $8 = $1; //@line 592 "src/texttest/../other/stb_image_write.h"
 $9 = (($8) + 4)|0; //@line 592 "src/texttest/../other/stb_image_write.h"
 $10 = (_stbiw__crc32($7,$9)|0); //@line 592 "src/texttest/../other/stb_image_write.h"
 $crc = $10; //@line 592 "src/texttest/../other/stb_image_write.h"
 $11 = $crc; //@line 593 "src/texttest/../other/stb_image_write.h"
 $12 = $11 >>> 24; //@line 593 "src/texttest/../other/stb_image_write.h"
 $13 = $12&255; //@line 593 "src/texttest/../other/stb_image_write.h"
 $14 = $0; //@line 593 "src/texttest/../other/stb_image_write.h"
 $15 = HEAP32[$14>>2]|0; //@line 593 "src/texttest/../other/stb_image_write.h"
 HEAP8[$15>>0] = $13; //@line 593 "src/texttest/../other/stb_image_write.h"
 $16 = $crc; //@line 593 "src/texttest/../other/stb_image_write.h"
 $17 = $16 >>> 16; //@line 593 "src/texttest/../other/stb_image_write.h"
 $18 = $17&255; //@line 593 "src/texttest/../other/stb_image_write.h"
 $19 = $0; //@line 593 "src/texttest/../other/stb_image_write.h"
 $20 = HEAP32[$19>>2]|0; //@line 593 "src/texttest/../other/stb_image_write.h"
 $21 = (($20) + 1|0); //@line 593 "src/texttest/../other/stb_image_write.h"
 HEAP8[$21>>0] = $18; //@line 593 "src/texttest/../other/stb_image_write.h"
 $22 = $crc; //@line 593 "src/texttest/../other/stb_image_write.h"
 $23 = $22 >>> 8; //@line 593 "src/texttest/../other/stb_image_write.h"
 $24 = $23&255; //@line 593 "src/texttest/../other/stb_image_write.h"
 $25 = $0; //@line 593 "src/texttest/../other/stb_image_write.h"
 $26 = HEAP32[$25>>2]|0; //@line 593 "src/texttest/../other/stb_image_write.h"
 $27 = (($26) + 2|0); //@line 593 "src/texttest/../other/stb_image_write.h"
 HEAP8[$27>>0] = $24; //@line 593 "src/texttest/../other/stb_image_write.h"
 $28 = $crc; //@line 593 "src/texttest/../other/stb_image_write.h"
 $29 = $28&255; //@line 593 "src/texttest/../other/stb_image_write.h"
 $30 = $0; //@line 593 "src/texttest/../other/stb_image_write.h"
 $31 = HEAP32[$30>>2]|0; //@line 593 "src/texttest/../other/stb_image_write.h"
 $32 = (($31) + 3|0); //@line 593 "src/texttest/../other/stb_image_write.h"
 HEAP8[$32>>0] = $29; //@line 593 "src/texttest/../other/stb_image_write.h"
 $33 = $0; //@line 593 "src/texttest/../other/stb_image_write.h"
 $34 = HEAP32[$33>>2]|0; //@line 593 "src/texttest/../other/stb_image_write.h"
 $35 = (($34) + 4|0); //@line 593 "src/texttest/../other/stb_image_write.h"
 HEAP32[$33>>2] = $35; //@line 593 "src/texttest/../other/stb_image_write.h"
 STACKTOP = sp;return; //@line 594 "src/texttest/../other/stb_image_write.h"
}
function _show_info_log($object,$glGet__iv,$glGet__InfoLog) {
 $object = $object|0;
 $glGet__iv = $glGet__iv|0;
 $glGet__InfoLog = $glGet__InfoLog|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $log = 0, $log_length = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $log_length = sp + 8|0;
 $0 = $object;
 $1 = $glGet__iv;
 $2 = $glGet__InfoLog;
 $3 = $1; //@line 38 "src/texttest/../puun/gf/gl_help.c"
 $4 = $0; //@line 38 "src/texttest/../puun/gf/gl_help.c"
 FUNCTION_TABLE_viii[$3 & 3]($4,35716,$log_length); //@line 38 "src/texttest/../puun/gf/gl_help.c"
 $5 = HEAP32[$log_length>>2]|0; //@line 39 "src/texttest/../puun/gf/gl_help.c"
 $6 = (_malloc($5)|0); //@line 39 "src/texttest/../puun/gf/gl_help.c"
 $log = $6; //@line 39 "src/texttest/../puun/gf/gl_help.c"
 $7 = $2; //@line 40 "src/texttest/../puun/gf/gl_help.c"
 $8 = $0; //@line 40 "src/texttest/../puun/gf/gl_help.c"
 $9 = HEAP32[$log_length>>2]|0; //@line 40 "src/texttest/../puun/gf/gl_help.c"
 $10 = $log; //@line 40 "src/texttest/../puun/gf/gl_help.c"
 FUNCTION_TABLE_viiii[$7 & 7]($8,$9,0,$10); //@line 40 "src/texttest/../puun/gf/gl_help.c"
 $11 = HEAP32[_stderr>>2]|0; //@line 41 "src/texttest/../puun/gf/gl_help.c"
 $12 = $log; //@line 41 "src/texttest/../puun/gf/gl_help.c"
 HEAP32[$vararg_buffer>>2] = $12; //@line 41 "src/texttest/../puun/gf/gl_help.c"
 (_fprintf(($11|0),(9648|0),($vararg_buffer|0))|0); //@line 41 "src/texttest/../puun/gf/gl_help.c"
 $13 = $log; //@line 42 "src/texttest/../puun/gf/gl_help.c"
 _free($13); //@line 42 "src/texttest/../puun/gf/gl_help.c"
 STACKTOP = sp;return; //@line 43 "src/texttest/../puun/gf/gl_help.c"
}
function _ttULONG($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $2 = HEAP8[$1>>0]|0; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $3 = $2&255; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $4 = $3 << 24; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $5 = $0; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $6 = (($5) + 1|0); //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = HEAP8[$6>>0]|0; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = $7&255; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = $8 << 16; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = (($4) + ($9))|0; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = $0; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = (($11) + 2|0); //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = HEAP8[$12>>0]|0; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = $13&255; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = $14 << 8; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $16 = (($10) + ($15))|0; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $17 = $0; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = (($17) + 3|0); //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $19 = HEAP8[$18>>0]|0; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $20 = $19&255; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $21 = (($16) + ($20))|0; //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return ($21|0); //@line 928 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt__find_table($data,$fontstart,$tag) {
 $data = $data|0;
 $fontstart = $fontstart|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $loc = 0, $num_tables = 0, $tabledir = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $fontstart;
 $3 = $tag;
 $4 = $1; //@line 949 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $5 = $2; //@line 949 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $6 = (($4) + ($5)|0); //@line 949 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = (($6) + 4|0); //@line 949 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = (_ttUSHORT($7)|0); //@line 949 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = $8&65535; //@line 949 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $num_tables = $9; //@line 949 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = $2; //@line 950 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = (($10) + 12)|0; //@line 950 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $tabledir = $11; //@line 950 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $i = 0; //@line 952 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 while(1) {
  $12 = $i; //@line 952 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $13 = $num_tables; //@line 952 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $14 = ($12|0)<($13|0); //@line 952 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if (!($14)) {
   label = 10;
   break;
  }
  $15 = $tabledir; //@line 953 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $16 = $i; //@line 953 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $17 = $16<<4; //@line 953 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $18 = (($15) + ($17))|0; //@line 953 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $loc = $18; //@line 953 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $19 = $1; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $20 = $loc; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $21 = (($19) + ($20)|0); //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $22 = HEAP8[$21>>0]|0; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $23 = $22&255; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $24 = $3; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $25 = HEAP8[$24>>0]|0; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $26 = $25 << 24 >> 24; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $27 = ($23|0)==($26|0); //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($27) {
   $28 = $1; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $29 = $loc; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $30 = (($28) + ($29)|0); //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $31 = (($30) + 1|0); //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $32 = HEAP8[$31>>0]|0; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $33 = $32&255; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $34 = $3; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $35 = (($34) + 1|0); //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $36 = HEAP8[$35>>0]|0; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $37 = $36 << 24 >> 24; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $38 = ($33|0)==($37|0); //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if ($38) {
    $39 = $1; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $40 = $loc; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $41 = (($39) + ($40)|0); //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $42 = (($41) + 2|0); //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $43 = HEAP8[$42>>0]|0; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $44 = $43&255; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $45 = $3; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $46 = (($45) + 2|0); //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $47 = HEAP8[$46>>0]|0; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $48 = $47 << 24 >> 24; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $49 = ($44|0)==($48|0); //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if ($49) {
     $50 = $1; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $51 = $loc; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $52 = (($50) + ($51)|0); //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $53 = (($52) + 3|0); //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $54 = HEAP8[$53>>0]|0; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $55 = $54&255; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $56 = $3; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $57 = (($56) + 3|0); //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $58 = HEAP8[$57>>0]|0; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $59 = $58 << 24 >> 24; //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $60 = ($55|0)==($59|0); //@line 954 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if ($60) {
      label = 7;
      break;
     }
    }
   }
  }
  $66 = $i; //@line 952 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $67 = (($66) + 1)|0; //@line 952 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $i = $67; //@line 952 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 if ((label|0) == 7) {
  $61 = $1; //@line 955 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $62 = $loc; //@line 955 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $63 = (($61) + ($62)|0); //@line 955 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $64 = (($63) + 8|0); //@line 955 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $65 = (_ttULONG($64)|0); //@line 955 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $0 = $65; //@line 955 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $68 = $0; //@line 958 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($68|0); //@line 958 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 else if ((label|0) == 10) {
  $0 = 0; //@line 957 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $68 = $0; //@line 958 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($68|0); //@line 958 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 return (0)|0;
}
function _ttUSHORT($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0; //@line 926 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $2 = HEAP8[$1>>0]|0; //@line 926 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $3 = $2&255; //@line 926 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $4 = $3<<8; //@line 926 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $5 = $0; //@line 926 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $6 = (($5) + 1|0); //@line 926 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = HEAP8[$6>>0]|0; //@line 926 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = $7&255; //@line 926 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = (($4) + ($8))|0; //@line 926 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = $9&65535; //@line 926 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return ($10|0); //@line 926 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _ttSHORT($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0; //@line 927 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $2 = HEAP8[$1>>0]|0; //@line 927 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $3 = $2&255; //@line 927 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $4 = $3<<8; //@line 927 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $5 = $0; //@line 927 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $6 = (($5) + 1|0); //@line 927 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = HEAP8[$6>>0]|0; //@line 927 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = $7&255; //@line 927 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = (($4) + ($8))|0; //@line 927 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = $9&65535; //@line 927 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return ($10|0); //@line 927 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt__GetGlyfOffset($info,$glyph_index) {
 $info = $info|0;
 $glyph_index = $glyph_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $g1 = 0, $g2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $info;
 $2 = $glyph_index;
 $3 = $2; //@line 1147 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $4 = $1; //@line 1147 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $5 = (($4) + 12|0); //@line 1147 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $6 = HEAP32[$5>>2]|0; //@line 1147 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = ($3|0)>=($6|0); //@line 1147 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($7) {
  $0 = -1; //@line 1147 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $87 = $0; //@line 1159 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($87|0); //@line 1159 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $8 = $1; //@line 1148 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = (($8) + 44|0); //@line 1148 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = HEAP32[$9>>2]|0; //@line 1148 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = ($10|0)>=(2); //@line 1148 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($11) {
  $0 = -1; //@line 1148 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $87 = $0; //@line 1159 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($87|0); //@line 1159 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $12 = $1; //@line 1150 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = (($12) + 44|0); //@line 1150 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = HEAP32[$13>>2]|0; //@line 1150 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = ($14|0)==(0); //@line 1150 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($15) {
  $16 = $1; //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $17 = (($16) + 24|0); //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $18 = HEAP32[$17>>2]|0; //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $19 = $1; //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $20 = (($19) + 4|0); //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $21 = HEAP32[$20>>2]|0; //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $22 = $1; //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $23 = (($22) + 16|0); //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $24 = HEAP32[$23>>2]|0; //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $25 = (($21) + ($24)|0); //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $26 = $2; //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $27 = $26<<1; //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $28 = (($25) + ($27)|0); //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $29 = (_ttUSHORT($28)|0); //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $30 = $29&65535; //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $31 = $30<<1; //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $32 = (($18) + ($31))|0; //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $g1 = $32; //@line 1151 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $33 = $1; //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $34 = (($33) + 24|0); //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $35 = HEAP32[$34>>2]|0; //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $36 = $1; //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $37 = (($36) + 4|0); //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $38 = HEAP32[$37>>2]|0; //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $39 = $1; //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $40 = (($39) + 16|0); //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $41 = HEAP32[$40>>2]|0; //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $42 = (($38) + ($41)|0); //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $43 = $2; //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $44 = $43<<1; //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $45 = (($42) + ($44)|0); //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $46 = (($45) + 2|0); //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $47 = (_ttUSHORT($46)|0); //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $48 = $47&65535; //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $49 = $48<<1; //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $50 = (($35) + ($49))|0; //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $g2 = $50; //@line 1152 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 } else {
  $51 = $1; //@line 1154 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $52 = (($51) + 24|0); //@line 1154 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $53 = HEAP32[$52>>2]|0; //@line 1154 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $54 = $1; //@line 1154 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $55 = (($54) + 4|0); //@line 1154 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $56 = HEAP32[$55>>2]|0; //@line 1154 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $57 = $1; //@line 1154 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $58 = (($57) + 16|0); //@line 1154 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $59 = HEAP32[$58>>2]|0; //@line 1154 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $60 = (($56) + ($59)|0); //@line 1154 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $61 = $2; //@line 1154 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $62 = $61<<2; //@line 1154 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $63 = (($60) + ($62)|0); //@line 1154 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $64 = (_ttULONG($63)|0); //@line 1154 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $65 = (($53) + ($64))|0; //@line 1154 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $g1 = $65; //@line 1154 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $66 = $1; //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $67 = (($66) + 24|0); //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $68 = HEAP32[$67>>2]|0; //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $69 = $1; //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $70 = (($69) + 4|0); //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $71 = HEAP32[$70>>2]|0; //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $72 = $1; //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $73 = (($72) + 16|0); //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $74 = HEAP32[$73>>2]|0; //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $75 = (($71) + ($74)|0); //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $76 = $2; //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $77 = $76<<2; //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $78 = (($75) + ($77)|0); //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $79 = (($78) + 4|0); //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $80 = (_ttULONG($79)|0); //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $81 = (($68) + ($80))|0; //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $g2 = $81; //@line 1155 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $82 = $g1; //@line 1158 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $83 = $g2; //@line 1158 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $84 = ($82|0)==($83|0); //@line 1158 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($84) {
  $86 = -1;
 } else {
  $85 = $g1; //@line 1158 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $86 = $85;
 }
 $0 = $86; //@line 1158 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $87 = $0; //@line 1159 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return ($87|0); //@line 1159 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt__close_shape($vertices,$num_vertices,$was_off,$start_off,$sx,$sy,$scx,$scy,$cx,$cy) {
 $vertices = $vertices|0;
 $num_vertices = $num_vertices|0;
 $was_off = $was_off|0;
 $start_off = $start_off|0;
 $sx = $sx|0;
 $sy = $sy|0;
 $scx = $scx|0;
 $scy = $scy|0;
 $cx = $cx|0;
 $cy = $cy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vertices;
 $1 = $num_vertices;
 $2 = $was_off;
 $3 = $start_off;
 $4 = $sx;
 $5 = $sy;
 $6 = $scx;
 $7 = $scy;
 $8 = $cx;
 $9 = $cy;
 $10 = $3; //@line 1190 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = ($10|0)!=(0); //@line 1190 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($11) {
  $12 = $2; //@line 1191 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $13 = ($12|0)!=(0); //@line 1191 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($13) {
   $14 = $1; //@line 1192 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $15 = (($14) + 1)|0; //@line 1192 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $1 = $15; //@line 1192 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $16 = $0; //@line 1192 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $17 = (($16) + (($14*10)|0)|0); //@line 1192 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $18 = $8; //@line 1192 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $19 = $6; //@line 1192 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $20 = (($18) + ($19))|0; //@line 1192 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $21 = $20 >> 1; //@line 1192 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $22 = $9; //@line 1192 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $23 = $7; //@line 1192 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $24 = (($22) + ($23))|0; //@line 1192 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $25 = $24 >> 1; //@line 1192 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $26 = $8; //@line 1192 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $27 = $9; //@line 1192 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   _stbtt_setvertex($17,3,$21,$25,$26,$27); //@line 1192 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $28 = $1; //@line 1193 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $29 = (($28) + 1)|0; //@line 1193 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $1 = $29; //@line 1193 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $30 = $0; //@line 1193 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $31 = (($30) + (($28*10)|0)|0); //@line 1193 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $32 = $4; //@line 1193 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $33 = $5; //@line 1193 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $34 = $6; //@line 1193 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $35 = $7; //@line 1193 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  _stbtt_setvertex($31,3,$32,$33,$34,$35); //@line 1193 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $52 = $1; //@line 1200 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($52|0); //@line 1200 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $36 = $2; //@line 1195 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $37 = ($36|0)!=(0); //@line 1195 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($37) {
  $38 = $1; //@line 1196 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $39 = (($38) + 1)|0; //@line 1196 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $1 = $39; //@line 1196 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $40 = $0; //@line 1196 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $41 = (($40) + (($38*10)|0)|0); //@line 1196 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $42 = $4; //@line 1196 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $43 = $5; //@line 1196 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $44 = $8; //@line 1196 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $45 = $9; //@line 1196 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  _stbtt_setvertex($41,3,$42,$43,$44,$45); //@line 1196 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 } else {
  $46 = $1; //@line 1198 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $47 = (($46) + 1)|0; //@line 1198 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $1 = $47; //@line 1198 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $48 = $0; //@line 1198 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $49 = (($48) + (($46*10)|0)|0); //@line 1198 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $50 = $4; //@line 1198 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $51 = $5; //@line 1198 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  _stbtt_setvertex($49,2,$50,$51,0,0); //@line 1198 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $52 = $1; //@line 1200 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return ($52|0); //@line 1200 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt_setvertex($v,$type,$x,$y,$cx,$cy) {
 $v = $v|0;
 $type = $type|0;
 $x = $x|0;
 $y = $y|0;
 $cx = $cx|0;
 $cy = $cy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $type;
 $2 = $x;
 $3 = $y;
 $4 = $cx;
 $5 = $cy;
 $6 = $1; //@line 1136 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = $0; //@line 1136 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = (($7) + 8|0); //@line 1136 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP8[$8>>0] = $6; //@line 1136 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = $2; //@line 1137 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = $9&65535; //@line 1137 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = $0; //@line 1137 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP16[$11>>1] = $10; //@line 1137 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = $3; //@line 1138 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = $12&65535; //@line 1138 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = $0; //@line 1138 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = (($14) + 2|0); //@line 1138 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP16[$15>>1] = $13; //@line 1138 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $16 = $4; //@line 1139 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $17 = $16&65535; //@line 1139 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = $0; //@line 1139 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $19 = (($18) + 4|0); //@line 1139 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP16[$19>>1] = $17; //@line 1139 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $20 = $5; //@line 1140 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $21 = $20&65535; //@line 1140 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $22 = $0; //@line 1140 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $23 = (($22) + 6|0); //@line 1140 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP16[$23>>1] = $21; //@line 1140 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return; //@line 1141 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt_FlattenCurves($vertices,$num_verts,$objspace_flatness,$contour_lengths,$num_contours,$userdata) {
 $vertices = $vertices|0;
 $num_verts = $num_verts|0;
 $objspace_flatness = +$objspace_flatness;
 $contour_lengths = $contour_lengths|0;
 $num_contours = $num_contours|0;
 $userdata = $userdata|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $i = 0, $n = 0, $num_points = 0, $objspace_flatness_squared = 0.0, $pass = 0, $points = 0;
 var $start = 0, $x = 0.0, $y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $num_points = sp + 28|0;
 $1 = $vertices;
 $2 = $num_verts;
 $3 = $objspace_flatness;
 $4 = $contour_lengths;
 $5 = $num_contours;
 $6 = $userdata;
 $points = 0; //@line 1831 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$num_points>>2] = 0; //@line 1832 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = $3; //@line 1834 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = $3; //@line 1834 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = $7 * $8; //@line 1834 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $objspace_flatness_squared = $9; //@line 1834 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $n = 0; //@line 1835 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $start = 0; //@line 1835 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $i = 0; //@line 1838 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 while(1) {
  $10 = $i; //@line 1838 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $11 = $2; //@line 1838 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $12 = ($10|0)<($11|0); //@line 1838 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if (!($12)) {
   break;
  }
  $13 = $i; //@line 1839 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $14 = $1; //@line 1839 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $15 = (($14) + (($13*10)|0)|0); //@line 1839 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $16 = (($15) + 8|0); //@line 1839 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $17 = HEAP8[$16>>0]|0; //@line 1839 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $18 = $17&255; //@line 1839 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $19 = ($18|0)==(1); //@line 1839 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($19) {
   $20 = $n; //@line 1840 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $21 = (($20) + 1)|0; //@line 1840 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $n = $21; //@line 1840 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $22 = $i; //@line 1838 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $23 = (($22) + 1)|0; //@line 1838 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $i = $23; //@line 1838 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $24 = $n; //@line 1842 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $25 = $5; //@line 1842 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$25>>2] = $24; //@line 1842 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $26 = $n; //@line 1843 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $27 = ($26|0)==(0); //@line 1843 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($27) {
  $0 = 0; //@line 1843 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $153 = $0; //@line 1896 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($153|0); //@line 1896 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $28 = $n; //@line 1845 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $29 = $28<<2; //@line 1845 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $30 = (_malloc($29)|0); //@line 1845 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $31 = $4; //@line 1845 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$31>>2] = $30; //@line 1845 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $32 = $4; //@line 1847 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $33 = HEAP32[$32>>2]|0; //@line 1847 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $34 = ($33|0)==(0|0); //@line 1847 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($34) {
  $35 = $5; //@line 1848 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAP32[$35>>2] = 0; //@line 1848 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $0 = 0; //@line 1849 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $153 = $0; //@line 1896 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($153|0); //@line 1896 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $pass = 0; //@line 1853 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 while(1) {
  $36 = $pass; //@line 1853 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $37 = ($36|0)<(2); //@line 1853 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if (!($37)) {
   label = 29;
   break;
  }
  $x = 0.0; //@line 1854 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $y = 0.0; //@line 1854 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $38 = $pass; //@line 1855 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $39 = ($38|0)==(1); //@line 1855 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($39) {
   $40 = HEAP32[$num_points>>2]|0; //@line 1856 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $41 = $40<<3; //@line 1856 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $42 = (_malloc($41)|0); //@line 1856 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $points = $42; //@line 1856 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $43 = $points; //@line 1857 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $44 = ($43|0)==(0|0); //@line 1857 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if ($44) {
    break;
   }
  }
  HEAP32[$num_points>>2] = 0; //@line 1859 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $n = -1; //@line 1860 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $i = 0; //@line 1861 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  while(1) {
   $45 = $i; //@line 1861 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $46 = $2; //@line 1861 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $47 = ($45|0)<($46|0); //@line 1861 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if (!($47)) {
    break;
   }
   $48 = $i; //@line 1862 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $49 = $1; //@line 1862 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $50 = (($49) + (($48*10)|0)|0); //@line 1862 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $51 = (($50) + 8|0); //@line 1862 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $52 = HEAP8[$51>>0]|0; //@line 1862 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $53 = $52&255; //@line 1862 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if ((($53|0) == 2)) {
    $82 = $i; //@line 1874 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $83 = $1; //@line 1874 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $84 = (($83) + (($82*10)|0)|0); //@line 1874 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $85 = HEAP16[$84>>1]|0; //@line 1874 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $86 = (+($85<<16>>16)); //@line 1874 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $x = $86; //@line 1874 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $87 = $i; //@line 1874 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $88 = $1; //@line 1874 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $89 = (($88) + (($87*10)|0)|0); //@line 1874 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $90 = (($89) + 2|0); //@line 1874 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $91 = HEAP16[$90>>1]|0; //@line 1874 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $92 = (+($91<<16>>16)); //@line 1874 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $y = $92; //@line 1874 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $93 = $points; //@line 1875 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $94 = HEAP32[$num_points>>2]|0; //@line 1875 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $95 = (($94) + 1)|0; //@line 1875 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    HEAP32[$num_points>>2] = $95; //@line 1875 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $96 = $x; //@line 1875 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $97 = $y; //@line 1875 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    _stbtt__add_point($93,$94,$96,$97); //@line 1875 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   } else if ((($53|0) == 1)) {
    $54 = $n; //@line 1865 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $55 = ($54|0)>=(0); //@line 1865 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if ($55) {
     $56 = HEAP32[$num_points>>2]|0; //@line 1866 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $57 = $start; //@line 1866 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $58 = (($56) - ($57))|0; //@line 1866 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $59 = $n; //@line 1866 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $60 = $4; //@line 1866 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $61 = HEAP32[$60>>2]|0; //@line 1866 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $62 = (($61) + ($59<<2)|0); //@line 1866 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     HEAP32[$62>>2] = $58; //@line 1866 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    }
    $63 = $n; //@line 1867 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $64 = (($63) + 1)|0; //@line 1867 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $n = $64; //@line 1867 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $65 = HEAP32[$num_points>>2]|0; //@line 1868 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $start = $65; //@line 1868 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $66 = $i; //@line 1870 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $67 = $1; //@line 1870 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $68 = (($67) + (($66*10)|0)|0); //@line 1870 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $69 = HEAP16[$68>>1]|0; //@line 1870 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $70 = (+($69<<16>>16)); //@line 1870 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $x = $70; //@line 1870 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $71 = $i; //@line 1870 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $72 = $1; //@line 1870 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $73 = (($72) + (($71*10)|0)|0); //@line 1870 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $74 = (($73) + 2|0); //@line 1870 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $75 = HEAP16[$74>>1]|0; //@line 1870 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $76 = (+($75<<16>>16)); //@line 1870 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $y = $76; //@line 1870 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $77 = $points; //@line 1871 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $78 = HEAP32[$num_points>>2]|0; //@line 1871 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $79 = (($78) + 1)|0; //@line 1871 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    HEAP32[$num_points>>2] = $79; //@line 1871 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $80 = $x; //@line 1871 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $81 = $y; //@line 1871 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    _stbtt__add_point($77,$78,$80,$81); //@line 1871 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   } else if ((($53|0) == 3)) {
    $98 = $points; //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $99 = $x; //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $100 = $y; //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $101 = $i; //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $102 = $1; //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $103 = (($102) + (($101*10)|0)|0); //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $104 = (($103) + 4|0); //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $105 = HEAP16[$104>>1]|0; //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $106 = (+($105<<16>>16)); //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $107 = $i; //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $108 = $1; //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $109 = (($108) + (($107*10)|0)|0); //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $110 = (($109) + 6|0); //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $111 = HEAP16[$110>>1]|0; //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $112 = (+($111<<16>>16)); //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $113 = $i; //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $114 = $1; //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $115 = (($114) + (($113*10)|0)|0); //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $116 = HEAP16[$115>>1]|0; //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $117 = (+($116<<16>>16)); //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $118 = $i; //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $119 = $1; //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $120 = (($119) + (($118*10)|0)|0); //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $121 = (($120) + 2|0); //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $122 = HEAP16[$121>>1]|0; //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $123 = (+($122<<16>>16)); //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $124 = $objspace_flatness_squared; //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    (_stbtt__tesselate_curve($98,$num_points,$99,$100,$106,$112,$117,$123,$124,0)|0); //@line 1878 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $125 = $i; //@line 1882 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $126 = $1; //@line 1882 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $127 = (($126) + (($125*10)|0)|0); //@line 1882 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $128 = HEAP16[$127>>1]|0; //@line 1882 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $129 = (+($128<<16>>16)); //@line 1882 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $x = $129; //@line 1882 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $130 = $i; //@line 1882 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $131 = $1; //@line 1882 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $132 = (($131) + (($130*10)|0)|0); //@line 1882 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $133 = (($132) + 2|0); //@line 1882 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $134 = HEAP16[$133>>1]|0; //@line 1882 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $135 = (+($134<<16>>16)); //@line 1882 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $y = $135; //@line 1882 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   }
   $136 = $i; //@line 1861 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $137 = (($136) + 1)|0; //@line 1861 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $i = $137; //@line 1861 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $138 = HEAP32[$num_points>>2]|0; //@line 1886 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $139 = $start; //@line 1886 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $140 = (($138) - ($139))|0; //@line 1886 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $141 = $n; //@line 1886 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $142 = $4; //@line 1886 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $143 = HEAP32[$142>>2]|0; //@line 1886 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $144 = (($143) + ($141<<2)|0); //@line 1886 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAP32[$144>>2] = $140; //@line 1886 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $145 = $pass; //@line 1853 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $146 = (($145) + 1)|0; //@line 1853 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $pass = $146; //@line 1853 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 if ((label|0) == 29) {
  $147 = $points; //@line 1889 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $0 = $147; //@line 1889 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $153 = $0; //@line 1896 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($153|0); //@line 1896 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $148 = $points; //@line 1891 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _free($148); //@line 1891 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $149 = $4; //@line 1892 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $150 = HEAP32[$149>>2]|0; //@line 1892 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _free($150); //@line 1892 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $151 = $4; //@line 1893 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$151>>2] = 0; //@line 1893 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $152 = $5; //@line 1894 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$152>>2] = 0; //@line 1894 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $0 = 0; //@line 1895 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $153 = $0; //@line 1896 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return ($153|0); //@line 1896 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt__rasterize($result,$pts,$wcount,$windings,$scale_x,$scale_y,$shift_x,$shift_y,$off_x,$off_y,$invert,$userdata) {
 $result = $result|0;
 $pts = $pts|0;
 $wcount = $wcount|0;
 $windings = $windings|0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $off_x = $off_x|0;
 $off_y = $off_y|0;
 $invert = $invert|0;
 $userdata = $userdata|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0;
 var $99 = 0, $a = 0, $b = 0, $e = 0, $i = 0, $j = 0, $k = 0, $m = 0, $n = 0, $p = 0, $vsubsample = 0, $y_scale_inv = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $result;
 $1 = $pts;
 $2 = $wcount;
 $3 = $windings;
 $4 = $scale_x;
 $5 = $scale_y;
 $6 = $shift_x;
 $7 = $shift_y;
 $8 = $off_x;
 $9 = $off_y;
 $10 = $invert;
 $11 = $userdata;
 $12 = $10; //@line 1752 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = ($12|0)!=(0); //@line 1752 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($13) {
  $14 = $5; //@line 1752 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $15 = -$14; //@line 1752 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $17 = $15;
 } else {
  $16 = $5; //@line 1752 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $17 = $16;
 }
 $y_scale_inv = $17; //@line 1752 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = $0; //@line 1755 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $19 = (($18) + 4|0); //@line 1755 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $20 = HEAP32[$19>>2]|0; //@line 1755 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $21 = ($20|0)<(8); //@line 1755 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $22 = $21 ? 15 : 5; //@line 1755 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $vsubsample = $22; //@line 1755 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $n = 0; //@line 1759 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $i = 0; //@line 1760 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 while(1) {
  $23 = $i; //@line 1760 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $24 = $3; //@line 1760 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $25 = ($23|0)<($24|0); //@line 1760 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if (!($25)) {
   break;
  }
  $26 = $i; //@line 1761 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $27 = $2; //@line 1761 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $28 = (($27) + ($26<<2)|0); //@line 1761 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $29 = HEAP32[$28>>2]|0; //@line 1761 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $30 = $n; //@line 1761 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $31 = (($30) + ($29))|0; //@line 1761 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $n = $31; //@line 1761 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $32 = $i; //@line 1760 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $33 = (($32) + 1)|0; //@line 1760 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $i = $33; //@line 1760 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $34 = $n; //@line 1763 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $35 = (($34) + 1)|0; //@line 1763 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $36 = ($35*20)|0; //@line 1763 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $37 = (_malloc($36)|0); //@line 1763 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $e = $37; //@line 1763 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $38 = $e; //@line 1764 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $39 = ($38|0)==(0|0); //@line 1764 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($39) {
  STACKTOP = sp;return; //@line 1798 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $n = 0; //@line 1765 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $m = 0; //@line 1767 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $i = 0; //@line 1768 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 while(1) {
  $40 = $i; //@line 1768 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $41 = $3; //@line 1768 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $42 = ($40|0)<($41|0); //@line 1768 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if (!($42)) {
   break;
  }
  $43 = $1; //@line 1769 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $44 = $m; //@line 1769 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $45 = (($43) + ($44<<3)|0); //@line 1769 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $p = $45; //@line 1769 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $46 = $i; //@line 1770 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $47 = $2; //@line 1770 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $48 = (($47) + ($46<<2)|0); //@line 1770 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $49 = HEAP32[$48>>2]|0; //@line 1770 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $50 = $m; //@line 1770 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $51 = (($50) + ($49))|0; //@line 1770 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $m = $51; //@line 1770 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $52 = $i; //@line 1771 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $53 = $2; //@line 1771 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $54 = (($53) + ($52<<2)|0); //@line 1771 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $55 = HEAP32[$54>>2]|0; //@line 1771 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $56 = (($55) - 1)|0; //@line 1771 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $j = $56; //@line 1771 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $k = 0; //@line 1772 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  while(1) {
   $57 = $k; //@line 1772 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $58 = $i; //@line 1772 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $59 = $2; //@line 1772 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $60 = (($59) + ($58<<2)|0); //@line 1772 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $61 = HEAP32[$60>>2]|0; //@line 1772 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $62 = ($57|0)<($61|0); //@line 1772 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if (!($62)) {
    break;
   }
   $63 = $k; //@line 1773 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $a = $63; //@line 1773 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $64 = $j; //@line 1773 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $b = $64; //@line 1773 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $65 = $j; //@line 1775 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $66 = $p; //@line 1775 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $67 = (($66) + ($65<<3)|0); //@line 1775 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $68 = (($67) + 4|0); //@line 1775 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $69 = +HEAPF32[$68>>2]; //@line 1775 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $70 = $k; //@line 1775 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $71 = $p; //@line 1775 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $72 = (($71) + ($70<<3)|0); //@line 1775 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $73 = (($72) + 4|0); //@line 1775 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $74 = +HEAPF32[$73>>2]; //@line 1775 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $75 = $69 == $74; //@line 1775 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if ($75) {
   } else {
    $76 = $n; //@line 1778 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $77 = $e; //@line 1778 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $78 = (($77) + (($76*20)|0)|0); //@line 1778 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $79 = (($78) + 16|0); //@line 1778 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    HEAP32[$79>>2] = 0; //@line 1778 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $80 = $10; //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $81 = ($80|0)!=(0); //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if ($81) {
     $82 = $j; //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $83 = $p; //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $84 = (($83) + ($82<<3)|0); //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $85 = (($84) + 4|0); //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $86 = +HEAPF32[$85>>2]; //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $87 = $k; //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $88 = $p; //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $89 = (($88) + ($87<<3)|0); //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $90 = (($89) + 4|0); //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $91 = +HEAPF32[$90>>2]; //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $92 = $86 > $91; //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if ($92) {
      label = 19;
     }
    } else {
     $93 = $j; //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $94 = $p; //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $95 = (($94) + ($93<<3)|0); //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $96 = (($95) + 4|0); //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $97 = +HEAPF32[$96>>2]; //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $98 = $k; //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $99 = $p; //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $100 = (($99) + ($98<<3)|0); //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $101 = (($100) + 4|0); //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $102 = +HEAPF32[$101>>2]; //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $103 = $97 < $102; //@line 1779 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if ($103) {
      label = 19;
     }
    }
    if ((label|0) == 19) {
     label = 0;
     $104 = $n; //@line 1780 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $105 = $e; //@line 1780 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $106 = (($105) + (($104*20)|0)|0); //@line 1780 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $107 = (($106) + 16|0); //@line 1780 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     HEAP32[$107>>2] = 1; //@line 1780 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $108 = $j; //@line 1781 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $a = $108; //@line 1781 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $109 = $k; //@line 1781 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $b = $109; //@line 1781 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    }
    $110 = $a; //@line 1783 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $111 = $p; //@line 1783 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $112 = (($111) + ($110<<3)|0); //@line 1783 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $113 = +HEAPF32[$112>>2]; //@line 1783 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $114 = $4; //@line 1783 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $115 = $113 * $114; //@line 1783 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $116 = $6; //@line 1783 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $117 = $115 + $116; //@line 1783 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $118 = $n; //@line 1783 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $119 = $e; //@line 1783 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $120 = (($119) + (($118*20)|0)|0); //@line 1783 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    HEAPF32[$120>>2] = $117; //@line 1783 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $121 = $a; //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $122 = $p; //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $123 = (($122) + ($121<<3)|0); //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $124 = (($123) + 4|0); //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $125 = +HEAPF32[$124>>2]; //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $126 = $y_scale_inv; //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $127 = $125 * $126; //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $128 = $7; //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $129 = $127 + $128; //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $130 = $vsubsample; //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $131 = (+($130|0)); //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $132 = $129 * $131; //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $133 = $n; //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $134 = $e; //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $135 = (($134) + (($133*20)|0)|0); //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $136 = (($135) + 4|0); //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    HEAPF32[$136>>2] = $132; //@line 1784 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $137 = $b; //@line 1785 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $138 = $p; //@line 1785 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $139 = (($138) + ($137<<3)|0); //@line 1785 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $140 = +HEAPF32[$139>>2]; //@line 1785 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $141 = $4; //@line 1785 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $142 = $140 * $141; //@line 1785 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $143 = $6; //@line 1785 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $144 = $142 + $143; //@line 1785 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $145 = $n; //@line 1785 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $146 = $e; //@line 1785 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $147 = (($146) + (($145*20)|0)|0); //@line 1785 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $148 = (($147) + 8|0); //@line 1785 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    HEAPF32[$148>>2] = $144; //@line 1785 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $149 = $b; //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $150 = $p; //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $151 = (($150) + ($149<<3)|0); //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $152 = (($151) + 4|0); //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $153 = +HEAPF32[$152>>2]; //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $154 = $y_scale_inv; //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $155 = $153 * $154; //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $156 = $7; //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $157 = $155 + $156; //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $158 = $vsubsample; //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $159 = (+($158|0)); //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $160 = $157 * $159; //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $161 = $n; //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $162 = $e; //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $163 = (($162) + (($161*20)|0)|0); //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $164 = (($163) + 12|0); //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    HEAPF32[$164>>2] = $160; //@line 1786 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $165 = $n; //@line 1787 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $166 = (($165) + 1)|0; //@line 1787 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $n = $166; //@line 1787 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   }
   $167 = $k; //@line 1772 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $168 = (($167) + 1)|0; //@line 1772 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $k = $168; //@line 1772 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $j = $167; //@line 1772 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $169 = $i; //@line 1768 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $170 = (($169) + 1)|0; //@line 1768 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $i = $170; //@line 1768 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $171 = $e; //@line 1792 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $172 = $n; //@line 1792 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _qsort($171,$172,20,5); //@line 1792 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $173 = $0; //@line 1795 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $174 = $e; //@line 1795 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $175 = $n; //@line 1795 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $176 = $vsubsample; //@line 1795 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $177 = $8; //@line 1795 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $178 = $9; //@line 1795 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $179 = $11; //@line 1795 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _stbtt__rasterize_sorted_edges($173,$174,$175,$176,$177,$178,$179); //@line 1795 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $180 = $e; //@line 1797 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _free($180); //@line 1797 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return; //@line 1798 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt__rasterize_sorted_edges($result,$e,$n,$vsubsample,$off_x,$off_y,$userdata) {
 $result = $result|0;
 $e = $e|0;
 $n = $n|0;
 $vsubsample = $vsubsample|0;
 $off_x = $off_x|0;
 $off_y = $off_y|0;
 $userdata = $userdata|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $active = 0, $changed = 0, $j = 0, $max_weight = 0, $p = 0, $q = 0, $s = 0, $scan_y = 0.0, $scanline = 0, $scanline_data = 0, $step = 0, $t = 0, $y = 0, $z = 0, $z1 = 0, $z2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $active = sp + 56|0;
 $scanline_data = sp + 88|0;
 $0 = $result;
 $1 = $e;
 $2 = $n;
 $3 = $vsubsample;
 $4 = $off_x;
 $5 = $off_y;
 $6 = $userdata;
 HEAP32[$active>>2] = 0; //@line 1636 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $j = 0; //@line 1637 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = $3; //@line 1638 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = (255 / ($7|0))&-1; //@line 1638 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $max_weight = $8; //@line 1638 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = $0; //@line 1642 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = HEAP32[$9>>2]|0; //@line 1642 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = ($10|0)>(512); //@line 1642 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($11) {
  $12 = $0; //@line 1643 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $13 = HEAP32[$12>>2]|0; //@line 1643 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $14 = (_malloc($13)|0); //@line 1643 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $scanline = $14; //@line 1643 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 } else {
  $scanline = $scanline_data; //@line 1645 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $15 = $5; //@line 1647 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $16 = $3; //@line 1647 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $17 = Math_imul($15, $16)|0; //@line 1647 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $y = $17; //@line 1647 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = $5; //@line 1648 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $19 = $0; //@line 1648 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $20 = (($19) + 4|0); //@line 1648 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $21 = HEAP32[$20>>2]|0; //@line 1648 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $22 = (($18) + ($21))|0; //@line 1648 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $23 = (+($22|0)); //@line 1648 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $24 = $3; //@line 1648 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $25 = (+($24|0)); //@line 1648 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $26 = $23 * $25; //@line 1648 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $27 = $26 + 1.0; //@line 1648 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $28 = $2; //@line 1648 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $29 = $1; //@line 1648 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $30 = (($29) + (($28*20)|0)|0); //@line 1648 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $31 = (($30) + 4|0); //@line 1648 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAPF32[$31>>2] = $27; //@line 1648 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 L5: while(1) {
  $32 = $j; //@line 1650 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $33 = $0; //@line 1650 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $34 = (($33) + 4|0); //@line 1650 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $35 = HEAP32[$34>>2]|0; //@line 1650 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $36 = ($32|0)<($35|0); //@line 1650 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if (!($36)) {
   break;
  }
  $37 = $scanline; //@line 1651 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $38 = $0; //@line 1651 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $39 = HEAP32[$38>>2]|0; //@line 1651 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  _memset(($37|0),0,($39|0))|0; //@line 1651 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $s = 0; //@line 1652 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  while(1) {
   $40 = $s; //@line 1652 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $41 = $3; //@line 1652 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $42 = ($40|0)<($41|0); //@line 1652 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if (!($42)) {
    break;
   }
   $43 = $y; //@line 1654 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $44 = (+($43|0)); //@line 1654 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $45 = $44 + 0.5; //@line 1654 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $scan_y = $45; //@line 1654 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $step = $active; //@line 1655 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   while(1) {
    $46 = $step; //@line 1659 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $47 = HEAP32[$46>>2]|0; //@line 1659 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $48 = ($47|0)!=(0|0); //@line 1659 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if (!($48)) {
     break;
    }
    $49 = $step; //@line 1660 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $50 = HEAP32[$49>>2]|0; //@line 1660 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $z = $50; //@line 1660 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $51 = $z; //@line 1661 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $52 = (($51) + 8|0); //@line 1661 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $53 = +HEAPF32[$52>>2]; //@line 1661 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $54 = $scan_y; //@line 1661 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $55 = $53 <= $54; //@line 1661 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if ($55) {
     $56 = $z; //@line 1662 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $57 = (($56) + 12|0); //@line 1662 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $58 = HEAP32[$57>>2]|0; //@line 1662 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $59 = $step; //@line 1662 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     HEAP32[$59>>2] = $58; //@line 1662 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $60 = $z; //@line 1663 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $61 = (($60) + 16|0); //@line 1663 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $62 = HEAP32[$61>>2]|0; //@line 1663 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $63 = ($62|0)!=(0); //@line 1663 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if (!($63)) {
      label = 12;
      break L5;
     }
     $64 = $z; //@line 1664 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $65 = (($64) + 16|0); //@line 1664 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     HEAP32[$65>>2] = 0; //@line 1664 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $66 = $z; //@line 1665 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     _free($66); //@line 1665 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    } else {
     $67 = $z; //@line 1667 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $68 = (($67) + 4|0); //@line 1667 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $69 = HEAP32[$68>>2]|0; //@line 1667 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $70 = $z; //@line 1667 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $71 = HEAP32[$70>>2]|0; //@line 1667 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $72 = (($71) + ($69))|0; //@line 1667 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     HEAP32[$70>>2] = $72; //@line 1667 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $73 = $step; //@line 1668 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $74 = HEAP32[$73>>2]|0; //@line 1668 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $75 = (($74) + 12|0); //@line 1668 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $step = $75; //@line 1668 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    }
   }
   while(1) {
    $changed = 0; //@line 1674 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $step = $active; //@line 1675 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    while(1) {
     $76 = $step; //@line 1676 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $77 = HEAP32[$76>>2]|0; //@line 1676 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $78 = ($77|0)!=(0|0); //@line 1676 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if ($78) {
      $79 = $step; //@line 1676 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $80 = HEAP32[$79>>2]|0; //@line 1676 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $81 = (($80) + 12|0); //@line 1676 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $82 = HEAP32[$81>>2]|0; //@line 1676 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $83 = ($82|0)!=(0|0); //@line 1676 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $200 = $83;
     } else {
      $200 = 0;
     }
     if (!($200)) {
      break;
     }
     $84 = $step; //@line 1677 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $85 = HEAP32[$84>>2]|0; //@line 1677 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $86 = HEAP32[$85>>2]|0; //@line 1677 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $87 = $step; //@line 1677 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $88 = HEAP32[$87>>2]|0; //@line 1677 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $89 = (($88) + 12|0); //@line 1677 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $90 = HEAP32[$89>>2]|0; //@line 1677 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $91 = HEAP32[$90>>2]|0; //@line 1677 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $92 = ($86|0)>($91|0); //@line 1677 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if ($92) {
      $93 = $step; //@line 1678 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $94 = HEAP32[$93>>2]|0; //@line 1678 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $t = $94; //@line 1678 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $95 = $t; //@line 1679 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $96 = (($95) + 12|0); //@line 1679 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $97 = HEAP32[$96>>2]|0; //@line 1679 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $q = $97; //@line 1679 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $98 = $q; //@line 1681 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $99 = (($98) + 12|0); //@line 1681 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $100 = HEAP32[$99>>2]|0; //@line 1681 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $101 = $t; //@line 1681 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $102 = (($101) + 12|0); //@line 1681 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      HEAP32[$102>>2] = $100; //@line 1681 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $103 = $t; //@line 1682 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $104 = $q; //@line 1682 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $105 = (($104) + 12|0); //@line 1682 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      HEAP32[$105>>2] = $103; //@line 1682 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $106 = $q; //@line 1683 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $107 = $step; //@line 1683 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      HEAP32[$107>>2] = $106; //@line 1683 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $changed = 1; //@line 1684 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     }
     $108 = $step; //@line 1686 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $109 = HEAP32[$108>>2]|0; //@line 1686 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $110 = (($109) + 12|0); //@line 1686 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $step = $110; //@line 1686 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    }
    $111 = $changed; //@line 1688 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $112 = ($111|0)!=(0); //@line 1688 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if (!($112)) {
     break;
    }
   }
   while(1) {
    $113 = $1; //@line 1692 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $114 = (($113) + 4|0); //@line 1692 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $115 = +HEAPF32[$114>>2]; //@line 1692 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $116 = $scan_y; //@line 1692 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $117 = $115 <= $116; //@line 1692 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if (!($117)) {
     break;
    }
    $118 = $1; //@line 1693 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $119 = (($118) + 12|0); //@line 1693 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $120 = +HEAPF32[$119>>2]; //@line 1693 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $121 = $scan_y; //@line 1693 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $122 = $120 > $121; //@line 1693 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if ($122) {
     $123 = $1; //@line 1694 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $124 = $4; //@line 1694 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $125 = $scan_y; //@line 1694 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $126 = $6; //@line 1694 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $127 = (_new_active($123,$124,$125,$126)|0); //@line 1694 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $z1 = $127; //@line 1694 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $128 = HEAP32[$active>>2]|0; //@line 1696 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $129 = ($128|0)==(0|0); //@line 1696 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if ($129) {
      $130 = $z1; //@line 1697 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      HEAP32[$active>>2] = $130; //@line 1697 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     } else {
      $131 = $z1; //@line 1698 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $132 = HEAP32[$131>>2]|0; //@line 1698 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $133 = HEAP32[$active>>2]|0; //@line 1698 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $134 = HEAP32[$133>>2]|0; //@line 1698 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $135 = ($132|0)<($134|0); //@line 1698 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      if ($135) {
       $136 = HEAP32[$active>>2]|0; //@line 1700 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $137 = $z1; //@line 1700 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $138 = (($137) + 12|0); //@line 1700 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       HEAP32[$138>>2] = $136; //@line 1700 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $139 = $z1; //@line 1701 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       HEAP32[$active>>2] = $139; //@line 1701 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      } else {
       $140 = HEAP32[$active>>2]|0; //@line 1704 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $p = $140; //@line 1704 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       while(1) {
        $141 = $p; //@line 1705 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $142 = (($141) + 12|0); //@line 1705 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $143 = HEAP32[$142>>2]|0; //@line 1705 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $144 = ($143|0)!=(0|0); //@line 1705 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        if ($144) {
         $145 = $p; //@line 1705 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $146 = (($145) + 12|0); //@line 1705 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $147 = HEAP32[$146>>2]|0; //@line 1705 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $148 = HEAP32[$147>>2]|0; //@line 1705 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $149 = $z1; //@line 1705 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $150 = HEAP32[$149>>2]|0; //@line 1705 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $151 = ($148|0)<($150|0); //@line 1705 "src/texttest/../puun/gf/../../other/stb_truetype.h"
         $201 = $151;
        } else {
         $201 = 0;
        }
        if (!($201)) {
         break;
        }
        $152 = $p; //@line 1706 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $153 = (($152) + 12|0); //@line 1706 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $154 = HEAP32[$153>>2]|0; //@line 1706 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $p = $154; //@line 1706 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       }
       $155 = $p; //@line 1708 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $156 = (($155) + 12|0); //@line 1708 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $157 = HEAP32[$156>>2]|0; //@line 1708 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $158 = $z1; //@line 1708 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $159 = (($158) + 12|0); //@line 1708 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       HEAP32[$159>>2] = $157; //@line 1708 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $160 = $z1; //@line 1709 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $161 = $p; //@line 1709 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $162 = (($161) + 12|0); //@line 1709 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       HEAP32[$162>>2] = $160; //@line 1709 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      }
     }
    }
    $163 = $1; //@line 1712 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $164 = (($163) + 20|0); //@line 1712 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $1 = $164; //@line 1712 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   }
   $165 = HEAP32[$active>>2]|0; //@line 1716 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $166 = ($165|0)!=(0|0); //@line 1716 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if ($166) {
    $167 = $scanline; //@line 1717 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $168 = $0; //@line 1717 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $169 = HEAP32[$168>>2]|0; //@line 1717 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $170 = HEAP32[$active>>2]|0; //@line 1717 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $171 = $max_weight; //@line 1717 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    _stbtt__fill_active_edges($167,$169,$170,$171); //@line 1717 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   }
   $172 = $y; //@line 1719 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $173 = (($172) + 1)|0; //@line 1719 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $y = $173; //@line 1719 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $174 = $s; //@line 1652 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $175 = (($174) + 1)|0; //@line 1652 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $s = $175; //@line 1652 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  }
  $176 = $0; //@line 1721 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $177 = (($176) + 12|0); //@line 1721 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $178 = HEAP32[$177>>2]|0; //@line 1721 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $179 = $j; //@line 1721 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $180 = $0; //@line 1721 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $181 = (($180) + 8|0); //@line 1721 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $182 = HEAP32[$181>>2]|0; //@line 1721 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $183 = Math_imul($179, $182)|0; //@line 1721 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $184 = (($178) + ($183)|0); //@line 1721 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $185 = $scanline; //@line 1721 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $186 = $0; //@line 1721 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $187 = HEAP32[$186>>2]|0; //@line 1721 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  _memcpy(($184|0),($185|0),($187|0))|0; //@line 1721 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $188 = $j; //@line 1722 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $189 = (($188) + 1)|0; //@line 1722 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $j = $189; //@line 1722 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 if ((label|0) == 12) {
  ___assert_fail((9560|0),(7864|0),1663,(9576|0)); //@line 1663 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  // unreachable; //@line 1663 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 while(1) {
  $190 = HEAP32[$active>>2]|0; //@line 1725 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $191 = ($190|0)!=(0|0); //@line 1725 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if (!($191)) {
   break;
  }
  $192 = HEAP32[$active>>2]|0; //@line 1726 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $z2 = $192; //@line 1726 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $193 = HEAP32[$active>>2]|0; //@line 1727 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $194 = (($193) + 12|0); //@line 1727 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $195 = HEAP32[$194>>2]|0; //@line 1727 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAP32[$active>>2] = $195; //@line 1727 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $196 = $z2; //@line 1728 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  _free($196); //@line 1728 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $197 = $scanline; //@line 1731 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $198 = ($197|0)!=($scanline_data|0); //@line 1731 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if (!($198)) {
  STACKTOP = sp;return; //@line 1733 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $199 = $scanline; //@line 1732 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 _free($199); //@line 1732 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return; //@line 1733 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt__fill_active_edges($scanline,$len,$e,$max_weight) {
 $scanline = $scanline|0;
 $len = $len|0;
 $e = $e|0;
 $max_weight = $max_weight|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0;
 var $w = 0, $x0 = 0, $x1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $scanline;
 $1 = $len;
 $2 = $e;
 $3 = $max_weight;
 $x0 = 0; //@line 1595 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $w = 0; //@line 1595 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 while(1) {
  $4 = $2; //@line 1597 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $5 = ($4|0)!=(0|0); //@line 1597 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if (!($5)) {
   break;
  }
  $6 = $w; //@line 1598 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $7 = ($6|0)==(0); //@line 1598 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  if ($7) {
   $8 = $2; //@line 1600 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $9 = HEAP32[$8>>2]|0; //@line 1600 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $x0 = $9; //@line 1600 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $10 = $2; //@line 1600 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $11 = (($10) + 16|0); //@line 1600 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $12 = HEAP32[$11>>2]|0; //@line 1600 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $13 = $w; //@line 1600 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $14 = (($13) + ($12))|0; //@line 1600 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $w = $14; //@line 1600 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  } else {
   $15 = $2; //@line 1602 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $16 = HEAP32[$15>>2]|0; //@line 1602 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $x1 = $16; //@line 1602 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $17 = $2; //@line 1602 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $18 = (($17) + 16|0); //@line 1602 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $19 = HEAP32[$18>>2]|0; //@line 1602 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $20 = $w; //@line 1602 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $21 = (($20) + ($19))|0; //@line 1602 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $w = $21; //@line 1602 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $22 = $w; //@line 1604 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   $23 = ($22|0)==(0); //@line 1604 "src/texttest/../puun/gf/../../other/stb_truetype.h"
   if ($23) {
    $24 = $x0; //@line 1605 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $25 = $24 >> 10; //@line 1605 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $i = $25; //@line 1605 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $26 = $x1; //@line 1606 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $27 = $26 >> 10; //@line 1606 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $j = $27; //@line 1606 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $28 = $i; //@line 1608 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $29 = $1; //@line 1608 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    $30 = ($28|0)<($29|0); //@line 1608 "src/texttest/../puun/gf/../../other/stb_truetype.h"
    if ($30) {
     $31 = $j; //@line 1608 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     $32 = ($31|0)>=(0); //@line 1608 "src/texttest/../puun/gf/../../other/stb_truetype.h"
     if ($32) {
      $33 = $i; //@line 1609 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $34 = $j; //@line 1609 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      $35 = ($33|0)==($34|0); //@line 1609 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      if ($35) {
       $36 = $i; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $37 = $0; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $38 = (($37) + ($36)|0); //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $39 = HEAP8[$38>>0]|0; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $40 = $39&255; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $41 = $x1; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $42 = $x0; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $43 = (($41) - ($42))|0; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $44 = $3; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $45 = Math_imul($43, $44)|0; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $46 = $45 >> 10; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $47 = $46&255; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $48 = $47&255; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $49 = (($40) + ($48))|0; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $50 = $49&255; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $51 = $i; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $52 = $0; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $53 = (($52) + ($51)|0); //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       HEAP8[$53>>0] = $50; //@line 1611 "src/texttest/../puun/gf/../../other/stb_truetype.h"
      } else {
       $54 = $i; //@line 1613 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $55 = ($54|0)>=(0); //@line 1613 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       if ($55) {
        $56 = $i; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $57 = $0; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $58 = (($57) + ($56)|0); //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $59 = HEAP8[$58>>0]|0; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $60 = $59&255; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $61 = $x0; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $62 = $61 & 1023; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $63 = (1024 - ($62))|0; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $64 = $3; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $65 = Math_imul($63, $64)|0; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $66 = $65 >> 10; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $67 = $66&255; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $68 = $67&255; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $69 = (($60) + ($68))|0; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $70 = $69&255; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $71 = $i; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $72 = $0; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $73 = (($72) + ($71)|0); //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        HEAP8[$73>>0] = $70; //@line 1614 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       } else {
        $i = -1; //@line 1616 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       }
       $74 = $j; //@line 1618 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $75 = $1; //@line 1618 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $76 = ($74|0)<($75|0); //@line 1618 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       if ($76) {
        $77 = $j; //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $78 = $0; //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $79 = (($78) + ($77)|0); //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $80 = HEAP8[$79>>0]|0; //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $81 = $80&255; //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $82 = $x1; //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $83 = $82 & 1023; //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $84 = $3; //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $85 = Math_imul($83, $84)|0; //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $86 = $85 >> 10; //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $87 = $86&255; //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $88 = $87&255; //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $89 = (($81) + ($88))|0; //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $90 = $89&255; //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $91 = $j; //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $92 = $0; //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $93 = (($92) + ($91)|0); //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        HEAP8[$93>>0] = $90; //@line 1619 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       } else {
        $94 = $1; //@line 1621 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $j = $94; //@line 1621 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       }
       $95 = $i; //@line 1623 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $96 = (($95) + 1)|0; //@line 1623 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       $i = $96; //@line 1623 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       while(1) {
        $97 = $i; //@line 1623 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $98 = $j; //@line 1623 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $99 = ($97|0)<($98|0); //@line 1623 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        if (!($99)) {
         break;
        }
        $100 = $i; //@line 1624 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $101 = $0; //@line 1624 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $102 = (($101) + ($100)|0); //@line 1624 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $103 = HEAP8[$102>>0]|0; //@line 1624 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $104 = $103&255; //@line 1624 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $105 = $3; //@line 1624 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $106 = $105&255; //@line 1624 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $107 = $106&255; //@line 1624 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $108 = (($104) + ($107))|0; //@line 1624 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $109 = $108&255; //@line 1624 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $110 = $i; //@line 1624 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $111 = $0; //@line 1624 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $112 = (($111) + ($110)|0); //@line 1624 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        HEAP8[$112>>0] = $109; //@line 1624 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $113 = $i; //@line 1623 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $114 = (($113) + 1)|0; //@line 1623 "src/texttest/../puun/gf/../../other/stb_truetype.h"
        $i = $114; //@line 1623 "src/texttest/../puun/gf/../../other/stb_truetype.h"
       }
      }
     }
    }
   }
  }
  $115 = $2; //@line 1630 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $116 = (($115) + 12|0); //@line 1630 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $117 = HEAP32[$116>>2]|0; //@line 1630 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $2 = $117; //@line 1630 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 STACKTOP = sp;return; //@line 1632 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _new_active($e,$off_x,$start_point,$userdata) {
 $e = $e|0;
 $off_x = $off_x|0;
 $start_point = +$start_point;
 $userdata = $userdata|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $9 = 0, $dxdy = 0.0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $e;
 $2 = $off_x;
 $3 = $start_point;
 $4 = $userdata;
 $5 = (_malloc(20)|0); //@line 1572 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $z = $5; //@line 1572 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $6 = $1; //@line 1573 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = (($6) + 8|0); //@line 1573 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = +HEAPF32[$7>>2]; //@line 1573 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = $1; //@line 1573 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = +HEAPF32[$9>>2]; //@line 1573 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = $8 - $10; //@line 1573 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = $1; //@line 1573 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = (($12) + 12|0); //@line 1573 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = +HEAPF32[$13>>2]; //@line 1573 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = $1; //@line 1573 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $16 = (($15) + 4|0); //@line 1573 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $17 = +HEAPF32[$16>>2]; //@line 1573 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = $14 - $17; //@line 1573 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $19 = $11 / $18; //@line 1573 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $dxdy = $19; //@line 1573 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $20 = $1; //@line 1574 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $21 = (($20) + 4|0); //@line 1574 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $22 = +HEAPF32[$21>>2]; //@line 1574 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $23 = $3; //@line 1574 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $24 = $22 <= $23; //@line 1574 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if (!($24)) {
  ___assert_fail((9608|0),(7864|0),1574,(9632|0)); //@line 1574 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  // unreachable; //@line 1574 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $25 = $z; //@line 1575 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $26 = ($25|0)!=(0|0); //@line 1575 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if (!($26)) {
  $27 = $z; //@line 1575 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $0 = $27; //@line 1575 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $81 = $0; //@line 1587 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($81|0); //@line 1587 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $28 = $dxdy; //@line 1577 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $29 = $28 < 0.0; //@line 1577 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($29) {
  $30 = $dxdy; //@line 1578 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $31 = -$30; //@line 1578 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $32 = 1024.0 * $31; //@line 1578 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $33 = $32; //@line 1578 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $34 = (+Math_floor((+$33))); //@line 1578 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $35 = (~~(($34))); //@line 1578 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $36 = (0 - ($35))|0; //@line 1578 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $37 = $z; //@line 1578 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $38 = (($37) + 4|0); //@line 1578 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAP32[$38>>2] = $36; //@line 1578 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 } else {
  $39 = $dxdy; //@line 1580 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $40 = 1024.0 * $39; //@line 1580 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $41 = $40; //@line 1580 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $42 = (+Math_floor((+$41))); //@line 1580 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $43 = (~~(($42))); //@line 1580 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $44 = $z; //@line 1580 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $45 = (($44) + 4|0); //@line 1580 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAP32[$45>>2] = $43; //@line 1580 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $46 = $1; //@line 1581 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $47 = +HEAPF32[$46>>2]; //@line 1581 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $48 = $dxdy; //@line 1581 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $49 = $3; //@line 1581 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $50 = $1; //@line 1581 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $51 = (($50) + 4|0); //@line 1581 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $52 = +HEAPF32[$51>>2]; //@line 1581 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $53 = $49 - $52; //@line 1581 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $54 = $48 * $53; //@line 1581 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $55 = $47 + $54; //@line 1581 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $56 = 1024.0 * $55; //@line 1581 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $57 = $56; //@line 1581 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $58 = (+Math_floor((+$57))); //@line 1581 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $59 = (~~(($58))); //@line 1581 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $60 = $z; //@line 1581 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$60>>2] = $59; //@line 1581 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $61 = $2; //@line 1582 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $62 = $61<<10; //@line 1582 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $63 = $z; //@line 1582 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $64 = HEAP32[$63>>2]|0; //@line 1582 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $65 = (($64) - ($62))|0; //@line 1582 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$63>>2] = $65; //@line 1582 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $66 = $1; //@line 1583 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $67 = (($66) + 12|0); //@line 1583 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $68 = +HEAPF32[$67>>2]; //@line 1583 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $69 = $z; //@line 1583 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $70 = (($69) + 8|0); //@line 1583 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAPF32[$70>>2] = $68; //@line 1583 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $71 = $z; //@line 1584 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $72 = (($71) + 12|0); //@line 1584 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$72>>2] = 0; //@line 1584 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $73 = $1; //@line 1585 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $74 = (($73) + 16|0); //@line 1585 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $75 = HEAP32[$74>>2]|0; //@line 1585 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $76 = ($75|0)!=(0); //@line 1585 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $77 = $76 ? 1 : -1; //@line 1585 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $78 = $z; //@line 1585 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $79 = (($78) + 16|0); //@line 1585 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 HEAP32[$79>>2] = $77; //@line 1585 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $80 = $z; //@line 1586 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $0 = $80; //@line 1586 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $81 = $0; //@line 1587 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return ($81|0); //@line 1587 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt__edge_compare($p,$q) {
 $p = $p|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0;
 var $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $q;
 $3 = $1; //@line 1737 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $a = $3; //@line 1737 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $4 = $2; //@line 1738 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $b = $4; //@line 1738 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $5 = $a; //@line 1740 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $6 = (($5) + 4|0); //@line 1740 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $7 = +HEAPF32[$6>>2]; //@line 1740 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $8 = $b; //@line 1740 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $9 = (($8) + 4|0); //@line 1740 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $10 = +HEAPF32[$9>>2]; //@line 1740 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $11 = $7 < $10; //@line 1740 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($11) {
  $0 = -1; //@line 1740 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $19 = $0; //@line 1743 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($19|0); //@line 1743 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $12 = $a; //@line 1741 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = (($12) + 4|0); //@line 1741 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = +HEAPF32[$13>>2]; //@line 1741 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = $b; //@line 1741 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $16 = (($15) + 4|0); //@line 1741 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $17 = +HEAPF32[$16>>2]; //@line 1741 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = $14 > $17; //@line 1741 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($18) {
  $0 = 1; //@line 1741 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $19 = $0; //@line 1743 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($19|0); //@line 1743 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 } else {
  $0 = 0; //@line 1742 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $19 = $0; //@line 1743 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($19|0); //@line 1743 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 return (0)|0;
}
function _stbtt__tesselate_curve($points,$num_points,$x0,$y0,$x1,$y1,$x2,$y2,$objspace_flatness_squared,$n) {
 $points = $points|0;
 $num_points = $num_points|0;
 $x0 = +$x0;
 $y0 = +$y0;
 $x1 = +$x1;
 $y1 = +$y1;
 $x2 = +$x2;
 $y2 = +$y2;
 $objspace_flatness_squared = +$objspace_flatness_squared;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $dx = 0.0, $dy = 0.0, $mx = 0.0, $my = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $points;
 $2 = $num_points;
 $3 = $x0;
 $4 = $y0;
 $5 = $x1;
 $6 = $y1;
 $7 = $x2;
 $8 = $y2;
 $9 = $objspace_flatness_squared;
 $10 = $n;
 $11 = $3; //@line 1811 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $12 = $5; //@line 1811 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $13 = 2.0 * $12; //@line 1811 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $14 = $11 + $13; //@line 1811 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $15 = $7; //@line 1811 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $16 = $14 + $15; //@line 1811 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $17 = $16 / 4.0; //@line 1811 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $mx = $17; //@line 1811 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $18 = $4; //@line 1812 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $19 = $6; //@line 1812 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $20 = 2.0 * $19; //@line 1812 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $21 = $18 + $20; //@line 1812 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $22 = $8; //@line 1812 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $23 = $21 + $22; //@line 1812 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $24 = $23 / 4.0; //@line 1812 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $my = $24; //@line 1812 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $25 = $3; //@line 1814 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $26 = $7; //@line 1814 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $27 = $25 + $26; //@line 1814 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $28 = $27 / 2.0; //@line 1814 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $29 = $mx; //@line 1814 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $30 = $28 - $29; //@line 1814 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $dx = $30; //@line 1814 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $31 = $4; //@line 1815 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $32 = $8; //@line 1815 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $33 = $31 + $32; //@line 1815 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $34 = $33 / 2.0; //@line 1815 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $35 = $my; //@line 1815 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $36 = $34 - $35; //@line 1815 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $dy = $36; //@line 1815 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $37 = $10; //@line 1816 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $38 = ($37|0)>(16); //@line 1816 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($38) {
  $0 = 1; //@line 1817 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $91 = $0; //@line 1826 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return ($91|0); //@line 1826 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $39 = $dx; //@line 1818 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $40 = $dx; //@line 1818 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $41 = $39 * $40; //@line 1818 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $42 = $dy; //@line 1818 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $43 = $dy; //@line 1818 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $44 = $42 * $43; //@line 1818 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $45 = $41 + $44; //@line 1818 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $46 = $9; //@line 1818 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $47 = $45 > $46; //@line 1818 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($47) {
  $48 = $1; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $49 = $2; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $50 = $3; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $51 = $4; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $52 = $3; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $53 = $5; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $54 = $52 + $53; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $55 = $54 / 2.0; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $56 = $4; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $57 = $6; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $58 = $56 + $57; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $59 = $58 / 2.0; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $60 = $mx; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $61 = $my; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $62 = $9; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $63 = $10; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $64 = (($63) + 1)|0; //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  (_stbtt__tesselate_curve($48,$49,$50,$51,$55,$59,$60,$61,$62,$64)|0); //@line 1819 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $65 = $1; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $66 = $2; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $67 = $mx; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $68 = $my; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $69 = $5; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $70 = $7; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $71 = $69 + $70; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $72 = $71 / 2.0; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $73 = $6; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $74 = $8; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $75 = $73 + $74; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $76 = $75 / 2.0; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $77 = $7; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $78 = $8; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $79 = $9; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $80 = $10; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $81 = (($80) + 1)|0; //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  (_stbtt__tesselate_curve($65,$66,$67,$68,$72,$76,$77,$78,$79,$81)|0); //@line 1820 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 } else {
  $82 = $1; //@line 1822 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $83 = $2; //@line 1822 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $84 = HEAP32[$83>>2]|0; //@line 1822 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $85 = $7; //@line 1822 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $86 = $8; //@line 1822 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  _stbtt__add_point($82,$84,$85,$86); //@line 1822 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $87 = $2; //@line 1823 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $88 = HEAP32[$87>>2]|0; //@line 1823 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $89 = (($88) + 1)|0; //@line 1823 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $90 = $2; //@line 1823 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAP32[$90>>2] = $89; //@line 1823 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
 $0 = 1; //@line 1825 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $91 = $0; //@line 1826 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 STACKTOP = sp;return ($91|0); //@line 1826 "src/texttest/../puun/gf/../../other/stb_truetype.h"
}
function _stbtt__add_point($points,$n,$x,$y) {
 $points = $points|0;
 $n = $n|0;
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $points;
 $1 = $n;
 $2 = $x;
 $3 = $y;
 $4 = $0; //@line 1802 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 $5 = ($4|0)!=(0|0); //@line 1802 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 if ($5) {
  $6 = $2; //@line 1803 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $7 = $1; //@line 1803 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $8 = $0; //@line 1803 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $9 = (($8) + ($7<<3)|0); //@line 1803 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAPF32[$9>>2] = $6; //@line 1803 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $10 = $3; //@line 1804 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $11 = $1; //@line 1804 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $12 = $0; //@line 1804 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $13 = (($12) + ($11<<3)|0); //@line 1804 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  $14 = (($13) + 4|0); //@line 1804 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  HEAPF32[$14>>2] = $10; //@line 1804 "src/texttest/../puun/gf/../../other/stb_truetype.h"
  STACKTOP = sp;return; //@line 1805 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 } else {
  STACKTOP = sp;return; //@line 1805 "src/texttest/../puun/gf/../../other/stb_truetype.h"
 }
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$0$be$i = 0, $$0$be$i21 = 0, $$0$i49 = 0, $$01$be$i = 0, $$01$be$i20 = 0, $$012$i = 0, $$012$i17 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$us$i = 0, $$02$us$i34 = 0, $$03$i = 0, $$03$i16 = 0, $$68 = 0, $$69 = 0, $$be = 0, $$be94 = 0, $$lcssa = 0, $$lcssa72 = 0;
 var $$lcssa73 = 0, $$lcssa95 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$pre = 0, $$pre$i = 0, $$pre$i10 = 0, $$pre$i23 = 0, $$pre$i30 = 0, $$sum = 0, $$sum$i = 0, $$sum$i19 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i33 = 0, $head$0$lcssa = 0, $head$078 = 0, $head$176 = 0, $head$176$be = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i25 = 0, $i$01$us$i = 0, $i$01$us$i32 = 0, $i$04$i = 0, $i$04$i15 = 0;
 var $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond70 = 0, $or$cond7075 = 0, $or$cond74 = 0, $pshift$0$lcssa = 0, $pshift$079 = 0, $pshift$1 = 0, $pshift$1$lcssa = 0, $pshift$277 = 0, $pshift$277$be = 0, $sum = 0, $sum$i = 0, $sum$i18 = 0, $tmp$i = 0, $tmp$i28 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i28 = sp + 680|0;
 $tmp$i = sp + 424|0;
 $ar$i = sp + 192|0;
 $lp = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) - ($width))|0;
 $2 = (($lp) + 4|0);
 HEAP32[$2>>2] = $width;
 HEAP32[$lp>>2] = $width;
 $4 = $width;$6 = $width;$i$0 = 2;
 while(1) {
  $3 = (($4) + ($width))|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (0 - ($width))|0;
 $11 = (($base) + ($$sum)|0);
 $12 = ($$sum|0)>(0);
 if ($12) {
  $13 = ($width|0)==(0);
  $14 = $11;
  $16 = 1;$52 = 0;$head$078 = $base;$pshift$079 = 1;
  while(1) {
   $15 = $16 & 3;
   $17 = ($15|0)==(3);
   do {
    if ($17) {
     HEAP32[$ar$i>>2] = $head$078;
     $18 = ($pshift$079|0)>(1);
     if ($18) {
      $$012$i = $pshift$079;$$03$i = $head$078;$24 = $head$078;$i$04$i = 1;
      while(1) {
       $19 = (($$03$i) + ($10)|0);
       $20 = (($$012$i) + -2)|0;
       $21 = (($lp) + ($20<<2)|0);
       $22 = HEAP32[$21>>2]|0;
       $sum$i = (($22) + ($width))|0;
       $$sum$i = (0 - ($sum$i))|0;
       $23 = (($$03$i) + ($$sum$i)|0);
       $25 = (FUNCTION_TABLE_iii[$cmp & 7]($24,$23)|0);
       $26 = ($25|0)>(-1);
       if ($26) {
        $27 = (FUNCTION_TABLE_iii[$cmp & 7]($24,$19)|0);
        $28 = ($27|0)>(-1);
        if ($28) {
         $i$0$lcssa$i = $i$04$i;
         break;
        }
       }
       $29 = (FUNCTION_TABLE_iii[$cmp & 7]($23,$19)|0);
       $30 = ($29|0)>(-1);
       $31 = (($i$04$i) + 1)|0;
       $32 = (($ar$i) + ($i$04$i<<2)|0);
       if ($30) {
        HEAP32[$32>>2] = $23;
        $33 = (($$012$i) + -1)|0;
        $$0$be$i = $23;$$01$be$i = $33;
       } else {
        HEAP32[$32>>2] = $19;
        $$0$be$i = $19;$$01$be$i = $20;
       }
       $34 = ($$01$be$i|0)>(1);
       if (!($34)) {
        $i$0$lcssa$i = $31;
        break;
       }
       $$pre$i = HEAP32[$ar$i>>2]|0;
       $$012$i = $$01$be$i;$$03$i = $$0$be$i;$24 = $$pre$i;$i$04$i = $31;
      }
      $35 = ($i$0$lcssa$i|0)<(2);
      if (!($35)) {
       $36 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
       HEAP32[$36>>2] = $tmp$i;
       if (!($13)) {
        $37 = (($i$0$lcssa$i) + -1)|0;
        $$02$us$i = $width;$49 = $tmp$i;
        while(1) {
         $47 = ($$02$us$i>>>0)>(256);
         $39 = $47 ? 256 : $$02$us$i;
         $48 = HEAP32[$ar$i>>2]|0;
         _memcpy(($49|0),($48|0),($39|0))|0;
         $45 = $48;$i$01$us$i = 0;
         while(1) {
          $41 = (($ar$i) + ($i$01$us$i<<2)|0);
          $42 = (($i$01$us$i) + 1)|0;
          $43 = (($ar$i) + ($42<<2)|0);
          $44 = HEAP32[$43>>2]|0;
          _memcpy(($45|0),($44|0),($39|0))|0;
          $46 = (($45) + ($39)|0);
          HEAP32[$41>>2] = $46;
          $exitcond$i = ($i$01$us$i|0)==($37|0);
          if ($exitcond$i) {
           break;
          } else {
           $45 = $44;$i$01$us$i = $42;
          }
         }
         $38 = ($$02$us$i|0)==($39|0);
         if ($38) {
          break;
         }
         $40 = (($$02$us$i) - ($39))|0;
         $$pre$i10 = HEAP32[$36>>2]|0;
         $$02$us$i = $40;$49 = $$pre$i10;
        }
       }
      }
     } else {
     }
     $50 = $16 >>> 2;
     $51 = $52 << 30;
     $53 = $50 | $51;
     $54 = $52 >>> 2;
     $55 = (($pshift$079) + 2)|0;
     $107 = $53;$170 = $54;$pshift$1 = $55;
    } else {
     $56 = (($pshift$079) + -1)|0;
     $57 = (($lp) + ($56<<2)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $head$078;
     $60 = (($14) - ($59))|0;
     $61 = ($58>>>0)<($60>>>0);
     if ($61) {
      HEAP32[$ar$i>>2] = $head$078;
      $62 = ($pshift$079|0)>(1);
      if ($62) {
       $$012$i17 = $pshift$079;$$03$i16 = $head$078;$68 = $head$078;$i$04$i15 = 1;
       while(1) {
        $63 = (($$03$i16) + ($10)|0);
        $64 = (($$012$i17) + -2)|0;
        $65 = (($lp) + ($64<<2)|0);
        $66 = HEAP32[$65>>2]|0;
        $sum$i18 = (($66) + ($width))|0;
        $$sum$i19 = (0 - ($sum$i18))|0;
        $67 = (($$03$i16) + ($$sum$i19)|0);
        $69 = (FUNCTION_TABLE_iii[$cmp & 7]($68,$67)|0);
        $70 = ($69|0)>(-1);
        if ($70) {
         $71 = (FUNCTION_TABLE_iii[$cmp & 7]($68,$63)|0);
         $72 = ($71|0)>(-1);
         if ($72) {
          $i$0$lcssa$i25 = $i$04$i15;
          break;
         }
        }
        $73 = (FUNCTION_TABLE_iii[$cmp & 7]($67,$63)|0);
        $74 = ($73|0)>(-1);
        $75 = (($i$04$i15) + 1)|0;
        $76 = (($ar$i) + ($i$04$i15<<2)|0);
        if ($74) {
         HEAP32[$76>>2] = $67;
         $77 = (($$012$i17) + -1)|0;
         $$0$be$i21 = $67;$$01$be$i20 = $77;
        } else {
         HEAP32[$76>>2] = $63;
         $$0$be$i21 = $63;$$01$be$i20 = $64;
        }
        $78 = ($$01$be$i20|0)>(1);
        if (!($78)) {
         $i$0$lcssa$i25 = $75;
         break;
        }
        $$pre$i23 = HEAP32[$ar$i>>2]|0;
        $$012$i17 = $$01$be$i20;$$03$i16 = $$0$be$i21;$68 = $$pre$i23;$i$04$i15 = $75;
       }
       $79 = ($i$0$lcssa$i25|0)<(2);
       if (!($79)) {
        $80 = (($ar$i) + ($i$0$lcssa$i25<<2)|0);
        HEAP32[$80>>2] = $tmp$i28;
        if (!($13)) {
         $81 = (($i$0$lcssa$i25) + -1)|0;
         $$02$us$i34 = $width;$93 = $tmp$i28;
         while(1) {
          $91 = ($$02$us$i34>>>0)>(256);
          $83 = $91 ? 256 : $$02$us$i34;
          $92 = HEAP32[$ar$i>>2]|0;
          _memcpy(($93|0),($92|0),($83|0))|0;
          $89 = $92;$i$01$us$i32 = 0;
          while(1) {
           $85 = (($ar$i) + ($i$01$us$i32<<2)|0);
           $86 = (($i$01$us$i32) + 1)|0;
           $87 = (($ar$i) + ($86<<2)|0);
           $88 = HEAP32[$87>>2]|0;
           _memcpy(($89|0),($88|0),($83|0))|0;
           $90 = (($89) + ($83)|0);
           HEAP32[$85>>2] = $90;
           $exitcond$i33 = ($i$01$us$i32|0)==($81|0);
           if ($exitcond$i33) {
            break;
           } else {
            $89 = $88;$i$01$us$i32 = $86;
           }
          }
          $82 = ($$02$us$i34|0)==($83|0);
          if ($82) {
           break;
          }
          $84 = (($$02$us$i34) - ($83))|0;
          $$pre$i30 = HEAP32[$80>>2]|0;
          $$02$us$i34 = $84;$93 = $$pre$i30;
         }
        }
       }
      } else {
      }
     } else {
      _trinkle($head$078,$width,$cmp,$16,$52,$pshift$079,0,$lp);
     }
     $94 = ($pshift$079|0)==(1);
     if ($94) {
      $95 = $52 << 1;
      $96 = $16 >>> 31;
      $97 = $96 | $95;
      $98 = $16 << 1;
      $107 = $98;$170 = $97;$pshift$1 = 0;
      break;
     } else {
      $99 = ($56>>>0)>(31);
      $100 = (($pshift$079) + -33)|0;
      $$ = $99 ? 0 : $16;
      $$68 = $99 ? $16 : $52;
      $$69 = $99 ? $100 : $56;
      $101 = $$68 << $$69;
      $102 = (32 - ($$69))|0;
      $103 = $$ >>> $102;
      $104 = $103 | $101;
      $105 = $$ << $$69;
      $107 = $105;$170 = $104;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $106 = $107 | 1;
   $108 = (($head$078) + ($width)|0);
   $109 = ($108>>>0)<($11>>>0);
   if ($109) {
    $16 = $106;$52 = $170;$head$078 = $108;$pshift$079 = $pshift$1;
   } else {
    $$lcssa96 = $170;$$lcssa97 = $106;$$lcssa98 = $108;$pshift$1$lcssa = $pshift$1;
    break;
   }
  }
  $$lcssa72 = $$lcssa96;$$lcssa73 = $$lcssa97;$head$0$lcssa = $$lcssa98;$pshift$0$lcssa = $pshift$1$lcssa;
 } else {
  $$lcssa72 = 0;$$lcssa73 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$width,$cmp,$$lcssa73,$$lcssa72,$pshift$0$lcssa,0,$lp);
 $110 = ($pshift$0$lcssa|0)==(1);
 $111 = ($$lcssa73|0)==(1);
 $or$cond74 = $111 & $110;
 $112 = ($$lcssa72|0)==(0);
 $or$cond7075 = $112 & $or$cond74;
 if ($or$cond7075) {
  STACKTOP = sp;return;
 }
 $115 = $$lcssa73;$124 = $$lcssa72;$head$176 = $head$0$lcssa;$pshift$277 = $pshift$0$lcssa;
 while(1) {
  $113 = ($pshift$277|0)<(2);
  if ($113) {
   $114 = (($115) + -1)|0;
   $116 = ($114|0)==(0);
   do {
    if ($116) {
     $137 = 32;
     label = 66;
    } else {
     $117 = $114 & 1;
     $118 = ($117|0)==(0);
     if ($118) {
      $$02$i$i = $114;$nTrailingZeros$03$i$i = 0;
      while(1) {
       $119 = (($nTrailingZeros$03$i$i) + 1)|0;
       $120 = $$02$i$i >>> 1;
       $121 = $120 & 1;
       $122 = ($121|0)==(0);
       if ($122) {
        $$02$i$i = $120;$nTrailingZeros$03$i$i = $119;
       } else {
        $$lcssa = $119;
        break;
       }
      }
      $123 = ($$lcssa|0)==(0);
      if ($123) {
       label = 60;
      } else {
       $134 = $$lcssa;
      }
     } else {
      label = 60;
     }
     if ((label|0) == 60) {
      label = 0;
      $125 = ($124|0)==(0);
      if ($125) {
       $137 = 64;
       label = 66;
       break;
      }
      $126 = $124 & 1;
      $127 = ($126|0)==(0);
      if (!($127)) {
       $$0$i49 = 0;$159 = $115;$162 = $124;$166 = 0;
       break;
      }
      $$02$i3$i = $124;$nTrailingZeros$03$i2$i = 0;
      while(1) {
       $128 = (($nTrailingZeros$03$i2$i) + 1)|0;
       $129 = $$02$i3$i >>> 1;
       $130 = $129 & 1;
       $131 = ($130|0)==(0);
       if ($131) {
        $$02$i3$i = $129;$nTrailingZeros$03$i2$i = $128;
       } else {
        $$lcssa95 = $128;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
        break;
       }
      }
      $132 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
      $133 = ($$lcssa95|0)==(0);
      if ($133) {
       $$0$i49 = 0;$159 = $115;$162 = $124;$166 = 0;
       break;
      } else {
       $134 = $132;
      }
     }
     $135 = ($134>>>0)>(31);
     if ($135) {
      $137 = $134;
      label = 66;
     } else {
      $$0$i49 = $134;$159 = $115;$162 = $124;$166 = $134;
     }
    }
   } while(0);
   if ((label|0) == 66) {
    label = 0;
    $136 = (($137) + -32)|0;
    $$0$i49 = $136;$159 = $124;$162 = 0;$166 = $137;
   }
   $158 = $159 >>> $$0$i49;
   $160 = (32 - ($$0$i49))|0;
   $161 = $162 << $160;
   $163 = $161 | $158;
   $164 = $162 >>> $$0$i49;
   $165 = (($166) + ($pshift$277))|0;
   $$pre = (($head$176) + ($10)|0);
   $167 = ($165|0)==(1);
   $168 = ($163|0)==(1);
   $or$cond = $168 & $167;
   $169 = ($164|0)==(0);
   $or$cond70 = $169 & $or$cond;
   if ($or$cond70) {
    break;
   } else {
    $$be = $163;$$be94 = $164;$head$176$be = $$pre;$pshift$277$be = $165;
   }
  } else {
   $138 = $124 << 2;
   $139 = $115 >>> 30;
   $140 = $139 | $138;
   $141 = (($pshift$277) + -2)|0;
   $142 = $115 << 1;
   $143 = $142 & 2147483646;
   $144 = $139 << 31;
   $145 = $143 | $144;
   $146 = $145 ^ 3;
   $147 = $140 >>> 1;
   $148 = (($lp) + ($141<<2)|0);
   $149 = HEAP32[$148>>2]|0;
   $sum = (($149) + ($width))|0;
   $$sum2 = (0 - ($sum))|0;
   $150 = (($head$176) + ($$sum2)|0);
   $151 = (($pshift$277) + -1)|0;
   _trinkle($150,$width,$cmp,$146,$147,$151,1,$lp);
   $152 = $147 << 1;
   $153 = $139 & 1;
   $154 = $152 | $153;
   $155 = $146 << 1;
   $156 = $155 | 1;
   $157 = (($head$176) + ($10)|0);
   _trinkle($157,$width,$cmp,$156,$154,$141,1,$lp);
   $$be = $156;$$be94 = $154;$head$176$be = $157;$pshift$277$be = $141;
  }
  $115 = $$be;$124 = $$be94;$head$176 = $head$176$be;$pshift$277 = $pshift$277$be;
 }
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$0$lcssa49$ph = 0, $$01$be$i = 0, $$012 = 0, $$012$i = 0, $$012$lcssa = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02$lcssa51$ph = 0, $$02$us$i = 0, $$02$us$i15 = 0, $$0210 = 0, $$0210$lcssa = 0, $$03$i = 0, $$03$lcssa = 0;
 var $$039 = 0, $$039$lcssa = 0, $$lcssa = 0, $$lcssa57 = 0, $$pre = 0, $$pre$i = 0, $$pre$i11 = 0, $$pre$i6 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar = 0, $ar$i = 0;
 var $exitcond$i = 0, $exitcond$i14 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0, $i$0$lcssa50 = 0, $i$0$lcssa50$ph = 0, $i$01$us$i = 0, $i$01$us$i13 = 0, $i$011 = 0, $i$011$lcssa = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond5 = 0, $or$cond56 = 0, $pp$val17 = 0, $sum = 0, $sum$i = 0;
 var $tmp$i = 0, $tmp$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i9 = sp + 712|0;
 $tmp$i = sp + 456|0;
 $ar$i = sp + 228|0;
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)==(1);
 $2 = ($pp$1$val|0)==(0);
 $or$cond56 = $2 & $1;
 do {
  if ($or$cond56) {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 22;
  } else {
   $$012 = $head;$$0210 = $pshift;$$039 = $trusty;$106 = $2;$33 = $pp$1$val;$7 = $head;$i$011 = 1;$pp$val17 = $pp$val;
   while(1) {
    $3 = (($lp) + ($$0210<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (0 - ($4))|0;
    $6 = (($$012) + ($5)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 7]($6,$7)|0);
    $9 = ($8|0)<(1);
    if ($9) {
     $$012$lcssa = $$012;$$0210$lcssa = $$0210;$$039$lcssa = $$039;$i$011$lcssa = $i$011;
     label = 21;
     break;
    }
    $10 = ($$039|0)==(0);
    $11 = ($$0210|0)>(1);
    $or$cond = $10 & $11;
    if ($or$cond) {
     $12 = (($$012) + ($0)|0);
     $13 = (($$0210) + -2)|0;
     $14 = (($lp) + ($13<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_iii[$cmp & 7]($12,$6)|0);
     $17 = ($16|0)>(-1);
     if ($17) {
      $$0$lcssa49$ph = $$012;$$02$lcssa51$ph = $$0210;$i$0$lcssa50$ph = $i$011;
      label = 23;
      break;
     }
     $sum = (($15) + ($width))|0;
     $$sum = (0 - ($sum))|0;
     $18 = (($$012) + ($$sum)|0);
     $19 = (FUNCTION_TABLE_iii[$cmp & 7]($18,$6)|0);
     $20 = ($19|0)>(-1);
     if ($20) {
      $$0$lcssa49$ph = $$012;$$02$lcssa51$ph = $$0210;$i$0$lcssa50$ph = $i$011;
      label = 23;
      break;
     }
    }
    $21 = (($i$011) + 1)|0;
    $22 = (($ar) + ($i$011<<2)|0);
    HEAP32[$22>>2] = $6;
    $23 = (($pp$val17) + -1)|0;
    $24 = ($23|0)==(0);
    do {
     if ($24) {
      $44 = 32;
      label = 18;
     } else {
      $25 = $23 & 1;
      $26 = ($25|0)==(0);
      if ($26) {
       $$02$i$i = $23;$nTrailingZeros$03$i$i = 0;
       while(1) {
        $27 = (($nTrailingZeros$03$i$i) + 1)|0;
        $28 = $$02$i$i >>> 1;
        $29 = $28 & 1;
        $30 = ($29|0)==(0);
        if ($30) {
         $$02$i$i = $28;$nTrailingZeros$03$i$i = $27;
        } else {
         $$lcssa = $27;
         break;
        }
       }
       $31 = ($$lcssa|0)==(0);
       if ($31) {
        label = 12;
       } else {
        $41 = $$lcssa;
       }
      } else {
       label = 12;
      }
      if ((label|0) == 12) {
       label = 0;
       if ($106) {
        $44 = 64;
        label = 18;
        break;
       }
       $32 = $33 & 1;
       $34 = ($32|0)==(0);
       if (!($34)) {
        $$0$i = 0;$46 = $pp$val17;$49 = $33;$53 = 0;
        break;
       }
       $$02$i3$i = $33;$nTrailingZeros$03$i2$i = 0;
       while(1) {
        $35 = (($nTrailingZeros$03$i2$i) + 1)|0;
        $36 = $$02$i3$i >>> 1;
        $37 = $36 & 1;
        $38 = ($37|0)==(0);
        if ($38) {
         $$02$i3$i = $36;$nTrailingZeros$03$i2$i = $35;
        } else {
         $$lcssa57 = $35;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
         break;
        }
       }
       $39 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
       $40 = ($$lcssa57|0)==(0);
       if ($40) {
        $$0$i = 0;$46 = $pp$val17;$49 = $33;$53 = 0;
        break;
       } else {
        $41 = $39;
       }
      }
      $42 = ($41>>>0)>(31);
      if ($42) {
       $44 = $41;
       label = 18;
      } else {
       $$0$i = $41;$46 = $pp$val17;$49 = $33;$53 = $41;
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     $43 = (($44) + -32)|0;
     $$0$i = $43;$46 = $33;$49 = 0;$53 = $44;
    }
    $45 = $46 >>> $$0$i;
    $47 = (32 - ($$0$i))|0;
    $48 = $49 << $47;
    $50 = $48 | $45;
    $51 = $49 >>> $$0$i;
    $52 = (($53) + ($$0210))|0;
    $54 = ($50|0)==(1);
    $55 = ($51|0)==(0);
    $or$cond5 = $55 & $54;
    if ($or$cond5) {
     $$0$lcssa49$ph = $6;$$02$lcssa51$ph = $52;$i$0$lcssa50$ph = $21;
     label = 23;
     break;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$012 = $6;$$0210 = $52;$$039 = 0;$106 = $55;$33 = $51;$7 = $$pre;$i$011 = $21;$pp$val17 = $50;
   }
   if ((label|0) == 21) {
    $$0$lcssa = $$012$lcssa;$$02$lcssa = $$0210$lcssa;$$03$lcssa = $$039$lcssa;$i$0$lcssa = $i$011$lcssa;
    label = 22;
    break;
   }
   else if ((label|0) == 23) {
    $$0$lcssa49 = $$0$lcssa49$ph;$$02$lcssa51 = $$02$lcssa51$ph;$i$0$lcssa50 = $i$0$lcssa50$ph;
    break;
   }
  }
 } while(0);
 if ((label|0) == 22) {
  $56 = ($$03$lcssa|0)==(0);
  if ($56) {
   $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $57 = ($i$0$lcssa50|0)<(2);
 if (!($57)) {
  $58 = (($ar) + ($i$0$lcssa50<<2)|0);
  HEAP32[$58>>2] = $tmp$i9;
  $59 = ($width|0)==(0);
  if (!($59)) {
   $60 = (($i$0$lcssa50) + -1)|0;
   $$02$us$i15 = $width;$72 = $tmp$i9;
   while(1) {
    $70 = ($$02$us$i15>>>0)>(256);
    $62 = $70 ? 256 : $$02$us$i15;
    $71 = HEAP32[$ar>>2]|0;
    _memcpy(($72|0),($71|0),($62|0))|0;
    $68 = $71;$i$01$us$i13 = 0;
    while(1) {
     $64 = (($ar) + ($i$01$us$i13<<2)|0);
     $65 = (($i$01$us$i13) + 1)|0;
     $66 = (($ar) + ($65<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     _memcpy(($68|0),($67|0),($62|0))|0;
     $69 = (($68) + ($62)|0);
     HEAP32[$64>>2] = $69;
     $exitcond$i14 = ($i$01$us$i13|0)==($60|0);
     if ($exitcond$i14) {
      break;
     } else {
      $68 = $67;$i$01$us$i13 = $65;
     }
    }
    $61 = ($$02$us$i15|0)==($62|0);
    if ($61) {
     break;
    }
    $63 = (($$02$us$i15) - ($62))|0;
    $$pre$i11 = HEAP32[$58>>2]|0;
    $$02$us$i15 = $63;$72 = $$pre$i11;
   }
  }
 }
 HEAP32[$ar$i>>2] = $$0$lcssa49;
 $73 = ($$02$lcssa51|0)>(1);
 if ($73) {
  $$012$i = $$02$lcssa51;$$03$i = $$0$lcssa49;$79 = $$0$lcssa49;$i$04$i = 1;
  while(1) {
   $74 = (($$03$i) + ($0)|0);
   $75 = (($$012$i) + -2)|0;
   $76 = (($lp) + ($75<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $sum$i = (($77) + ($width))|0;
   $$sum$i = (0 - ($sum$i))|0;
   $78 = (($$03$i) + ($$sum$i)|0);
   $80 = (FUNCTION_TABLE_iii[$cmp & 7]($79,$78)|0);
   $81 = ($80|0)>(-1);
   if ($81) {
    $82 = (FUNCTION_TABLE_iii[$cmp & 7]($79,$74)|0);
    $83 = ($82|0)>(-1);
    if ($83) {
     $i$0$lcssa$i = $i$04$i;
     break;
    }
   }
   $84 = (FUNCTION_TABLE_iii[$cmp & 7]($78,$74)|0);
   $85 = ($84|0)>(-1);
   $86 = (($i$04$i) + 1)|0;
   $87 = (($ar$i) + ($i$04$i<<2)|0);
   if ($85) {
    HEAP32[$87>>2] = $78;
    $88 = (($$012$i) + -1)|0;
    $$0$be$i = $78;$$01$be$i = $88;
   } else {
    HEAP32[$87>>2] = $74;
    $$0$be$i = $74;$$01$be$i = $75;
   }
   $89 = ($$01$be$i|0)>(1);
   if (!($89)) {
    $i$0$lcssa$i = $86;
    break;
   }
   $$pre$i = HEAP32[$ar$i>>2]|0;
   $$012$i = $$01$be$i;$$03$i = $$0$be$i;$79 = $$pre$i;$i$04$i = $86;
  }
  $90 = ($i$0$lcssa$i|0)<(2);
  if ($90) {
   $107 = $tmp$i;
  } else {
   $91 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
   HEAP32[$91>>2] = $tmp$i;
   $92 = ($width|0)==(0);
   if ($92) {
    $107 = $tmp$i;
   } else {
    $93 = (($i$0$lcssa$i) + -1)|0;
    $$02$us$i = $width;$105 = $tmp$i;
    while(1) {
     $103 = ($$02$us$i>>>0)>(256);
     $95 = $103 ? 256 : $$02$us$i;
     $104 = HEAP32[$ar$i>>2]|0;
     _memcpy(($105|0),($104|0),($95|0))|0;
     $101 = $104;$i$01$us$i = 0;
     while(1) {
      $97 = (($ar$i) + ($i$01$us$i<<2)|0);
      $98 = (($i$01$us$i) + 1)|0;
      $99 = (($ar$i) + ($98<<2)|0);
      $100 = HEAP32[$99>>2]|0;
      _memcpy(($101|0),($100|0),($95|0))|0;
      $102 = (($101) + ($95)|0);
      HEAP32[$97>>2] = $102;
      $exitcond$i = ($i$01$us$i|0)==($93|0);
      if ($exitcond$i) {
       break;
      } else {
       $101 = $100;$i$01$us$i = $98;
      }
     }
     $94 = ($$02$us$i|0)==($95|0);
     if ($94) {
      break;
     }
     $96 = (($$02$us$i) - ($95))|0;
     $$pre$i6 = HEAP32[$91>>2]|0;
     $$02$us$i = $96;$105 = $$pre$i6;
    }
    $107 = $tmp$i;
   }
  }
 } else {
  $107 = $tmp$i;
 }
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$lcssa = 0, $$lcssa146 = 0, $$lcssa148 = 0, $$lcssa151 = 0, $$lcssa152 = 0, $$lcssa153 = 0, $$lcssa154 = 0, $$lcssa156 = 0, $$lcssa159 = 0, $$lcssa161 = 0, $$lcssa163 = 0, $$lcssa165 = 0, $$lcssa167 = 0, $$lcssa169 = 0, $$lcssa172 = 0, $$lcssa174 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0;
 var $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre108 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$rsize$3$i$lcssa = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0, $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2337 = 0;
 var $$sum$i32 = 0, $$sum$i38 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0;
 var $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0;
 var $$sum3$i = 0, $$sum3$i27 = 0, $$sum3$pre$i$i = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0;
 var $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$08$i$i = 0, $K8$053$i$i = 0, $R$0$i = 0, $R$0$i$be = 0, $R$0$i$i = 0, $R$0$i$i$be = 0, $R$0$i$i$lcssa = 0, $R$0$i$i$ph = 0, $R$0$i$lcssa = 0, $R$0$i$ph = 0, $R$0$i18 = 0;
 var $R$0$i18$be = 0, $R$0$i18$lcssa = 0, $R$0$i18$ph = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$be = 0, $RP$0$i$i = 0, $RP$0$i$i$be = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$i$ph = 0, $RP$0$i$lcssa = 0, $RP$0$i$ph = 0, $RP$0$i17 = 0, $RP$0$i17$be = 0, $RP$0$i17$lcssa = 0, $RP$0$i17$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0;
 var $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$052$i$i = 0, $T$052$i$i$lcssa = 0, $T$07$i$i = 0, $T$07$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i26$i = 0;
 var $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond55$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$1$i$lcssa = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0;
 var $rsize$331$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0, $rst$1$i$lcssa = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$082$i = 0, $sp$082$i$lcssa = 0, $sp$181$i = 0, $sp$181$i$lcssa = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$0$i14$lcssa = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0;
 var $t$2$v$3$i$lcssa = 0, $t$230$i = 0, $t$230$i$be = 0, $t$230$i$ph = 0, $tbase$253$i = 0, $tsize$0313843$i = 0, $tsize$1$i = 0, $tsize$252$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$1$i$lcssa = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, $v$332$i$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[9688>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((9688 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((9688 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[9688>>2] = $22;
     } else {
      $23 = HEAP32[((9688 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[((9688 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((9688 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((9688 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[9688>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[((9688 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((9688 + 8|0))>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((9688 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((9688 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[9688>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[9688>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre108 = ((9688 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre108;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((9688 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((9688 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((9688 + 8|0))>>2] = $81;
     HEAP32[((9688 + 20|0))>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[((9688 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((9688 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((9688 + 16|0))>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($5)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i$lcssa) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i$lcssa) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = (($v$0$i$lcssa) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i$lcssa) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i$ph = $171;$RP$0$i$ph = $170;
        }
       } else {
        $R$0$i$ph = $168;$RP$0$i$ph = $167;
       }
       $R$0$i = $R$0$i$ph;$RP$0$i = $RP$0$i$ph;
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if ($175) {
         $176 = (($R$0$i) + 16|0);
         $177 = HEAP32[$176>>2]|0;
         $178 = ($177|0)==(0|0);
         if ($178) {
          $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
          break;
         } else {
          $R$0$i$be = $177;$RP$0$i$be = $176;
         }
        } else {
         $R$0$i$be = $174;$RP$0$i$be = $173;
        }
        $R$0$i = $R$0$i$be;$RP$0$i = $RP$0$i$be;
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = (($v$0$i$lcssa) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i$lcssa) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((9688 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((9688 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((9688 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((9688 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((9688 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i$lcssa) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i$lcssa) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((9688 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i38 = $5 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i38)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($5))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[((9688 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((9688 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((9688 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[9688>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[9688>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((9688 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((9688 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((9688 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((9688 + 8|0))>>2] = $rsize$0$i$lcssa;
      HEAP32[((9688 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i$lcssa) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((9688 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((9688 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 93;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $$lcssa174 = $286;$t$0$i14$lcssa = $t$0$i14;
          label = 97;
          break;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$1$i$lcssa = $rsize$1$i;$rst$1$i$lcssa = $rst$1$i;$v$1$i$lcssa = $v$1$i;
         label = 92;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
       if ((label|0) == 92) {
        $rsize$2$i = $rsize$1$i$lcssa;$t$1$i = $rst$1$i$lcssa;$v$2$i = $v$1$i$lcssa;
        label = 93;
        break;
       }
       else if ((label|0) == 97) {
        $rsize$331$i$ph = $$lcssa174;$t$230$i$ph = $t$0$i14$lcssa;$v$332$i$ph = $t$0$i14$lcssa;
        label = 98;
        break;
       }
      }
     } while(0);
     if ((label|0) == 93) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = ((9688 + ($327<<2)|0) + 304|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;
      } else {
       $t$2$ph$i = $t$1$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
      } else {
       $rsize$331$i$ph = $rsize$2$i;$t$230$i$ph = $t$2$ph$i;$v$332$i$ph = $v$2$i;
       label = 98;
      }
     }
     if ((label|0) == 98) {
      $rsize$331$i = $rsize$331$i$ph;$t$230$i = $t$230$i$ph;$v$332$i = $v$332$i$ph;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if ($338) {
        $339 = (($t$230$i) + 20|0);
        $340 = HEAP32[$339>>2]|0;
        $341 = ($340|0)==(0|0);
        if ($341) {
         $$rsize$3$i$lcssa = $$rsize$3$i;$t$2$v$3$i$lcssa = $t$2$v$3$i;
         break;
        } else {
         $t$230$i$be = $340;
        }
       } else {
        $t$230$i$be = $337;
       }
       $rsize$331$i = $$rsize$3$i;$t$230$i = $t$230$i$be;$v$332$i = $t$2$v$3$i;
      }
      $rsize$3$lcssa$i = $$rsize$3$i$lcssa;$v$3$lcssa$i = $t$2$v$3$i$lcssa;
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((9688 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((9688 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18$ph = $368;$RP$0$i17$ph = $367;
          }
         } else {
          $R$0$i18$ph = $365;$RP$0$i17$ph = $364;
         }
         $R$0$i18 = $R$0$i18$ph;$RP$0$i17 = $RP$0$i17$ph;
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $373 = (($R$0$i18) + 16|0);
           $374 = HEAP32[$373>>2]|0;
           $375 = ($374|0)==(0|0);
           if ($375) {
            $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
            break;
           } else {
            $R$0$i18$be = $374;$RP$0$i17$be = $373;
           }
          } else {
           $R$0$i18$be = $371;$RP$0$i17$be = $370;
          }
          $R$0$i18 = $R$0$i18$be;$RP$0$i17 = $RP$0$i17$be;
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((9688 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((9688 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((9688 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((9688 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((9688 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((9688 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L98: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2337 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2337)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((9688 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[9688>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[9688>>2] = $430;
           $$sum14$pre$i = (($424) + 2)|0;
           $$pre$i25 = ((9688 + ($$sum14$pre$i<<2)|0) + 40|0);
           $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = ((9688 + ($$sum17$i<<2)|0) + 40|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[((9688 + 16|0))>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((9688 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((9688 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((9688 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$029$i = $483;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = ((($T$028$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa169 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $$lcssa172 = $487;
             label = 164;
             break;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           if ((label|0) == 164) {
            $T$0$lcssa$i = $$lcssa172;
            break;
           }
           $494 = HEAP32[((9688 + 16|0))>>2]|0;
           $495 = ($$lcssa169>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa169>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L98;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((9688 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((9688 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((9688 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((9688 + 20|0))>>2] = $514;
   HEAP32[((9688 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((9688 + 8|0))>>2] = 0;
   HEAP32[((9688 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[((9688 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((9688 + 12|0))>>2] = $528;
  $529 = HEAP32[((9688 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((9688 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[10160>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((10160 + 8|0))>>2] = $538;
    HEAP32[((10160 + 4|0))>>2] = $538;
    HEAP32[((10160 + 12|0))>>2] = -1;
    HEAP32[((10160 + 16|0))>>2] = -1;
    HEAP32[((10160 + 20|0))>>2] = 0;
    HEAP32[((9688 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[10160>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((10160 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[((9688 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((9688 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[((9688 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L282: do {
  if ($560) {
   $561 = HEAP32[((9688 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   do {
    if ($562) {
     label = 191;
    } else {
     $sp$0$i$i = ((9688 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa165 = $sp$0$i$i;$$lcssa167 = $565;
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 190;
       break;
      } else {
       $sp$0$i$i = $570;
      }
     }
     if ((label|0) == 190) {
      label = 191;
      break;
     }
     $594 = HEAP32[((9688 + 12|0))>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa165>>2]|0;
      $600 = HEAP32[$$lcssa167>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0313843$i = $596;
       } else {
        $tbase$253$i = $598;$tsize$252$i = $596;
        label = 211;
        break L282;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;
       label = 201;
      }
     } else {
      $tsize$0313843$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 191) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0313843$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[((10160 + 4|0))>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[((9688 + 432|0))>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[((9688 + 440|0))>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0313843$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       if ($593) {
        $tbase$253$i = $572;$tsize$252$i = $ssize$0$i;
        label = 211;
        break L282;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;
        label = 201;
       }
      } else {
       $tsize$0313843$i = 0;
      }
     }
    }
   } while(0);
   L306: do {
    if ((label|0) == 201) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond4$i = $607 & $or$cond5$i;
     do {
      if ($or$cond4$i) {
       $608 = HEAP32[((10160 + 8|0))>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0313843$i = 0;
         break L306;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0313843$i = 0;
     } else {
      $tbase$253$i = $br$0$ph$i;$tsize$252$i = $ssize$2$i;
      label = 211;
      break L282;
     }
    }
   } while(0);
   $618 = HEAP32[((9688 + 444|0))>>2]|0;
   $619 = $618 | 4;
   HEAP32[((9688 + 444|0))>>2] = $619;
   $tsize$1$i = $tsize$0313843$i;
   label = 208;
  } else {
   $tsize$1$i = 0;
   label = 208;
  }
 } while(0);
 if ((label|0) == 208) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond6$i = $625 & $or$cond3$i;
   if ($or$cond6$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$253$i = $621;$tsize$252$i = $$tsize$1$i;
     label = 211;
    }
   }
  }
 }
 if ((label|0) == 211) {
  $631 = HEAP32[((9688 + 432|0))>>2]|0;
  $632 = (($631) + ($tsize$252$i))|0;
  HEAP32[((9688 + 432|0))>>2] = $632;
  $633 = HEAP32[((9688 + 436|0))>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[((9688 + 436|0))>>2] = $632;
  }
  $635 = HEAP32[((9688 + 24|0))>>2]|0;
  $636 = ($635|0)==(0|0);
  L325: do {
   if ($636) {
    $637 = HEAP32[((9688 + 16|0))>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$253$i>>>0)<($637>>>0);
    $or$cond8$i = $638 | $639;
    if ($or$cond8$i) {
     HEAP32[((9688 + 16|0))>>2] = $tbase$253$i;
    }
    HEAP32[((9688 + 448|0))>>2] = $tbase$253$i;
    HEAP32[((9688 + 452|0))>>2] = $tsize$252$i;
    HEAP32[((9688 + 460|0))>>2] = 0;
    $640 = HEAP32[10160>>2]|0;
    HEAP32[((9688 + 36|0))>>2] = $640;
    HEAP32[((9688 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = ((9688 + ($641<<2)|0) + 40|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = ((9688 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = ((9688 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$252$i) + -40)|0;
    $647 = (($tbase$253$i) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    if ($650) {
     $654 = 0;
    } else {
     $651 = (0 - ($648))|0;
     $652 = $651 & 7;
     $654 = $652;
    }
    $653 = (($tbase$253$i) + ($654)|0);
    $655 = (($646) - ($654))|0;
    HEAP32[((9688 + 24|0))>>2] = $653;
    HEAP32[((9688 + 12|0))>>2] = $655;
    $656 = $655 | 1;
    $$sum$i12$i = (($654) + 4)|0;
    $657 = (($tbase$253$i) + ($$sum$i12$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$252$i) + -36)|0;
    $658 = (($tbase$253$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[((10160 + 16|0))>>2]|0;
    HEAP32[((9688 + 28|0))>>2] = $659;
   } else {
    $sp$082$i = ((9688 + 448|0));
    while(1) {
     $660 = HEAP32[$sp$082$i>>2]|0;
     $661 = (($sp$082$i) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$253$i|0)==($663|0);
     if ($664) {
      $$lcssa159 = $660;$$lcssa161 = $661;$$lcssa163 = $662;$sp$082$i$lcssa = $sp$082$i;
      label = 224;
      break;
     }
     $665 = (($sp$082$i) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      label = 229;
      break;
     } else {
      $sp$082$i = $666;
     }
    }
    if ((label|0) == 224) {
     $668 = (($sp$082$i$lcssa) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa159>>>0);
      $673 = ($635>>>0)<($tbase$253$i>>>0);
      $or$cond55$i = $673 & $672;
      if ($or$cond55$i) {
       $674 = (($$lcssa163) + ($tsize$252$i))|0;
       HEAP32[$$lcssa161>>2] = $674;
       $675 = HEAP32[((9688 + 12|0))>>2]|0;
       $676 = (($675) + ($tsize$252$i))|0;
       $677 = (($635) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       if ($680) {
        $684 = 0;
       } else {
        $681 = (0 - ($678))|0;
        $682 = $681 & 7;
        $684 = $682;
       }
       $683 = (($635) + ($684)|0);
       $685 = (($676) - ($684))|0;
       HEAP32[((9688 + 24|0))>>2] = $683;
       HEAP32[((9688 + 12|0))>>2] = $685;
       $686 = $685 | 1;
       $$sum$i16$i = (($684) + 4)|0;
       $687 = (($635) + ($$sum$i16$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i17$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i17$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[((10160 + 16|0))>>2]|0;
       HEAP32[((9688 + 28|0))>>2] = $689;
       break;
      }
     }
    }
    else if ((label|0) == 229) {
    }
    $690 = HEAP32[((9688 + 16|0))>>2]|0;
    $691 = ($tbase$253$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[((9688 + 16|0))>>2] = $tbase$253$i;
     $755 = $tbase$253$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$253$i) + ($tsize$252$i)|0);
    $sp$181$i = ((9688 + 448|0));
    while(1) {
     $693 = HEAP32[$sp$181$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa156 = $sp$181$i;$sp$181$i$lcssa = $sp$181$i;
      label = 235;
      break;
     }
     $695 = (($sp$181$i) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      label = 236;
      break;
     } else {
      $sp$181$i = $696;
     }
    }
    if ((label|0) == 235) {
     $698 = (($sp$181$i$lcssa) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa156>>2] = $tbase$253$i;
      $702 = (($sp$181$i$lcssa) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$252$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = (($tbase$253$i) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      if ($708) {
       $712 = 0;
      } else {
       $709 = (0 - ($706))|0;
       $710 = $709 & 7;
       $712 = $710;
      }
      $711 = (($tbase$253$i) + ($712)|0);
      $$sum110$i = (($tsize$252$i) + 8)|0;
      $713 = (($tbase$253$i) + ($$sum110$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      if ($716) {
       $719 = 0;
      } else {
       $717 = (0 - ($714))|0;
       $718 = $717 & 7;
       $719 = $718;
      }
      $$sum111$i = (($719) + ($tsize$252$i))|0;
      $720 = (($tbase$253$i) + ($$sum111$i)|0);
      $721 = $720;
      $722 = $711;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($712) + ($nb$0))|0;
      $724 = (($tbase$253$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($712) + 4)|0;
      $727 = (($tbase$253$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L354: do {
       if ($728) {
        $729 = HEAP32[((9688 + 12|0))>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[((9688 + 12|0))>>2] = $730;
        HEAP32[((9688 + 24|0))>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$253$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[((9688 + 20|0))>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[((9688 + 8|0))>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[((9688 + 8|0))>>2] = $736;
         HEAP32[((9688 + 20|0))>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$253$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$253$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$252$i) + 4)|0;
        $$sum112$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$253$i) + ($$sum112$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L362: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum122$i = (($$sum3738$i$i) + ($tsize$252$i))|0;
           $747 = (($tbase$253$i) + ($$sum122$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$252$i) + 12)|0;
           $$sum123$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$253$i) + ($$sum123$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = ((9688 + ($751<<2)|0) + 40|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = (($748) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[9688>>2]|0;
            $763 = $762 & $761;
            HEAP32[9688>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre58$i$i = (($750) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = (($750) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi59$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = (($748) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum113$i = (($$sum34$i$i) + ($tsize$252$i))|0;
           $770 = (($tbase$253$i) + ($$sum113$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$252$i) + 12)|0;
           $$sum114$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$253$i) + ($$sum114$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum120$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$253$i) + ($$sum120$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum121$i = (($$sum67$i$i) + ($tsize$252$i))|0;
              $787 = (($tbase$253$i) + ($$sum121$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i$ph = $788;$RP$0$i$i$ph = $787;
              }
             } else {
              $R$0$i$i$ph = $785;$RP$0$i$i$ph = $784;
             }
             $R$0$i$i = $R$0$i$i$ph;$RP$0$i$i = $RP$0$i$i$ph;
             while(1) {
              $790 = (($R$0$i$i) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if ($792) {
               $793 = (($R$0$i$i) + 16|0);
               $794 = HEAP32[$793>>2]|0;
               $795 = ($794|0)==(0|0);
               if ($795) {
                $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
                break;
               } else {
                $R$0$i$i$be = $794;$RP$0$i$i$be = $793;
               }
              } else {
               $R$0$i$i$be = $791;$RP$0$i$i$be = $790;
              }
              $R$0$i$i = $R$0$i$i$be;$RP$0$i$i = $RP$0$i$i$be;
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum115$i = (($$sum3536$i$i) + ($tsize$252$i))|0;
             $775 = (($tbase$253$i) + ($$sum115$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = (($776) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = (($773) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$252$i) + 28)|0;
           $$sum116$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$253$i) + ($$sum116$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = ((9688 + ($799<<2)|0) + 304|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[((9688 + 4|0))>>2]|0;
             $806 = $805 & $804;
             HEAP32[((9688 + 4|0))>>2] = $806;
             break L362;
            } else {
             $807 = HEAP32[((9688 + 16|0))>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = (($771) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = (($771) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L362;
             }
            }
           } while(0);
           $814 = HEAP32[((9688 + 16|0))>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = (($R$1$i$i) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum117$i = (($$sum3132$i$i) + ($tsize$252$i))|0;
           $817 = (($tbase$253$i) + ($$sum117$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = (($R$1$i$i) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = (($818) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum118$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$253$i) + ($$sum118$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[((9688 + 16|0))>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = (($R$1$i$i) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = (($824) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum119$i = (($$sum9$i$i) + ($tsize$252$i))|0;
         $830 = (($tbase$253$i) + ($$sum119$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = (($oldfirst$0$i$i) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$253$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$253$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = ((9688 + ($840<<2)|0) + 40|0);
         $842 = HEAP32[9688>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[9688>>2] = $846;
           $$sum26$pre$i$i = (($840) + 2)|0;
           $$pre$i22$i = ((9688 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i23$iZ2D = $$pre$i22$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = ((9688 + ($$sum29$i$i<<2)|0) + 40|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[((9688 + 16|0))>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = (($F4$0$i$i) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$253$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$253$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = ((9688 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$253$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$253$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$253$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[((9688 + 4|0))>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[((9688 + 4|0))>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$253$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$253$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$253$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ($I7$0$i$i|0)==(31);
        if ($892) {
         $900 = 0;
        } else {
         $893 = $I7$0$i$i >>> 1;
         $894 = (25 - ($893))|0;
         $900 = $894;
        }
        $895 = (($891) + 4|0);
        $896 = HEAP32[$895>>2]|0;
        $897 = $896 & -8;
        $898 = ($897|0)==($qsize$0$i$i|0);
        do {
         if ($898) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $899 = $qsize$0$i$i << $900;
          $K8$053$i$i = $899;$T$052$i$i = $891;
          while(1) {
           $907 = $K8$053$i$i >>> 31;
           $908 = ((($T$052$i$i) + ($907<<2)|0) + 16|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$052$i$i$lcssa = $T$052$i$i;
            break;
           }
           $901 = $K8$053$i$i << 1;
           $902 = (($903) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $$lcssa146 = $903;
            label = 316;
            break;
           } else {
            $K8$053$i$i = $901;$T$052$i$i = $903;
           }
          }
          if ((label|0) == 316) {
           $T$0$lcssa$i25$i = $$lcssa146;
           break;
          }
          $910 = HEAP32[((9688 + 16|0))>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$253$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$052$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$253$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$253$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L354;
          }
         }
        } while(0);
        $915 = (($T$0$lcssa$i25$i) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[((9688 + 16|0))>>2]|0;
        $918 = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = ($916>>>0)>=($917>>>0);
        $or$cond$i26$i = $918 & $919;
        if ($or$cond$i26$i) {
         $920 = (($916) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$253$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$253$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$253$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $712 | 8;
      $924 = (($tbase$253$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     }
    }
    else if ((label|0) == 236) {
    }
    $sp$0$i$i$i = ((9688 + 448|0));
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = (($sp$0$i$i$i) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa152 = $925;$$lcssa153 = $928;$$lcssa154 = $929;
       break;
      }
     }
     $931 = (($sp$0$i$i$i) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i13$i = (($$lcssa153) + -47)|0;
    $$sum1$i14$i = (($$lcssa153) + -39)|0;
    $933 = (($$lcssa152) + ($$sum1$i14$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    if ($936) {
     $939 = 0;
    } else {
     $937 = (0 - ($934))|0;
     $938 = $937 & 7;
     $939 = $938;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($939))|0;
    $940 = (($$lcssa152) + ($$sum2$i15$i)|0);
    $941 = (($635) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = (($943) + 8|0);
    $945 = (($tsize$252$i) + -40)|0;
    $946 = (($tbase$253$i) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    if ($949) {
     $953 = 0;
    } else {
     $950 = (0 - ($947))|0;
     $951 = $950 & 7;
     $953 = $951;
    }
    $952 = (($tbase$253$i) + ($953)|0);
    $954 = (($945) - ($953))|0;
    HEAP32[((9688 + 24|0))>>2] = $952;
    HEAP32[((9688 + 12|0))>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($953) + 4)|0;
    $956 = (($tbase$253$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$252$i) + -36)|0;
    $957 = (($tbase$253$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[((10160 + 16|0))>>2]|0;
    HEAP32[((9688 + 28|0))>>2] = $958;
    $959 = (($943) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944+0>>2]=HEAP32[((9688 + 448|0))+0>>2]|0;HEAP32[$944+4>>2]=HEAP32[((9688 + 448|0))+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[((9688 + 448|0))+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[((9688 + 448|0))+12>>2]|0;
    HEAP32[((9688 + 448|0))>>2] = $tbase$253$i;
    HEAP32[((9688 + 452|0))>>2] = $tsize$252$i;
    HEAP32[((9688 + 460|0))>>2] = 0;
    HEAP32[((9688 + 456|0))>>2] = $944;
    $960 = (($943) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = (($943) + 32|0);
    $962 = ($961>>>0)<($$lcssa154>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = (($964) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = (($964) + 8|0);
      $966 = ($965>>>0)<($$lcssa154>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = (($635) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = ((9688 + ($977<<2)|0) + 40|0);
      $979 = HEAP32[9688>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      do {
       if ($982) {
        $983 = $979 | $980;
        HEAP32[9688>>2] = $983;
        $$sum3$pre$i$i = (($977) + 2)|0;
        $$pre$i$i = ((9688 + ($$sum3$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $978;
       } else {
        $$sum4$i$i = (($977) + 2)|0;
        $984 = ((9688 + ($$sum4$i$i<<2)|0) + 40|0);
        $985 = HEAP32[$984>>2]|0;
        $986 = HEAP32[((9688 + 16|0))>>2]|0;
        $987 = ($985>>>0)<($986>>>0);
        if (!($987)) {
         $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = (($F$0$i$i) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = (($635) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = (($635) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = ((9688 + ($I1$0$i$i<<2)|0) + 304|0);
     $1017 = (($635) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = (($635) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[((9688 + 4|0))>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[((9688 + 4|0))>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = (($635) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = (($635) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = (($635) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ($I1$0$i$i|0)==(31);
     if ($1028) {
      $1036 = 0;
     } else {
      $1029 = $I1$0$i$i >>> 1;
      $1030 = (25 - ($1029))|0;
      $1036 = $1030;
     }
     $1031 = (($1027) + 4|0);
     $1032 = HEAP32[$1031>>2]|0;
     $1033 = $1032 & -8;
     $1034 = ($1033|0)==($970|0);
     do {
      if ($1034) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1035 = $970 << $1036;
       $K2$08$i$i = $1035;$T$07$i$i = $1027;
       while(1) {
        $1043 = $K2$08$i$i >>> 31;
        $1044 = ((($T$07$i$i) + ($1043<<2)|0) + 16|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa148 = $1044;$T$07$i$i$lcssa = $T$07$i$i;
         break;
        }
        $1037 = $K2$08$i$i << 1;
        $1038 = (($1039) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $$lcssa151 = $1039;
         label = 353;
         break;
        } else {
         $K2$08$i$i = $1037;$T$07$i$i = $1039;
        }
       }
       if ((label|0) == 353) {
        $T$0$lcssa$i$i = $$lcssa151;
        break;
       }
       $1046 = HEAP32[((9688 + 16|0))>>2]|0;
       $1047 = ($$lcssa148>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa148>>2] = $635;
        $1048 = (($635) + 24|0);
        HEAP32[$1048>>2] = $T$07$i$i$lcssa;
        $1049 = (($635) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = (($635) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L325;
       }
      }
     } while(0);
     $1051 = (($T$0$lcssa$i$i) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[((9688 + 16|0))>>2]|0;
     $1054 = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = ($1052>>>0)>=($1053>>>0);
     $or$cond$i$i = $1054 & $1055;
     if ($or$cond$i$i) {
      $1056 = (($1052) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = (($635) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = (($635) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = (($635) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[((9688 + 12|0))>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[((9688 + 12|0))>>2] = $1062;
   $1063 = HEAP32[((9688 + 24|0))>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[((9688 + 24|0))>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = (($1063) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = (($1063) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$lcssa71 = 0, $$pre = 0, $$pre$phi60Z2D = 0, $$pre$phi62Z2D = 0, $$pre$phiZ2D = 0, $$pre59 = 0, $$pre61 = 0, $$sum = 0, $$sum10$pre = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0;
 var $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$054 = 0, $R$0 = 0, $R$0$be = 0;
 var $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0, $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$053 = 0, $T$053$lcssa = 0, $cond = 0;
 var $cond48 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((9688 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((9688 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((9688 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((9688 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[9688>>2]|0;
     $36 = $35 & $34;
     HEAP32[9688>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre61 = (($24) + 8|0);
     $$pre$phi62Z2D = $$pre61;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi62Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi62Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $61;$RP$0$ph = $60;
      }
     } else {
      $R$0$ph = $58;$RP$0$ph = $57;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if ($65) {
       $66 = (($R$0) + 16|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($67|0)==(0|0);
       if ($68) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $67;$RP$0$be = $66;
       }
      } else {
       $R$0$be = $64;$RP$0$be = $63;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((9688 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((9688 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((9688 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((9688 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((9688 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((9688 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((9688 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((9688 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((9688 + 12|0))>>2] = $120;
   HEAP32[((9688 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((9688 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[((9688 + 20|0))>>2] = 0;
   HEAP32[((9688 + 8|0))>>2] = 0;
   return;
  }
  $125 = HEAP32[((9688 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((9688 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((9688 + 8|0))>>2] = $128;
   HEAP32[((9688 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((9688 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((9688 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[9688>>2]|0;
     $152 = $151 & $150;
     HEAP32[9688>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre59 = (($139) + 8|0);
     $$pre$phi60Z2D = $$pre59;
    } else {
     $154 = HEAP32[((9688 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi60Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi60Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $179;$RP9$0$ph = $178;
       }
      } else {
       $R7$0$ph = $176;$RP9$0$ph = $175;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $184 = (($R7$0) + 16|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if ($186) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $185;$RP9$0$be = $184;
        }
       } else {
        $R7$0$be = $182;$RP9$0$be = $181;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $187 = HEAP32[((9688 + 16|0))>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((9688 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((9688 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond48 = ($R7$1|0)==(0|0);
      if ($cond48) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((9688 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((9688 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((9688 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((9688 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((9688 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((9688 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((9688 + 8|0))>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((9688 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[9688>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[9688>>2] = $239;
   $$sum10$pre = (($233) + 2)|0;
   $$pre = ((9688 + ($$sum10$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = ((9688 + ($$sum11<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((9688 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((9688 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = (($p$0) + 16|0);
 $275 = (($p$0) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[((9688 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L205: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((9688 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$054 = $292;$T$053 = $284;
     while(1) {
      $300 = $K19$054 >>> 31;
      $301 = ((($T$053) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$053$lcssa = $T$053;
       break;
      }
      $294 = $K19$054 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $$lcssa71 = $296;
       label = 137;
       break;
      } else {
       $K19$054 = $294;$T$053 = $296;
      }
     }
     if ((label|0) == 137) {
      $T$0$lcssa = $$lcssa71;
      break;
     }
     $303 = HEAP32[((9688 + 16|0))>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$053$lcssa;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L205;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((9688 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((9688 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((9688 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if (!($319)) {
  return;
 }
 $sp$0$in$i = ((9688 + 456|0));
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((9688 + 32|0))>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = (($6) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $8 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $8 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $9 = (_try_realloc_chunk($7,$8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = (($9) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = (($oldmem) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0;
 var $RP$0$ph = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((9688 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((10160 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[((9688 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((9688 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((9688 + 24|0))>>2] = $36;
  HEAP32[((9688 + 12|0))>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[((9688 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((9688 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((9688 + 8|0))>>2] = $storemerge21;
  HEAP32[((9688 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((9688 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[9688>>2]|0;
    $88 = $87 & $86;
    HEAP32[9688>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $113;$RP$0$ph = $112;
      }
     } else {
      $R$0$ph = $110;$RP$0$ph = $109;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $118 = (($R$0) + 16|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ($119|0)==(0|0);
       if ($120) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $119;$RP$0$be = $118;
       }
      } else {
       $R$0$be = $116;$RP$0$be = $115;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((9688 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((9688 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((9688 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((9688 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((9688 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((9688 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$lcssa62 = 0, $$pre = 0, $$pre$phi51Z2D = 0, $$pre$phi53Z2D = 0, $$pre$phiZ2D = 0, $$pre50 = 0, $$pre52 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6$pre = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$045 = 0, $R$0 = 0, $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0;
 var $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$044 = 0, $T$044$lcssa = 0, $cond = 0, $cond40 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((9688 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((9688 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((9688 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((9688 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[9688>>2]|0;
     $32 = $31 & $30;
     HEAP32[9688>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre52 = (($20) + 8|0);
     $$pre$phi53Z2D = $$pre52;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi53Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi53Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $57;$RP$0$ph = $56;
      }
     } else {
      $R$0$ph = $54;$RP$0$ph = $53;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if ($61) {
       $62 = (($R$0) + 16|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)==(0|0);
       if ($64) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $63;$RP$0$be = $62;
       }
      } else {
       $R$0$be = $60;$RP$0$be = $59;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((9688 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((9688 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((9688 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((9688 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((9688 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((9688 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((9688 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((9688 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((9688 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((9688 + 12|0))>>2] = $115;
   HEAP32[((9688 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((9688 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[((9688 + 20|0))>>2] = 0;
   HEAP32[((9688 + 8|0))>>2] = 0;
   return;
  }
  $120 = HEAP32[((9688 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((9688 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((9688 + 8|0))>>2] = $123;
   HEAP32[((9688 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((9688 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[9688>>2]|0;
     $146 = $145 & $144;
     HEAP32[9688>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre50 = (($134) + 8|0);
     $$pre$phi51Z2D = $$pre50;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi51Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi51Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $171;$RP9$0$ph = $170;
       }
      } else {
       $R7$0$ph = $168;$RP9$0$ph = $167;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = (($R7$0) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $177;$RP9$0$be = $176;
        }
       } else {
        $R7$0$be = $174;$RP9$0$be = $173;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((9688 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond40 = ($R7$1|0)==(0|0);
      if ($cond40) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((9688 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((9688 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((9688 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((9688 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((9688 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((9688 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((9688 + 8|0))>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((9688 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[9688>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[9688>>2] = $230;
   $$sum6$pre = (($224) + 2)|0;
   $$pre = ((9688 + ($$sum6$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = ((9688 + ($$sum7<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((9688 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((9688 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = (($$0) + 16|0);
 $266 = (($$0) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[((9688 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((9688 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$045 = $283;$T$044 = $275;
   while(1) {
    $291 = $K20$045 >>> 31;
    $292 = ((($T$044) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$044$lcssa = $T$044;
     break;
    }
    $285 = $K20$045 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $$lcssa62 = $287;
     label = 134;
     break;
    } else {
     $K20$045 = $285;$T$044 = $287;
    }
   }
   if ((label|0) == 134) {
    $T$0$lcssa = $$lcssa62;
    break;
   }
   $294 = HEAP32[((9688 + 16|0))>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$044$lcssa;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((9688 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function runPostSets() {
 
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}

  
function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&7](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&7](a1|0,a2|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&3](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&1]();
}

function b0(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(0); }
function _glGetShaderInfoLog__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glGetShaderInfoLog(p0|0,p1|0,p2|0,p3|0); }
function _glGetProgramInfoLog__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glGetProgramInfoLog(p0|0,p1|0,p2|0,p3|0); }
function b1(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(1);return 0; }
function b2(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(2); }
function _glGetShaderiv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _glGetShaderiv(p0|0,p1|0,p2|0); }
function b3() { ; nullFunc_v(3); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_viiii = [b0,b0,b0,_glGetShaderInfoLog__wrapper,_glGetProgramInfoLog__wrapper,b0,b0,b0];
var FUNCTION_TABLE_iii = [b1,b1,b1,b1,b1,_stbtt__edge_compare,b1,b1];
var FUNCTION_TABLE_viii = [b2,b2,_glGetShaderiv__wrapper,b2];
var FUNCTION_TABLE_v = [b3,_sdl_update];

  return { _strlen: _strlen, _free: _free, _main: _main, _memmove: _memmove, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_viiii: dynCall_viiii, dynCall_iii: dynCall_iii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var _strlen = Module["_strlen"] = asm["_strlen"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (Module['onExit']) Module['onExit'](status);

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



//# sourceMappingURL=textytest.html.map